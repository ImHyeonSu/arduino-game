#include <digitalWriteFast.h>
#include <Talkie.h>
#include <TalkieLPC.h>
#include <TalkieUtils.h>
#include <Vocab_Soundbites.h>
#include <Vocab_Special.h>
#include <Vocab_Toms_Diner.h>
#include <Vocab_US_Acorn.h>
#include <Vocab_US_Clock.h>
#include <Vocab_US_Large.h>
#include <Vocab_US_TI99.h>



#include <SoftwareSerial.h>
#include "SimpleVR.h"
int playerSwitch1 = 4; int playerSwitch2 = 5; int playerSwitch3 = 13; int playerSwitch4 = 11; int playerSwitch5 = 8; int startSwitch = 12;                        // 1,2,3,4,5 플레이어 스위치 start스위치     Player Join Switch, start switch
int buttonState1; int buttonState2; int buttonState3; int buttonState4; int buttonState5;                                                                       // 말 그대로 버튼 상황을 설명해줌               Variables that describe a button situation
int buttonStateCounter1 = 0; int buttonStateCounter2 = 0; int buttonStateCounter3 = 0; int buttonStateCounter4 = 0; int buttonStateCounter5 = 0;                //이거 1이상 안되면 배열 숫자 출력안됨         If the variables next to you do not exceed 1,will not receive the card
int lastButtonState1 = 0; int lastButtonState2 = 0; int lastButtonState3 = 0; int lastButtonState4 = 0; int lastButtonState5 = 0;                               //마지막 버튼 상황을 저장함                  Saves the last status of the player's entry switch
int modeSwitch1 = 9; int modeState1; int lastModeState1 = 0; int modeButtonCounter1 = 0;  int modeSwitch2 = 10; int modeState2; int lastModeState2 = 0; int modeButtonCounter2 = 0;
int voiceStartSwitch = 2; int voiceStartState ; int voiceConfirm = 0;
int arr[5][4];                                                                                                                                                  //배열- 즉 카드 이거 설정이 배열 공간설정이 고정으로 밖에안되서 이렇게함    Array ==Card
int i, z = 0;  int c = 0;  int cState = 0 ; int fakecounter = 0;                                                                                                                 //if코드에 들어가는 숫자-랜덤 숫자 배열      Variable global variable used for class function and repetition statement is set.
int p;

int offButtonCounter = 0;                                                                                                                                       //이거 없음 불자꾸 들어오니까 이 함수 조건문으로 넣어서 불 한번만 들어오게함       explain,x
int buttonPushCounter = 0 ;
int startButtonState = 0; int startButtonPushCounter = 0;                                                                                                       // 스타트 버튼 카운트임        Increase by number of player join
int SerialNumber ; int SerialNumber2 ;                                                                                                                          //SerialNumber = 게임시작하고 플레이어가 말하는 숫자, SerialNumber2 = 플레이어가 4번카드내고 지정하는 숫자    Serial number = player number stored here,  Serial number 2 = (a variable that stores the player you specify after the number 4 is released)
int pockyCounter = 0 ; int pockyMul = 0;                                                                                                                        //pockyCounter = 숫자카운터 22~55(11*플레이어 숫자(pockyMul)) pockyMul = 참가한 플레이어 숫자   Pockycounter == Player Participant Number X 11(22~55), POCKYMUL == Number of player participants
int quarterCounter = 0;                                                                                                                                         //quaterCounter값이 0일시 게임에서 플레이어가 숫자말함 1일시에는 플레이어가 낸 카드를 통해 숫자대조과정을 거쳐 숫자의 기능들을 사용함
int trigerCounter1 = 0 ;   int trigerCounter2 = 0 ;                                                                                                             //trigerCounter1는 숫자를 잘못냈을시 그 카드 4개의 값과 대조할시 카운트가 1씩올라가 카운트가 4가될시 잘못입력했다고 말해주고 다시 입력할수 있게 값들을 초기화시켜준다
int reflectNumber = 1;
int pointNumber = 0;
int loseCounter = 0; int winnerCounter = 0;                                                                                                                                          //winnerCounter 가 1일때는 게임 자체가 안돌아감 ㅎㅎ     WINNER counter == The variable that causes the next game not to start after the game is over

VR myVR(51, 50);
uint8_t buf[64];
uint8_t sta;
unsigned long start_time;
#define pockypocky1      (0x2)
#define pockypocky2      (0x3)
#define pockypocky3      (0x4)

#define one1             (0x5)
#define one2             (0x6)

#define return1          (0x7)
#define return2           (0x8)

#define three1           (0x9)
#define three2           (0x10)
#define three3            (0x11)
#define three4            (0x12)

#define choice1            (0x13)
#define choice2            (0x14)
#define choice3            (0x15)

//#define five1            (0x16)
#define five2            (0x17)
#define five3            (0x18)

//#define full1             (0x19)
#define full2             (0x20)
#define full3             (0x21)
#define two1              (0x22)
#define four1             (0x23)
#define yes1           (0x24)
#define yes2             (0x25)
#define no1              (0x26)
#define no2              (0x27)

Talkie voice;
const uint8_t zero[] PROGMEM = {0x00, 0x60, 0x4a, 0x30, 0xcf, 0x54, 0x94, 0x69, 0x62, 0x41, 0x7d, 0x37, 0x25, 0xb1, 0xc5, 0x01, 0xea, 0x2b, 0x8c, 0x25, 0x37, 0x8b, 0x83, 0xce, 0x2a, 0xb7, 0xd4, 0x54, 0x89, 0x2a, 0xba, 0x4c, 0xd4, 0x11, 0x1d, 0xf5, 0xdc, 0x76, 0x23, 0x87, 0xf7, 0x42, 0x7b, 0xda, 0x04, 0x1f, 0xde, 0x18, 0x9f, 0x2a, 0x15, 0x74, 0x04, 0x9e, 0x7c, 0x3c, 0x39, 0xf0, 0xc8, 0x79, 0xd3, 0xb6, 0xe4, 0xc2, 0x8d, 0xe4, 0x97, 0xdb, 0x82, 0x43, 0x15, 0x97, 0x6f, 0x1e, 0x71, 0x09, 0xd4, 0x22, 0x39, 0x65, 0xd8, 0xd9, 0xd0, 0x4a, 0x75, 0xf7, 0x92, 0x14, 0x23, 0x23, 0x33, 0xb5, 0x92, 0xdd, 0x8c, 0xb4, 0x5c, 0x97, 0x0e, 0x72, 0x37, 0x52, 0x0a, 0x9d, 0x2b, 0x31, 0x53, 0x48, 0x28, 0xc4, 0x09, 0x85, 0x72, 0x61, 0xae, 0xe4, 0xdb, 0x85, 0x56, 0x88, 0x9a, 0x40, 0xac, 0x10, 0x3c, 0x17, 0x2a, 0x52, 0xb6, 0x8d, 0xf9, 0x94, 0x14, 0x6a, 0x60, 0x09, 0x86, 0xf0, 0x54, 0x00, 0xff};
const uint8_t one[] PROGMEM = {0x00, 0x00, 0x28, 0x07, 0x2f, 0x48, 0x3d, 0x62, 0x29, 0x19, 0xbc, 0x60, 0xaa, 0x8c, 0x19, 0x24, 0xd4, 0xd6, 0xc0, 0xb3, 0x56, 0xc9, 0xc4, 0x58, 0x05, 0xef, 0x48, 0x2d, 0x33, 0x67, 0x19, 0xba, 0x0d, 0xad, 0xd4, 0xaf, 0x61, 0xd8, 0x32, 0xbc, 0x52, 0x3f, 0x9a, 0x68, 0xca, 0xf0, 0xca, 0x42, 0x0f, 0xe2, 0x49, 0x23, 0x2b, 0xf7, 0x35, 0x98, 0x27, 0x0c, 0x2f, 0xc3, 0xfb, 0x52, 0xec, 0x34, 0xda, 0x02, 0x61, 0x2b, 0x31, 0x43, 0x8c, 0x8b, 0x41, 0x8d, 0x54, 0x4f, 0xcb, 0x26, 0x05, 0xbd, 0x5a, 0xd5, 0x94, 0xa8, 0x0c, 0xb4, 0x1a, 0x56, 0x53, 0xad, 0x72, 0xd0, 0x6b, 0xc8, 0xc4, 0x35, 0xcb, 0xc1, 0xad, 0x60, 0x71, 0x27, 0xa4, 0x00, 0xab, 0x5b, 0xc9, 0xec, 0xa0, 0x02, 0xf4, 0x69, 0x67, 0xb7, 0x82, 0x32, 0xe0, 0xaa, 0xcb, 0x5d, 0xca, 0xff};
const uint8_t two[] PROGMEM = {0x00, 0x00, 0x00, 0x8d, 0xe8, 0x54, 0x32, 0xc2, 0xac, 0x2a, 0x60, 0x33, 0x15, 0x05, 0x2c, 0x17, 0x3c, 0xf2, 0x22, 0x58, 0xb2, 0xd2, 0xcc, 0x89, 0x83, 0x90, 0x9c, 0x0a, 0xc1, 0x97, 0x3d, 0x5c, 0x90, 0x9a, 0xdd, 0x1e, 0xe8, 0xa6, 0x87, 0x34, 0xd2, 0xab, 0xca, 0x0d, 0x0d, 0x87, 0xc6, 0xea, 0x08, 0x35, 0x5c, 0x22, 0x38, 0x2a, 0x35, 0x54, 0x68, 0xc8, 0xc0, 0x53, 0xb7, 0x12, 0xa1, 0x86, 0x04, 0x4f, 0xcc, 0x46, 0xc9, 0xa8, 0x12, 0x3c, 0x61, 0x6b, 0x93, 0x2c, 0x3c, 0x70, 0x8d, 0xac, 0xcd, 0x34, 0xc9, 0x40, 0x0f, 0xd1, 0xc8, 0xd8, 0x00, 0xf0, 0xff};
const uint8_t three[] PROGMEM = {0x00, 0x40, 0xf2, 0x48, 0xcc, 0xd4, 0x3d, 0xb6, 0xca, 0x0a, 0x33, 0x0d, 0x15, 0xdb, 0xad, 0x2b, 0xc2, 0xc2, 0x42, 0xe4, 0xae, 0x94, 0xc5, 0x08, 0x73, 0x8b, 0xd4, 0x32, 0xd4, 0xa9, 0xb2, 0xd4, 0xd1, 0xe0, 0x69, 0xa7, 0x8e, 0x90, 0x06, 0x8b, 0xe3, 0x95, 0xdb, 0x53, 0x63, 0x1e, 0xde, 0x6b, 0xee, 0x5c, 0xb1, 0x78, 0x84, 0xc8, 0x25, 0x67, 0xcc, 0xd0, 0x91, 0x22, 0x95, 0xd8, 0x71, 0xc1, 0x47, 0x89, 0x8c, 0xf3, 0x46, 0x89, 0x6c, 0x7a, 0xf8, 0x91, 0x52, 0xdf, 0x30, 0xb0, 0x1e, 0x97, 0xd4, 0x53, 0xde, 0x2b, 0x04, 0x97, 0x72, 0x47, 0x64, 0xbe, 0x80, 0x7c, 0x50, 0x25, 0xd5, 0xbd, 0x40, 0x68, 0xc6, 0xa7, 0x3c, 0x76, 0x14, 0xe9, 0x99, 0x94, 0xb1, 0xd8, 0x71, 0xa4, 0xab, 0x0a, 0x20, 0x6b, 0x26, 0xc5, 0x2a, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t four[] PROGMEM = {0x00, 0xc0, 0xf4, 0x22, 0x23, 0xcd, 0xd4, 0xb2, 0x8b, 0x2a, 0x53, 0x0f, 0xd1, 0xd8, 0x21, 0x29, 0x4c, 0xcc, 0x55, 0xed, 0x32, 0x60, 0x18, 0x35, 0x06, 0x74, 0x21, 0xca, 0x80, 0xae, 0x4c, 0x8a, 0xaf, 0xf2, 0x3a, 0x8b, 0x26, 0x69, 0x89, 0x98, 0xe3, 0x10, 0x3d, 0xa2, 0xf1, 0xa2, 0x6f, 0x82, 0xf5, 0x80, 0x2a, 0x94, 0x9c, 0xf7, 0x09, 0x88, 0x1e, 0x94, 0x28, 0xbe, 0x26, 0x20, 0xbb, 0x50, 0x72, 0xc4, 0x2e, 0x87, 0xea, 0x82, 0x2d, 0xd0, 0xbb, 0x1c, 0xaa, 0x06, 0xb4, 0xd8, 0xec, 0x08, 0xa8, 0x28, 0x30, 0x32, 0xbb, 0x35, 0x78, 0x2c, 0x40, 0xcb, 0xed, 0xe6, 0xf4, 0xe4, 0x80, 0x2d, 0x37, 0x43, 0xdc, 0x12, 0x02, 0x95, 0x4c, 0x0f, 0x4e, 0x0f, 0x08, 0x9c, 0x72, 0x31, 0xd8, 0xcd, 0xa1, 0x56, 0xc8, 0xe9, 0x60, 0x57, 0xa3, 0x28, 0x26, 0xc5, 0x45, 0x4d, 0x8b, 0x12, 0x8b, 0x0e, 0x04, 0xcb, 0x08, 0x73, 0x02, 0x00, 0x00, 0xf0, 0xff};
const uint8_t five[] PROGMEM = {0xa8, 0x4f, 0xb2, 0xd2, 0x44, 0x2c, 0xb1, 0xbc, 0xf0, 0x08, 0x17, 0xb6, 0xac, 0xd2, 0xc6, 0xc5, 0x4c, 0xcd, 0x32, 0xb0, 0xb4, 0x11, 0xb5, 0x10, 0xb6, 0x1c, 0xf2, 0x22, 0x23, 0x43, 0x3d, 0xd6, 0x89, 0x83, 0x3b, 0x13, 0xb7, 0x82, 0x27, 0x49, 0xf6, 0x94, 0xc2, 0x0b, 0x9d, 0x34, 0xfa, 0x15, 0xb6, 0x2c, 0x74, 0xb2, 0x18, 0x87, 0x38, 0x2a, 0xc8, 0xca, 0x43, 0x2e, 0xe4, 0x2c, 0xa1, 0xbb, 0x98, 0xda, 0xb0, 0x7d, 0x72, 0xe2, 0x2a, 0xa1, 0xc3, 0xf7, 0xd1, 0x59, 0x32, 0x84, 0x8e, 0x38, 0xd8, 0x30, 0x8e, 0x10, 0x3a, 0xd2, 0xa0, 0x3d, 0xd4, 0x9d, 0x58, 0x4b, 0x9d, 0x89, 0x54, 0x53, 0x72, 0x29, 0x11, 0x36, 0xca, 0x54, 0x84, 0xbb, 0x0c, 0x99, 0xca, 0x08, 0x32, 0xe3, 0xfc, 0x40, 0xcc, 0xcd, 0x2d, 0x0e, 0x02, 0xa6, 0x56, 0x0f, 0x79, 0x57, 0x11, 0x66, 0x6a, 0x09, 0x50, 0x9f, 0x99, 0x79, 0x28, 0xcb, 0x06, 0x00, 0x78, 0xff};
const uint8_t six[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xe2, 0x21, 0x34, 0xdc, 0x5c, 0xb6, 0x2b, 0x86, 0x34, 0x77, 0x77, 0xdb, 0x08, 0x98, 0xda, 0x9c, 0x00, 0xcb, 0xb8, 0x33, 0x60, 0x1a, 0xb7, 0x92, 0x75, 0xee, 0x16, 0x6e, 0x96, 0x4f, 0x14, 0x54, 0x8c, 0xa5, 0x93, 0x3d, 0x49, 0x50, 0x31, 0x9e, 0x09, 0xe6, 0xa4, 0x41, 0xd7, 0xa4, 0x27, 0x98, 0x93, 0x07, 0x15, 0x93, 0x16, 0x60, 0x02, 0x10, 0x8c, 0xf7, 0x08, 0x4d, 0x88, 0x72, 0x56, 0x72, 0x25, 0x55, 0xd6, 0x2a, 0x44, 0xa9, 0xb9, 0x0c, 0x6a, 0xcb, 0x52, 0x97, 0x47, 0x52, 0x60, 0x22, 0xca, 0xd4, 0x2a, 0xca, 0xa5, 0x76, 0x35, 0xf7, 0x24, 0x0c, 0x48, 0xc9, 0xb5, 0xf4, 0x43, 0x07, 0x8b, 0x5a, 0x64, 0x02, 0x6c, 0x1d, 0x46, 0x80, 0xad, 0xc2, 0x11, 0xf0, 0xb4, 0x3a, 0x02, 0x7e, 0x50, 0x47, 0xc0, 0xd3, 0x6a, 0x40, 0xfa, 0xc6, 0xc2, 0x58, 0x2c, 0x36, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t seven[] PROGMEM = {0x00, 0x00, 0x00, 0x60, 0xc2, 0x49, 0xdd, 0xdc, 0xd5, 0x96, 0x8b, 0xa7, 0x0a, 0x75, 0x53, 0xdb, 0x08, 0xd8, 0x32, 0x14, 0x01, 0x4b, 0x86, 0x11, 0x60, 0x09, 0xb7, 0x13, 0x05, 0xd5, 0xd5, 0x9c, 0x42, 0x4e, 0x1c, 0xec, 0x56, 0x4b, 0x18, 0x39, 0x71, 0x70, 0x55, 0xa9, 0x16, 0x64, 0xa5, 0xce, 0x55, 0xa9, 0x48, 0x60, 0x97, 0x0b, 0x13, 0xa1, 0x6a, 0x66, 0x93, 0x1f, 0x4c, 0xa5, 0x99, 0x45, 0x5e, 0x8e, 0x57, 0x11, 0xe2, 0x16, 0x64, 0x45, 0x56, 0x97, 0xa9, 0x87, 0xd9, 0x96, 0x72, 0xd3, 0xe6, 0x16, 0x66, 0x5c, 0x0e, 0x6c, 0xac, 0xb8, 0xc9, 0x32, 0x1e, 0x88, 0xb5, 0x1c, 0xa2, 0x58, 0x17, 0xba, 0x62, 0x15, 0xa8, 0x3d, 0x62, 0xa6, 0x18, 0x65, 0x20, 0x57, 0xbb, 0xbb, 0x6c, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t eight[] PROGMEM = {0x00, 0x00, 0x30, 0x94, 0xa0, 0xa2, 0xcf, 0x59, 0xfc, 0x91, 0xa3, 0xf4, 0xbe, 0x64, 0x22, 0x27, 0x4f, 0x5c, 0xf3, 0x9a, 0x89, 0x9e, 0xac, 0x32, 0xb6, 0x1b, 0x25, 0x7a, 0xa4, 0x4c, 0x39, 0x7e, 0x84, 0xe8, 0xa1, 0x12, 0xa5, 0xfa, 0x21, 0x62, 0xc3, 0x4b, 0x94, 0xfa, 0x1b, 0xc1, 0xf7, 0x38, 0xd1, 0x91, 0xd0, 0x5c, 0x01, 0x78, 0x97, 0x33, 0xe6, 0x97, 0x0a, 0xcc, 0x5c, 0x0a, 0x55, 0x6d, 0x2a, 0xd3, 0x45, 0x19, 0x10, 0xd1, 0x19, 0x6e, 0xb9, 0x54, 0x5d, 0x85, 0x79, 0x08, 0x1d, 0x01, 0x54, 0xea, 0xa6, 0x92, 0x82, 0x95, 0x24, 0x22, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t nine[] PROGMEM = {0x00, 0x00, 0x00, 0xa2, 0x00, 0xad, 0x06, 0xd5, 0x5c, 0x3b, 0x0d, 0xf8, 0x3a, 0x0a, 0xac, 0x9d, 0x54, 0x60, 0x63, 0xcd, 0x9d, 0xf6, 0x91, 0x82, 0xac, 0x32, 0x0f, 0xc1, 0x27, 0x0f, 0xb6, 0x82, 0x33, 0x85, 0x9c, 0x3c, 0xc4, 0x12, 0xa9, 0x14, 0x72, 0xf2, 0x98, 0x83, 0xa5, 0x53, 0xcc, 0xcd, 0x6e, 0x7e, 0x0a, 0xef, 0x4b, 0xa4, 0x5c, 0xcc, 0xd1, 0x83, 0x29, 0x97, 0x74, 0x31, 0xc7, 0x89, 0xda, 0x53, 0x4b, 0xc5, 0x9c, 0x20, 0x09, 0xcd, 0x28, 0x13, 0xb3, 0x92, 0xc8, 0xa4, 0xaa, 0x84, 0x6c, 0xcb, 0x02, 0x95, 0xee, 0x60, 0x68, 0x29, 0x97, 0x5c, 0x67, 0x8c, 0xe9, 0xa9, 0x1c, 0xd4, 0x2e, 0x65, 0x89, 0xc3, 0x72, 0xf0, 0x42, 0x45, 0x3d, 0x2e, 0xcb, 0xc1, 0xad, 0x64, 0x09, 0x27, 0xa4, 0x00, 0xb3, 0x5b, 0xc4, 0xe4, 0x92, 0x1c, 0xf4, 0x4e, 0x37, 0x93, 0x8a, 0x12, 0x90, 0x27, 0xc3, 0xc5, 0x32, 0x00, 0x00, 0x3c, 0xff};
const uint8_t ten[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x0b, 0xca, 0x4b, 0xd9, 0x9d, 0x20, 0x60, 0x2a, 0xb1, 0x56, 0x76, 0x64, 0xe6, 0xa9, 0x92, 0x4b, 0xb1, 0x44, 0xb0, 0x85, 0x99, 0x39, 0x69, 0x54, 0x96, 0x65, 0x26, 0xf6, 0xc4, 0xc1, 0x78, 0x96, 0x29, 0xd1, 0x93, 0x24, 0xed, 0xd5, 0x66, 0x82, 0x4f, 0x9a, 0x94, 0x79, 0xba, 0x8b, 0x39, 0x59, 0x12, 0xe6, 0xe6, 0x29, 0xf8, 0xe4, 0x51, 0x58, 0x6a, 0xa4, 0x90, 0x63, 0x04, 0xe1, 0x2e, 0x51, 0x64, 0x8f, 0x17, 0x78, 0x84, 0x5a, 0x91, 0x1d, 0xb1, 0x50, 0x15, 0xea, 0x49, 0x27, 0x64, 0xc0, 0xd5, 0x9a, 0x1b, 0x23, 0x93, 0x83, 0x58, 0xab, 0x21, 0xb2, 0x54, 0x0e, 0x72, 0xad, 0xb8, 0xc8, 0x51, 0x39, 0xc8, 0xb5, 0xa2, 0xce, 0x44, 0xe5, 0x20, 0xd6, 0x8a, 0x99, 0x5c, 0x91, 0x01, 0x5f, 0x6b, 0x62, 0x72, 0x50, 0x01, 0xea, 0x74, 0xba, 0x99, 0x06, 0x00, 0x80, 0xff};
const uint8_t eleven[] PROGMEM = {0x00, 0x00, 0x00, 0xc0, 0x8a, 0x14, 0xda, 0xd0, 0x52, 0x70, 0xc9, 0x7d, 0x1d, 0xe3, 0x2c, 0x21, 0x06, 0x70, 0x7d, 0x74, 0xc8, 0x7a, 0xb6, 0x50, 0x95, 0xd0, 0x26, 0xf3, 0xd1, 0x42, 0xd9, 0x86, 0x93, 0x84, 0xe2, 0x1b, 0x64, 0x16, 0x5e, 0xa2, 0x4d, 0x63, 0x6c, 0x63, 0xf8, 0xa4, 0x3e, 0x4e, 0xb1, 0x95, 0xe0, 0x13, 0x07, 0x5f, 0x15, 0x6a, 0x46, 0x46, 0xea, 0x6d, 0x95, 0x09, 0x07, 0x36, 0x39, 0xb3, 0x91, 0xa2, 0x26, 0x35, 0x04, 0x51, 0x57, 0x9a, 0x99, 0x95, 0xe1, 0x78, 0x15, 0x21, 0xe6, 0x41, 0x46, 0x64, 0x74, 0x99, 0x7a, 0x98, 0x2d, 0x19, 0x37, 0x65, 0xee, 0x21, 0xc6, 0xe4, 0xc0, 0xc4, 0x6a, 0x84, 0x2c, 0xe5, 0x81, 0x58, 0x23, 0xa1, 0x8a, 0x44, 0x09, 0x52, 0x8d, 0xb8, 0xc8, 0x96, 0x15, 0xa9, 0x40, 0xe9, 0x11, 0x35, 0x27, 0x28, 0x03, 0xa9, 0x3b, 0xdc, 0x25, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t twelve[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x25, 0x2e, 0xd2, 0xc3, 0xd2, 0x62, 0xbb, 0xac, 0x86, 0x50, 0x35, 0xb5, 0xa2, 0xca, 0xe2, 0x22, 0xcc, 0x4c, 0x8a, 0x8a, 0x5c, 0x8c, 0x50, 0x75, 0xdb, 0x2d, 0x56, 0x23, 0x14, 0x3b, 0x2b, 0x9c, 0xc4, 0xb6, 0x32, 0x89, 0x8a, 0x71, 0x52, 0x57, 0x2b, 0x2c, 0x32, 0xe2, 0xc9, 0x7c, 0x9c, 0x60, 0xf7, 0x80, 0x27, 0xf7, 0xa1, 0x95, 0x22, 0x0c, 0x2f, 0xc5, 0xe7, 0x61, 0xaa, 0x34, 0x32, 0x74, 0xdf, 0x9a, 0xa8, 0x4a, 0x68, 0x77, 0x5b, 0xe8, 0xc7, 0x32, 0x76, 0x19, 0x2e, 0x89, 0x1d, 0x27, 0xd8, 0x1d, 0x28, 0xe4, 0xfa, 0x15, 0xf2, 0x96, 0x60, 0x97, 0xab, 0x5b, 0x88, 0xdd, 0x82, 0x4c, 0xc6, 0x77, 0x21, 0x74, 0x0b, 0x16, 0x39, 0xe8, 0x4d, 0x38, 0x61, 0x99, 0x15, 0xc0, 0x4e, 0xb2, 0x79, 0x6c, 0x51, 0x26, 0x64, 0x66, 0xa6, 0x76, 0x10, 0x30, 0xb5, 0x39, 0x02, 0x86, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t thirteen[] PROGMEM = {0x00, 0x00, 0xd0, 0xd2, 0xcc, 0x3d, 0xdd, 0xdd, 0xd2, 0x49, 0x83, 0x88, 0x0a, 0xd7, 0x50, 0x27, 0x75, 0x41, 0xd2, 0x87, 0x23, 0x9e, 0xd4, 0x46, 0xc9, 0x68, 0x8a, 0x78, 0x32, 0x13, 0xb8, 0xb2, 0xb8, 0xe4, 0xc8, 0x85, 0xa7, 0xaa, 0xe2, 0x40, 0xa6, 0xe6, 0x0e, 0xa2, 0x5a, 0x62, 0x31, 0x31, 0x78, 0xb1, 0x4e, 0x8f, 0x44, 0x72, 0x43, 0xdd, 0x3d, 0x3d, 0x4c, 0x2b, 0xa6, 0x16, 0x8d, 0x34, 0x31, 0xad, 0xea, 0x9c, 0xd4, 0xdd, 0x25, 0x2b, 0x60, 0x17, 0xd5, 0x11, 0x15, 0x8a, 0xb1, 0x65, 0x54, 0x4f, 0x92, 0x28, 0xd5, 0x95, 0xc2, 0x5b, 0x69, 0xa2, 0x58, 0x1f, 0x02, 0x6f, 0x65, 0x89, 0x62, 0x9f, 0x0b, 0xb3, 0xa1, 0x24, 0x8a, 0x73, 0xc2, 0x6a, 0x87, 0x11, 0x08, 0xed, 0x28, 0xb3, 0x6d, 0x6e, 0xa2, 0xb8, 0xe3, 0xc4, 0xb4, 0x47, 0x25, 0xf1, 0x94, 0x77, 0x5c, 0xe8, 0x85, 0x0c, 0xf8, 0x5a, 0x55, 0x71, 0x62, 0x72, 0x50, 0x6b, 0xd0, 0x4d, 0x8d, 0x2a, 0x40, 0xaf, 0x41, 0x73, 0xa5, 0xa2, 0x00, 0xa7, 0x92, 0xd9, 0xec, 0x8a, 0x12, 0xa4, 0x5a, 0x61, 0x93, 0x4b, 0x72, 0x50, 0xbb, 0x4d, 0xcc, 0x0a, 0x8a, 0x41, 0x9a, 0x4c, 0x51, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t fourteen[] PROGMEM = {0x00, 0xc0, 0x8a, 0xc2, 0xc2, 0xd5, 0xc4, 0xb6, 0xca, 0x1b, 0x95, 0x30, 0x15, 0xc7, 0xa2, 0xac, 0x88, 0xcd, 0xc3, 0xe3, 0xa8, 0xa2, 0x60, 0x56, 0x73, 0xb3, 0x53, 0xb0, 0x2c, 0x22, 0x2c, 0x3c, 0x76, 0x88, 0x9c, 0xed, 0x34, 0x95, 0xd8, 0x25, 0x61, 0xbb, 0x03, 0x38, 0x17, 0x36, 0x9e, 0xbf, 0x70, 0xf0, 0x6a, 0x30, 0x12, 0x79, 0x44, 0x79, 0x3c, 0xc2, 0x4a, 0xcc, 0x64, 0xf3, 0x96, 0x92, 0x2b, 0xe1, 0x59, 0x32, 0x8a, 0x4a, 0x95, 0x1c, 0x6a, 0x99, 0x4c, 0x8d, 0xad, 0x52, 0xe6, 0x2d, 0x3c, 0x2c, 0x32, 0x49, 0xb9, 0x2a, 0xb3, 0xf4, 0xd8, 0x0a, 0x58, 0xc4, 0x53, 0x01, 0xcf, 0x18, 0x2b, 0xe0, 0x18, 0x97, 0x13, 0x15, 0x42, 0xb6, 0x13, 0x44, 0x4f, 0x52, 0x09, 0xf9, 0x8d, 0x13, 0xbb, 0xc2, 0x91, 0x2a, 0xc1, 0xb8, 0x31, 0x70, 0x47, 0x4d, 0x84, 0xf2, 0x46, 0xa0, 0x2f, 0x33, 0x61, 0xaa, 0x1d, 0x86, 0x37, 0xbd, 0x16, 0x06, 0xcc, 0x33, 0x8d, 0xcc, 0x4b, 0x6c, 0xb1, 0xce, 0x14, 0xc8, 0x0f, 0x09, 0xe6, 0xb5, 0x65, 0xe8, 0xcc, 0xe4, 0xa0, 0x4f, 0x33, 0x4b, 0x5c, 0x95, 0x83, 0xd5, 0x45, 0x62, 0xf1, 0x54, 0x01, 0x56, 0x15, 0x8b, 0xdb, 0x15, 0x39, 0x58, 0xd5, 0x22, 0x26, 0x2f, 0xe4, 0x82, 0x57, 0x86, 0xab, 0x3c, 0x13, 0x03, 0x55, 0x95, 0x69, 0xd2, 0x50, 0x0f, 0xc2, 0x74, 0x95, 0xda, 0x01, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t fifteen[] PROGMEM = {0x00, 0x00, 0xc0, 0xca, 0x4e, 0xd5, 0xd4, 0xd4, 0xb6, 0xca, 0x3b, 0x11, 0x11, 0xb3, 0x38, 0x08, 0x58, 0x2e, 0x4c, 0x00, 0xc3, 0x98, 0x2a, 0x60, 0x59, 0xd3, 0x13, 0x46, 0x66, 0x31, 0x6d, 0x86, 0x0e, 0x1b, 0x69, 0xe4, 0xb4, 0x1a, 0x3e, 0xb1, 0xe7, 0x9e, 0xdd, 0x62, 0x78, 0xe4, 0x8a, 0x44, 0x66, 0x9a, 0x28, 0x03, 0x2c, 0x6d, 0xaa, 0x80, 0xe5, 0x4d, 0x4d, 0xd1, 0x28, 0xb3, 0xb8, 0xdb, 0x41, 0x85, 0xa7, 0xea, 0x9e, 0x11, 0xa7, 0x31, 0x8d, 0xba, 0x66, 0xa9, 0xd3, 0x15, 0x46, 0xc2, 0xbd, 0x63, 0x64, 0x0f, 0x17, 0x09, 0xf7, 0xad, 0x40, 0x5d, 0x7c, 0x24, 0xd4, 0xd7, 0x84, 0x6c, 0x64, 0x11, 0x53, 0x7f, 0x10, 0xba, 0x91, 0x45, 0x4c, 0x73, 0x8e, 0x5c, 0x47, 0x1e, 0x30, 0xef, 0x0a, 0xa9, 0x1d, 0x66, 0xc0, 0xb4, 0xa7, 0xc4, 0x64, 0xf8, 0x09, 0xe3, 0x5c, 0x10, 0xd3, 0x11, 0x27, 0x82, 0xbd, 0x2d, 0xf0, 0x5a, 0x6a, 0x89, 0x4c, 0x27, 0xd3, 0x73, 0x19, 0x88, 0xbd, 0xc2, 0x92, 0xd8, 0x14, 0xa0, 0xf4, 0xa0, 0x98, 0x1a, 0x53, 0x01, 0x57, 0x2b, 0xc9, 0x4a, 0x42, 0x49, 0x94, 0x67, 0x55, 0x91, 0x29, 0x7e, 0x50, 0xea, 0x59, 0x06, 0xcd, 0xe5, 0x44, 0x7b, 0x46, 0x2b, 0x34, 0xd4, 0x03, 0x16, 0x11, 0x55, 0x56, 0x01, 0x00, 0x1e, 0xff};
const uint8_t sixteen[] PROGMEM = {0x00, 0x00, 0x00, 0x08, 0xb8, 0xcc, 0x0d, 0x01, 0x97, 0x87, 0x13, 0x60, 0xab, 0x30, 0x06, 0x4c, 0x11, 0x7e, 0x82, 0xc4, 0x3c, 0xc6, 0xd3, 0xc8, 0x89, 0xa3, 0xb0, 0xdc, 0x48, 0xc1, 0x37, 0x09, 0x39, 0x17, 0x56, 0x27, 0x46, 0x34, 0xa4, 0xc9, 0xab, 0x45, 0xb8, 0x95, 0x96, 0x35, 0x19, 0xea, 0x95, 0xa6, 0x15, 0xd0, 0x79, 0xa9, 0x02, 0x3a, 0x77, 0x17, 0xc0, 0x51, 0x6a, 0x08, 0xb8, 0x51, 0xa9, 0xf1, 0x85, 0x54, 0xb4, 0xa9, 0x93, 0x15, 0x67, 0x86, 0x39, 0x9d, 0x64, 0x4f, 0x92, 0x28, 0xe5, 0xb5, 0x13, 0x5d, 0x69, 0x65, 0x58, 0xdf, 0x02, 0x7e, 0x64, 0x95, 0x41, 0x6f, 0x31, 0xfc, 0x21, 0x57, 0x0a, 0xbb, 0x41, 0xcc, 0x86, 0x9a, 0x28, 0x6c, 0x27, 0xb2, 0x6d, 0x56, 0x24, 0x78, 0xed, 0xc4, 0xa6, 0x79, 0x95, 0xc2, 0x6c, 0x30, 0xd3, 0x16, 0x25, 0x82, 0xbb, 0x4e, 0xec, 0x52, 0x62, 0x28, 0x5f, 0x2a, 0x6a, 0x09, 0x19, 0xd4, 0xb1, 0x46, 0xec, 0x45, 0x65, 0x60, 0x75, 0x92, 0xbb, 0x13, 0x55, 0x80, 0x59, 0x49, 0xea, 0x8e, 0x45, 0x05, 0x5a, 0x35, 0x89, 0x3b, 0x96, 0x01, 0x0b, 0x40, 0xae, 0x66, 0x0d, 0x27, 0xc8, 0x07, 0x65, 0xca, 0x39, 0xec, 0x02, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t seventeen[] PROGMEM = {0x00, 0xe0, 0x8a, 0x2d, 0x4c, 0xdd, 0xd4, 0x34, 0x02, 0x36, 0x0f, 0x25, 0xc0, 0x12, 0xee, 0x04, 0x18, 0xdc, 0x75, 0x45, 0x49, 0x44, 0xa5, 0xa6, 0xe8, 0x13, 0x45, 0x5d, 0x55, 0x1a, 0x42, 0x4e, 0x14, 0x6c, 0x57, 0x59, 0x04, 0x1e, 0xa9, 0x33, 0x11, 0xa1, 0x66, 0xca, 0x24, 0x30, 0x56, 0x9a, 0x9a, 0xb4, 0x15, 0x07, 0x16, 0x69, 0xe6, 0x41, 0x4e, 0x1c, 0x58, 0x54, 0x58, 0x08, 0x6d, 0x31, 0xb2, 0xd5, 0x6e, 0x2e, 0x26, 0xc5, 0xa0, 0xd4, 0xa0, 0xab, 0x6b, 0x93, 0x82, 0x57, 0xc1, 0x6a, 0x6e, 0x4c, 0x01, 0xe4, 0x76, 0xba, 0x3b, 0x6d, 0x78, 0x27, 0xe6, 0xed, 0x66, 0x57, 0x00, 0x47, 0x29, 0x31, 0xe0, 0x9a, 0xa0, 0x15, 0x55, 0x4a, 0xb9, 0x6d, 0xe0, 0x4e, 0x54, 0x18, 0xe6, 0xb6, 0x42, 0xdb, 0xf1, 0x4a, 0x1a, 0x87, 0xba, 0x66, 0x68, 0x23, 0xab, 0x14, 0xfb, 0x92, 0xe9, 0x35, 0x35, 0x10, 0xda, 0x75, 0x62, 0x56, 0xac, 0x48, 0x71, 0xc7, 0x88, 0x49, 0xf1, 0x2b, 0x85, 0x9d, 0x60, 0x26, 0x25, 0x4e, 0x14, 0x67, 0x83, 0x99, 0x85, 0x94, 0x71, 0xdb, 0x11, 0x91, 0x67, 0x72, 0x10, 0x6b, 0x59, 0x5d, 0xb5, 0xc8, 0x41, 0xad, 0x21, 0x37, 0x25, 0xac, 0x04, 0xab, 0x1a, 0x35, 0x94, 0xb2, 0x12, 0x8c, 0x1a, 0x66, 0x53, 0x4a, 0x4a, 0x50, 0x7a, 0x94, 0xdd, 0x2e, 0x4a, 0x40, 0x99, 0x0c, 0x35, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t eightteen[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0b, 0x32, 0xaa, 0x9c, 0xd3, 0xac, 0x2c, 0x28, 0x9b, 0x4d, 0x22, 0x7b, 0xa4, 0xc4, 0xa5, 0x66, 0x88, 0xe8, 0x11, 0x13, 0xe3, 0xda, 0x65, 0x62, 0x47, 0xa8, 0x94, 0x72, 0x8f, 0x89, 0x9e, 0x34, 0x11, 0xac, 0x3d, 0x86, 0xda, 0x32, 0x41, 0x75, 0xb7, 0x90, 0x9e, 0xc9, 0x81, 0xac, 0x9d, 0x42, 0x25, 0x44, 0xd0, 0x4c, 0xbb, 0x4d, 0x63, 0xa9, 0xac, 0x30, 0xb5, 0x60, 0xb5, 0x63, 0x80, 0xc6, 0xd4, 0x5a, 0xdf, 0x05, 0xa3, 0x94, 0x4a, 0x16, 0xc0, 0x0a, 0xca, 0x2d, 0xaa, 0x04, 0x6b, 0xc7, 0x68, 0x1f, 0x2e, 0x53, 0xec, 0x1b, 0x85, 0x76, 0xd2, 0x4c, 0xb0, 0xae, 0x05, 0xde, 0x92, 0x33, 0xc1, 0xb9, 0x62, 0x64, 0x4b, 0xcd, 0x04, 0x67, 0x0b, 0xd1, 0x0e, 0x3d, 0x11, 0xd8, 0x4d, 0x42, 0x37, 0x9c, 0x44, 0x70, 0x37, 0x98, 0x69, 0x0b, 0x3c, 0xa1, 0x1d, 0x47, 0x64, 0x29, 0x61, 0xc2, 0x37, 0x8c, 0xd8, 0x85, 0x0c, 0xe8, 0x1a, 0x57, 0x85, 0x6f, 0x72, 0xd0, 0xba, 0x44, 0x5c, 0xa9, 0xca, 0x41, 0xeb, 0x41, 0x57, 0x35, 0xaa, 0x00, 0xa5, 0x96, 0x9d, 0x1d, 0xab, 0x1c, 0xe4, 0x6e, 0x33, 0x95, 0x1b, 0x14, 0xab, 0xa3, 0x22, 0x95, 0x9c, 0xca, 0x81, 0xa9, 0xb2, 0x56, 0x65, 0xa8, 0x07, 0x22, 0xda, 0x2a, 0x94, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t nineteen[] PROGMEM = {0x00, 0x00, 0x00, 0x46, 0x03, 0xa5, 0x16, 0xcc, 0x5d, 0x06, 0x03, 0xb8, 0x38, 0xd6, 0x60, 0x7c, 0xd4, 0x20, 0xcb, 0xd2, 0xc3, 0xf0, 0x51, 0x83, 0x0b, 0xf7, 0x08, 0xc1, 0x47, 0x89, 0xd6, 0xd3, 0x22, 0x4c, 0x1f, 0x29, 0x29, 0xad, 0x74, 0x17, 0x72, 0xc4, 0x22, 0xa8, 0x26, 0x8c, 0xcc, 0xc9, 0x22, 0xa3, 0xde, 0x14, 0x3a, 0x2d, 0x27, 0xca, 0xcf, 0x58, 0xdc, 0xb8, 0x1c, 0x9c, 0x2e, 0xe2, 0x48, 0xa2, 0x12, 0xe0, 0xa3, 0x55, 0xc3, 0x6e, 0xc3, 0x8a, 0xd4, 0xe8, 0x20, 0xa7, 0x2d, 0x1f, 0x9e, 0x41, 0xd3, 0x4c, 0x2b, 0x60, 0xe5, 0xe0, 0x12, 0x0e, 0x45, 0x6a, 0x1d, 0x96, 0x56, 0x92, 0x29, 0xce, 0x34, 0x22, 0x5b, 0x69, 0xa2, 0xb8, 0x1b, 0x88, 0x6e, 0x89, 0x95, 0xe2, 0x6e, 0x30, 0xba, 0x21, 0x47, 0x42, 0xbb, 0x46, 0x6c, 0x87, 0x1a, 0x09, 0x6d, 0x07, 0xaa, 0x69, 0x66, 0x20, 0x74, 0x63, 0xa8, 0xba, 0xb9, 0x89, 0xe0, 0x76, 0x80, 0xeb, 0x1e, 0x94, 0x24, 0x12, 0xdc, 0x09, 0x64, 0x16, 0x32, 0xa8, 0xea, 0x8c, 0xc9, 0xad, 0xc9, 0x41, 0xef, 0x46, 0x35, 0x37, 0xc2, 0x07, 0xab, 0x0a, 0xd5, 0x9c, 0x88, 0x0a, 0xf4, 0x1e, 0x12, 0x57, 0x22, 0x7c, 0x90, 0xea, 0x98, 0xdd, 0x89, 0xf0, 0x41, 0xa9, 0x55, 0x75, 0xb9, 0xc2, 0x07, 0x3e, 0xd6, 0xc4, 0xed, 0x90, 0x1c, 0x84, 0x9a, 0x10, 0xb7, 0x02, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t twenty[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0xa6, 0xa5, 0x92, 0x5d, 0xa5, 0xba, 0xba, 0xdb, 0x72, 0x41, 0xd3, 0xe6, 0x6a, 0xa6, 0xc4, 0xb8, 0x49, 0xba, 0xbb, 0x99, 0xdc, 0x16, 0xe8, 0x59, 0x8a, 0xe2, 0x55, 0x4e, 0xec, 0x5a, 0x09, 0x66, 0x94, 0x3a, 0x71, 0x08, 0x65, 0x14, 0x11, 0xf8, 0xc4, 0x51, 0x79, 0x69, 0xb8, 0xe1, 0x93, 0x19, 0xe9, 0xad, 0x66, 0x92, 0x57, 0xe1, 0x99, 0x66, 0x99, 0xcb, 0x3d, 0x94, 0x63, 0xd2, 0x13, 0x0a, 0x75, 0x39, 0x9e, 0x72, 0x6d, 0x31, 0xb8, 0x45, 0x45, 0xca, 0x75, 0x2d, 0xc4, 0x1a, 0xed, 0x98, 0xce, 0x16, 0x01, 0xeb, 0x6c, 0x4a, 0x1d, 0x95, 0xb9, 0x24, 0xe0, 0x2e, 0xd3, 0x54, 0x77, 0x1d, 0xa0, 0x9b, 0x2c, 0x60, 0xe9, 0x4b, 0xa4, 0x2a, 0x72, 0x87, 0x25, 0xb7, 0xd4, 0x36, 0xcb, 0x02, 0x21, 0x9f, 0x52, 0x27, 0x00, 0x00, 0xf0, 0xff};
const uint8_t twentyone[] PROGMEM = {0x00, 0xa0, 0x80, 0x2e, 0x2c, 0x14, 0x50, 0x88, 0x7b, 0xca, 0xa3, 0x76, 0x37, 0x73, 0xdb, 0x25, 0x92, 0xad, 0x0c, 0xd5, 0x62, 0x9f, 0xd8, 0xd6, 0x12, 0x4c, 0x2f, 0x7d, 0xa2, 0x10, 0x2a, 0xb0, 0x22, 0xc8, 0x09, 0x83, 0x8e, 0xe1, 0x34, 0xd3, 0x2d, 0x46, 0x36, 0x46, 0xc3, 0x2c, 0x97, 0x04, 0xe8, 0x9a, 0x76, 0x56, 0x7c, 0xd8, 0x4c, 0xa9, 0x66, 0x82, 0xdc, 0x61, 0x13, 0xa5, 0xda, 0x73, 0xa2, 0x87, 0x0f, 0x82, 0x7a, 0xc7, 0x0d, 0x2d, 0x9e, 0xb8, 0x98, 0x72, 0x0b, 0x53, 0x44, 0x70, 0xdc, 0xd5, 0xcb, 0x72, 0x90, 0xc0, 0x23, 0x8b, 0x4c, 0xc7, 0x49, 0x02, 0x4f, 0x54, 0x26, 0x64, 0x87, 0x02, 0x8c, 0x72, 0xb0, 0x4a, 0x5c, 0x72, 0xba, 0x82, 0x21, 0x32, 0xf2, 0xc8, 0xf5, 0x2c, 0x82, 0x2a, 0xd3, 0x27, 0xf3, 0xbd, 0x09, 0xba, 0x0c, 0x9f, 0xdc, 0xe7, 0x26, 0xe8, 0x32, 0x72, 0x95, 0xa3, 0xfb, 0x5c, 0x8c, 0x9d, 0x46, 0x8f, 0x6b, 0x62, 0x31, 0x75, 0x88, 0x59, 0x91, 0xf4, 0x65, 0x54, 0x21, 0xb6, 0xa4, 0xc0, 0x55, 0x49, 0xba, 0xa2, 0x90, 0x83, 0x52, 0x23, 0xc9, 0xb6, 0x5d, 0x01, 0x6a, 0x35, 0x05, 0xab, 0x36, 0x05, 0x18, 0xd5, 0xe8, 0xa2, 0xda, 0x14, 0xa0, 0xd7, 0xa0, 0x99, 0x63, 0x53, 0x02, 0x5f, 0xc7, 0xca, 0xaa, 0x55, 0x08, 0x5a, 0x35, 0xbb, 0x2a, 0x51, 0x21, 0x70, 0xb1, 0xe4, 0xaa, 0x84, 0xe5, 0x20, 0xf6, 0xb8, 0x98, 0x14, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t twentytwo[] PROGMEM = {0x00, 0x80, 0xfa, 0x44, 0xcd, 0xd4, 0xcd, 0x96, 0x01, 0x3a, 0xb7, 0x10, 0x40, 0x61, 0xee, 0x29, 0x0f, 0xda, 0xdd, 0xcc, 0x6c, 0x8f, 0x58, 0xf6, 0x50, 0x54, 0xaf, 0x7c, 0x62, 0x57, 0x4a, 0xa0, 0x3c, 0xf0, 0x09, 0x83, 0xab, 0xa4, 0x8a, 0x20, 0x27, 0x0c, 0xda, 0x87, 0x53, 0x4d, 0x97, 0x04, 0xb8, 0x18, 0x4d, 0xb3, 0xbc, 0x92, 0xc0, 0x34, 0x3b, 0x8c, 0xea, 0x89, 0x03, 0xe3, 0xde, 0x10, 0x7a, 0x27, 0x49, 0x0c, 0xf3, 0x4a, 0x88, 0xad, 0xc4, 0x33, 0xbe, 0x51, 0x64, 0x37, 0x52, 0x2c, 0x63, 0xdb, 0x98, 0xae, 0xaa, 0x81, 0xb0, 0x9d, 0x50, 0x6a, 0x29, 0x9d, 0x42, 0x2c, 0x4c, 0x25, 0x8f, 0x7e, 0x62, 0x31, 0x77, 0x35, 0xad, 0x80, 0x63, 0x5c, 0x04, 0xb0, 0xbc, 0x4b, 0xe3, 0x8a, 0x24, 0xad, 0xea, 0x40, 0x47, 0x8c, 0x4c, 0x7c, 0xc6, 0x03, 0x1e, 0x29, 0x70, 0x89, 0x6d, 0x37, 0x78, 0x08, 0xab, 0x74, 0xb6, 0xdc, 0xf0, 0x22, 0xb5, 0xd2, 0xe9, 0x34, 0xa1, 0x8b, 0x36, 0x4a, 0xbb, 0xcb, 0x8d, 0x2c, 0x4e, 0x29, 0xaf, 0x2e, 0x35, 0xdc, 0x48, 0xea, 0xa3, 0xd3, 0x45, 0x68, 0x8b, 0x99, 0x8d, 0xce, 0xd0, 0x20, 0x2d, 0x63, 0xb6, 0x3a, 0x5c, 0x02, 0x87, 0x1c, 0xe5, 0x4e, 0x55, 0x2d, 0x62, 0x48, 0xb0, 0x5d, 0xb5, 0xdc, 0x88, 0x22, 0xc1, 0x0b, 0xb2, 0x11, 0x21, 0xa2, 0x04, 0xbb, 0x84, 0xd3, 0x2d, 0x8b, 0x12, 0xcc, 0x60, 0xcd, 0xb0, 0xc4, 0x42, 0x58, 0x43, 0xc8, 0xa3, 0x09, 0xaa, 0x41, 0x1a, 0x35, 0xcd, 0xa4, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t twentythree[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x06, 0xe8, 0xd4, 0x5c, 0x00, 0x55, 0xba, 0x87, 0xd0, 0xd9, 0x08, 0x55, 0xb5, 0xbc, 0x62, 0xd5, 0x43, 0xd1, 0xbc, 0xf2, 0x89, 0x7c, 0x2e, 0x85, 0x8e, 0x20, 0x27, 0x0c, 0x36, 0x8a, 0xd2, 0x03, 0x9f, 0xc8, 0x69, 0x1f, 0x4e, 0x35, 0x9d, 0x12, 0xe0, 0xab, 0xcd, 0x5d, 0xf6, 0x89, 0x02, 0x93, 0xea, 0x30, 0xaa, 0x27, 0x0e, 0x8c, 0xfa, 0x52, 0xa0, 0xad, 0x38, 0x52, 0xaa, 0x2f, 0x21, 0x56, 0x32, 0xe0, 0x6a, 0x56, 0x98, 0x9c, 0x29, 0x40, 0xdb, 0x69, 0x65, 0xa9, 0x24, 0x22, 0x3c, 0xa2, 0xd3, 0x2c, 0xbb, 0xa4, 0x31, 0x4b, 0x13, 0x91, 0xd3, 0xaa, 0xca, 0xbd, 0x4c, 0x45, 0x76, 0x8b, 0x99, 0x6e, 0x8f, 0x50, 0x2b, 0x2d, 0x05, 0x59, 0x2a, 0x4b, 0x23, 0x8d, 0x84, 0x15, 0x6e, 0x6f, 0x8e, 0x78, 0x62, 0xe3, 0x69, 0xa2, 0xa5, 0xe4, 0xe1, 0x82, 0xe1, 0xce, 0x55, 0x0b, 0x87, 0x0f, 0x42, 0xab, 0xc7, 0x0c, 0x9d, 0x3c, 0x32, 0xae, 0x19, 0x13, 0x7c, 0x98, 0xc0, 0xb8, 0x77, 0x85, 0xc8, 0x08, 0x0c, 0xd3, 0xd9, 0x26, 0x62, 0x2d, 0x15, 0x3c, 0x76, 0x13, 0x88, 0x65, 0x26, 0xe4, 0x82, 0xfb, 0x4e, 0x00, 0xf5, 0x50, 0x60, 0x55, 0xdb, 0x0a, 0xf4, 0x1d, 0x47, 0x45, 0xed, 0x1a, 0xd0, 0x33, 0x3e, 0xa3, 0x31, 0xeb, 0x20, 0x57, 0x65, 0x1c, 0xeb, 0x5c, 0x8b, 0x64, 0x56, 0x30, 0xa2, 0x3d, 0x65, 0x76, 0x01, 0x00, 0x00, 0x1e, 0xff};
const uint8_t twentyfour[] PROGMEM = {0x00, 0x28, 0x4d, 0x28, 0x5c, 0x43, 0xad, 0xa0, 0x1e, 0xd2, 0x4e, 0x0f, 0xb5, 0x83, 0x3a, 0x4b, 0xcc, 0x3c, 0x2c, 0xae, 0x02, 0x56, 0x62, 0x63, 0x40, 0x92, 0xea, 0x21, 0x8e, 0xd6, 0x43, 0x55, 0x6d, 0xb7, 0x58, 0x8d, 0x32, 0x70, 0xaf, 0x7c, 0x22, 0xd7, 0x42, 0x68, 0x22, 0xf0, 0x09, 0x83, 0x8b, 0xa2, 0xb4, 0x22, 0x27, 0x0a, 0x5a, 0x47, 0x4b, 0x02, 0x8f, 0xd8, 0x30, 0xeb, 0x4c, 0xb5, 0x7c, 0x98, 0xc4, 0xa9, 0xa7, 0x02, 0xec, 0x62, 0x22, 0xa3, 0xd9, 0x36, 0x30, 0x2b, 0x0a, 0x8c, 0xe6, 0x46, 0x41, 0xb7, 0x8c, 0x09, 0xdd, 0x49, 0x16, 0xd5, 0xca, 0xc8, 0x58, 0xa4, 0xa2, 0x75, 0x4a, 0x87, 0x35, 0x11, 0xb5, 0xd8, 0x04, 0x18, 0x46, 0x3d, 0x65, 0x59, 0x79, 0xa6, 0xaa, 0x95, 0x16, 0x8b, 0xde, 0x0e, 0x1e, 0x33, 0x1a, 0xc7, 0xdb, 0x14, 0x68, 0xce, 0xe8, 0x42, 0x91, 0x44, 0x99, 0x06, 0xae, 0x05, 0x85, 0x14, 0xa3, 0x13, 0xac, 0x26, 0x14, 0x5b, 0xed, 0x0a, 0xe8, 0x2a, 0x51, 0x7c, 0xfd, 0xc4, 0x68, 0x23, 0x40, 0x89, 0xf4, 0xa3, 0xd0, 0x56, 0x83, 0x25, 0x35, 0x8f, 0xda, 0x9c, 0x0d, 0x97, 0xdc, 0x4d, 0x1a, 0x75, 0x35, 0x50, 0x0a, 0x37, 0x79, 0xd4, 0x24, 0x10, 0x01, 0xdc, 0xe4, 0x4e, 0xa5, 0x6b, 0xdc, 0x66, 0x18, 0xc4, 0x04, 0xba, 0x69, 0xb1, 0x50, 0x25, 0xd2, 0xb3, 0xac, 0x2e, 0xcc, 0x4e, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t twentyfive[] PROGMEM = {0x00, 0x80, 0xd2, 0x84, 0xc2, 0x35, 0xd4, 0x0e, 0xe9, 0x11, 0xe9, 0xb4, 0x50, 0x3b, 0xa8, 0x53, 0xd4, 0xcd, 0xc3, 0xe3, 0x2a, 0x60, 0x25, 0x36, 0x06, 0x24, 0xa9, 0x1e, 0xe2, 0x68, 0x3d, 0x54, 0xd5, 0x76, 0x8b, 0xd5, 0x28, 0x03, 0xf7, 0xca, 0x27, 0x72, 0x2d, 0x84, 0xc6, 0x03, 0x9f, 0x30, 0xb8, 0x28, 0x4a, 0x2b, 0x72, 0xa2, 0xa0, 0x75, 0xb4, 0x24, 0x70, 0x8b, 0x35, 0xb3, 0xce, 0x54, 0xcb, 0x87, 0x49, 0x9c, 0x7a, 0x2a, 0xc0, 0x1e, 0x26, 0x32, 0x9a, 0x2d, 0x03, 0xb3, 0xa2, 0xc0, 0x68, 0x6e, 0x14, 0x74, 0xcb, 0x98, 0xd0, 0x9d, 0x64, 0x52, 0xad, 0x8c, 0x8c, 0x45, 0x2a, 0x9a, 0xa4, 0x64, 0x58, 0x53, 0x56, 0x8b, 0x4d, 0x80, 0x65, 0xd5, 0x4b, 0x5c, 0x44, 0x94, 0x9b, 0xc6, 0x39, 0x99, 0x8f, 0xa3, 0x94, 0x1e, 0xf0, 0xe4, 0xa1, 0x14, 0x53, 0x87, 0xe0, 0x9b, 0x9f, 0x22, 0xa4, 0x42, 0xee, 0x10, 0x72, 0xd5, 0xa3, 0xf9, 0x50, 0xc4, 0x15, 0x62, 0xae, 0x71, 0xdc, 0x10, 0x82, 0xa8, 0x52, 0xc8, 0x89, 0x82, 0x2b, 0xa1, 0x0c, 0xa1, 0x27, 0x8b, 0xaa, 0x95, 0x23, 0x84, 0xac, 0x2c, 0xa8, 0x72, 0x51, 0x17, 0xbb, 0xf3, 0x91, 0x79, 0x15, 0xa1, 0xa6, 0x62, 0x5b, 0xa6, 0x54, 0xa4, 0x19, 0x9b, 0x33, 0x39, 0x30, 0xd5, 0xa1, 0x66, 0x85, 0x00, 0x8d, 0x8b, 0x11, 0xa0, 0x49, 0x0f, 0x04, 0x4c, 0xe5, 0x01, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t twentysix[] PROGMEM = {0x00, 0x08, 0xe8, 0xd2, 0x42, 0x00, 0x9d, 0x98, 0x27, 0xba, 0x2a, 0x77, 0x37, 0x8b, 0xed, 0x42, 0x15, 0xcb, 0x59, 0x25, 0xf6, 0x88, 0x75, 0x2b, 0x41, 0xf7, 0xd2, 0x27, 0xf2, 0xa9, 0x0c, 0x3b, 0x82, 0x9c, 0x30, 0x98, 0x68, 0x4e, 0x0f, 0x3c, 0x22, 0xa5, 0xbd, 0x25, 0xd4, 0x52, 0x4a, 0xa1, 0xa9, 0x0c, 0x73, 0xc5, 0x2b, 0x0a, 0x4c, 0x7a, 0xc2, 0xa8, 0xae, 0x38, 0x32, 0xaa, 0x4b, 0x25, 0xb7, 0x92, 0x48, 0xb9, 0xae, 0x8d, 0xe8, 0x48, 0x22, 0xa5, 0xbe, 0x71, 0xb0, 0x25, 0xa3, 0xcc, 0x67, 0xca, 0x44, 0xa7, 0xac, 0x30, 0x12, 0x0d, 0xb7, 0xcb, 0x80, 0x65, 0x43, 0x05, 0xb0, 0xa9, 0x59, 0x73, 0x0b, 0x8e, 0x4c, 0x8b, 0x50, 0x27, 0x0c, 0xa2, 0xba, 0xac, 0x04, 0x9f, 0x38, 0xca, 0xaa, 0x8a, 0x12, 0x7c, 0x92, 0xa0, 0xaa, 0xdb, 0x43, 0xf0, 0x91, 0xa3, 0xb2, 0x2c, 0x77, 0xc1, 0xc7, 0x0e, 0xda, 0xb3, 0x4c, 0x85, 0xb4, 0x48, 0x39, 0xab, 0x10, 0x16, 0x17, 0x52, 0xa8, 0x3d, 0xc7, 0xc9, 0x2a, 0x89, 0x80, 0x8e, 0xa8, 0x10, 0x31, 0x44, 0x8c, 0xda, 0xcc, 0xc3, 0x44, 0x15, 0xa5, 0x3a, 0xb3, 0x4c, 0xb7, 0xc2, 0x80, 0xc1, 0x43, 0x09, 0x70, 0x44, 0x38, 0x01, 0xb6, 0x76, 0x23, 0xc0, 0x52, 0xee, 0x04, 0x38, 0x32, 0x02, 0x01, 0x4f, 0x99, 0x23, 0xe0, 0x30, 0x53, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t twentyseven[] PROGMEM = {0x40, 0x80, 0x2e, 0x2d, 0x04, 0xd0, 0xb0, 0x79, 0xa0, 0xb3, 0x76, 0x77, 0x73, 0xdb, 0x2e, 0x94, 0xa5, 0x8c, 0x44, 0x63, 0x8f, 0xd8, 0xb4, 0x12, 0x0c, 0x2f, 0x7d, 0x22, 0x1f, 0xcb, 0xb1, 0x23, 0xc8, 0x09, 0x83, 0x89, 0xe6, 0xb4, 0xd0, 0x2d, 0xe6, 0xda, 0x47, 0xc2, 0x24, 0xa5, 0x94, 0xc9, 0xc8, 0x34, 0x53, 0xbc, 0xa2, 0xc0, 0xb8, 0x27, 0x8c, 0xea, 0x8a, 0x23, 0xa3, 0xbc, 0x52, 0x72, 0x23, 0x09, 0x8c, 0xfa, 0xca, 0x80, 0xb5, 0x5c, 0x72, 0xb9, 0x09, 0x85, 0x52, 0x6a, 0xca, 0x2c, 0xb7, 0x5d, 0x74, 0x69, 0x3c, 0x12, 0x8e, 0xed, 0x28, 0x04, 0xd8, 0x2a, 0x44, 0x00, 0x4b, 0x86, 0x0a, 0xe0, 0xca, 0x50, 0x01, 0x2c, 0x55, 0xda, 0xc8, 0x42, 0x22, 0x32, 0xd2, 0xd4, 0x49, 0x83, 0xec, 0x4e, 0x4b, 0xc1, 0x27, 0x8f, 0xa6, 0x3a, 0x2c, 0x04, 0x9f, 0x3c, 0x84, 0x6e, 0x53, 0x37, 0x7c, 0x0a, 0x9f, 0x2a, 0x45, 0x35, 0x70, 0xa8, 0x89, 0x8f, 0x10, 0xf1, 0x30, 0xa1, 0x8e, 0x3c, 0x32, 0x94, 0x2d, 0x37, 0xcf, 0xc7, 0x70, 0x09, 0x33, 0xdc, 0x42, 0x95, 0x4d, 0x35, 0x4d, 0x68, 0xcb, 0xb9, 0x2f, 0xd1, 0x70, 0x33, 0xa6, 0x00, 0xb9, 0x9a, 0xd5, 0xed, 0x98, 0x02, 0xc4, 0x18, 0x32, 0x53, 0xac, 0x0a, 0x10, 0x62, 0xd9, 0x44, 0xb1, 0xf2, 0x41, 0xae, 0x61, 0x35, 0x25, 0xa2, 0x04, 0x31, 0x96, 0xd5, 0x94, 0xb0, 0x18, 0x94, 0x68, 0x51, 0x97, 0x0b, 0x00, 0x00, 0xf0, 0xff};
const uint8_t twentyeight[] PROGMEM = {0xa2, 0xc7, 0xa4, 0xcb, 0x42, 0xed, 0xa2, 0x06, 0x88, 0x88, 0x8c, 0x68, 0xa2, 0x80, 0x15, 0x44, 0x47, 0xdf, 0x88, 0x44, 0x94, 0x98, 0x66, 0x40, 0x94, 0x91, 0x08, 0x08, 0x7e, 0x6a, 0xf8, 0x66, 0x9b, 0xb2, 0x65, 0xe9, 0xe3, 0xfb, 0xe1, 0xe2, 0x9e, 0x81, 0x8f, 0x1f, 0x42, 0xa4, 0xa5, 0x5b, 0x5a, 0x81, 0x31, 0xd6, 0x9a, 0x2a, 0x7a, 0x44, 0x96, 0x5b, 0x4e, 0x8a, 0xec, 0xc3, 0x44, 0x4e, 0x3d, 0x6d, 0x40, 0x0f, 0x1f, 0x39, 0xce, 0xae, 0x92, 0xdb, 0xc2, 0x12, 0x13, 0xc7, 0xde, 0x56, 0xb2, 0x47, 0x4c, 0x82, 0x6a, 0xdb, 0x09, 0x9f, 0x2c, 0x4b, 0xaa, 0x6e, 0x03, 0x73, 0xb3, 0x93, 0x07, 0xad, 0x53, 0xc9, 0x50, 0x4e, 0x11, 0x94, 0x76, 0x39, 0x53, 0x3d, 0x46, 0x50, 0x3a, 0x69, 0x44, 0x77, 0x79, 0x4e, 0xea, 0xa4, 0x22, 0xb3, 0x96, 0x18, 0xa1, 0x5b, 0x4a, 0xf4, 0x4a, 0xae, 0xb9, 0x5c, 0x19, 0xd2, 0x0b, 0xb9, 0x60, 0xb6, 0xa3, 0x48, 0x2d, 0xb0, 0x9e, 0xf1, 0xb5, 0x23, 0xb4, 0x54, 0x4a, 0x69, 0xdb, 0x86, 0x74, 0x4d, 0x0f, 0x4c, 0x54, 0x9b, 0xc8, 0x6d, 0x59, 0xd6, 0x16, 0xd5, 0x26, 0xdb, 0xe5, 0xbd, 0x28, 0x78, 0x9b, 0x65, 0x00, 0x80, 0xff};
const uint8_t twentynine[] PROGMEM = {0x00, 0x00, 0x00, 0x0a, 0xe8, 0xc2, 0x42, 0x01, 0x0d, 0xbb, 0xa7, 0x3c, 0x69, 0x77, 0x37, 0xb7, 0x9d, 0x22, 0xd9, 0xca, 0x50, 0x2d, 0xf6, 0x89, 0x4d, 0x2b, 0xc1, 0xf4, 0xd2, 0x27, 0x0a, 0xa1, 0x1c, 0x2b, 0x82, 0x9c, 0x30, 0xe8, 0x68, 0x4e, 0x0b, 0xdd, 0x62, 0x62, 0x62, 0x24, 0xdc, 0x72, 0x4b, 0x0d, 0xf7, 0x2c, 0x37, 0x39, 0x27, 0x0a, 0x8c, 0x7b, 0x42, 0xe9, 0x9e, 0x38, 0x32, 0xca, 0x2b, 0x25, 0x76, 0xf8, 0xca, 0xb0, 0x76, 0x9c, 0xc8, 0x49, 0x22, 0xa3, 0xbe, 0x56, 0x60, 0x23, 0x13, 0x42, 0x77, 0x8c, 0xe4, 0xb5, 0x14, 0xb8, 0x58, 0x36, 0x51, 0x7d, 0xb2, 0x48, 0xb5, 0x3c, 0x42, 0xf0, 0xc9, 0x12, 0xb5, 0x96, 0x70, 0x23, 0x27, 0x0f, 0xaa, 0x9c, 0x32, 0x8c, 0x9c, 0xdc, 0xeb, 0x52, 0xca, 0x14, 0x72, 0xf3, 0x5b, 0x1c, 0x35, 0xd8, 0x12, 0xaa, 0x14, 0x72, 0xcc, 0xa0, 0x4b, 0x29, 0xd3, 0xc8, 0xf1, 0xa2, 0x8c, 0xe0, 0x08, 0xa3, 0x27, 0x8a, 0x5c, 0x53, 0xd3, 0x8c, 0x9e, 0x24, 0x70, 0xa9, 0x48, 0x11, 0xbb, 0xd2, 0xc0, 0x24, 0xbb, 0x58, 0x5c, 0xcb, 0x2c, 0xd3, 0xee, 0x24, 0x6a, 0x25, 0xe7, 0xcc, 0x7a, 0x92, 0xa9, 0x9b, 0x1c, 0xb4, 0x49, 0x15, 0x89, 0x2d, 0x72, 0xf0, 0x2a, 0x49, 0x23, 0x8e, 0xc8, 0xc1, 0xac, 0x16, 0x36, 0xa5, 0xc2, 0x03, 0xb5, 0x5b, 0xd9, 0xed, 0xb0, 0x1c, 0xe4, 0xc9, 0x50, 0x95, 0x82, 0x0a, 0xd0, 0xaf, 0xd2, 0xdc, 0x32, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t thirty[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x0b, 0xd4, 0xdd, 0xc3, 0xed, 0x90, 0x52, 0x51, 0x0f, 0x0f, 0x8f, 0x83, 0x80, 0xaa, 0x3d, 0x09, 0xd0, 0xa4, 0xe5, 0x89, 0x9d, 0x9a, 0x0e, 0xe3, 0x90, 0x27, 0x55, 0xd1, 0xc3, 0xca, 0x2c, 0x9d, 0x54, 0x35, 0xae, 0x4e, 0xb2, 0x79, 0x52, 0x97, 0x25, 0xba, 0x29, 0xc2, 0xc9, 0x7c, 0xe0, 0xec, 0xc6, 0x12, 0x47, 0x09, 0x0e, 0xbb, 0x9a, 0x03, 0x0e, 0x47, 0x31, 0x73, 0x3f, 0x17, 0x73, 0x1c, 0xcf, 0xad, 0xa6, 0x8c, 0xc8, 0xa2, 0xb4, 0xb0, 0xde, 0x22, 0xa2, 0x2d, 0xd2, 0x4c, 0xe7, 0x0a, 0xc9, 0xa7, 0x54, 0x53, 0xe9, 0x6b, 0x24, 0x9e, 0xf2, 0x40, 0xa9, 0x6f, 0x09, 0x58, 0x28, 0x02, 0xe1, 0xbc, 0x43, 0x62, 0xa1, 0x74, 0x44, 0xfa, 0x1a, 0xc8, 0x89, 0x9a, 0x50, 0xdb, 0x0b, 0xb0, 0x06, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t thirtyone[] PROGMEM = {0x00, 0x00, 0x00, 0x80, 0xda, 0xc0, 0x4d, 0x3d, 0xd4, 0x0a, 0x02, 0x86, 0x36, 0x53, 0xd1, 0xd0, 0xaa, 0x6a, 0x26, 0x19, 0x10, 0xd0, 0x94, 0x47, 0x0b, 0x82, 0x8e, 0x2c, 0x75, 0x2b, 0x27, 0xd0, 0xa9, 0x22, 0xd5, 0x42, 0x1f, 0x4a, 0x17, 0xed, 0x28, 0x8d, 0x78, 0x28, 0x5b, 0x69, 0x22, 0x35, 0xc4, 0xa2, 0x5c, 0xa6, 0x89, 0xd0, 0x82, 0x8b, 0xb2, 0x91, 0x26, 0x4b, 0x0a, 0x96, 0x88, 0x3a, 0xee, 0x5c, 0x95, 0x75, 0xe8, 0x28, 0xb9, 0xba, 0x93, 0xf0, 0xa1, 0x9c, 0xb0, 0xfa, 0x32, 0x22, 0x87, 0x49, 0x82, 0xf2, 0x27, 0x09, 0x2c, 0xd6, 0x09, 0x9e, 0x6b, 0x15, 0x38, 0x38, 0x50, 0xbb, 0x92, 0x3d, 0x56, 0xca, 0xc0, 0x0e, 0x76, 0xeb, 0x48, 0x29, 0x03, 0xb3, 0x84, 0x2c, 0x63, 0x8f, 0xd4, 0xec, 0x22, 0xe8, 0x0c, 0xb5, 0x12, 0x37, 0x8b, 0x70, 0xd2, 0xf0, 0x4a, 0xfd, 0x08, 0xa2, 0x0d, 0xc3, 0x2b, 0xf5, 0x23, 0x48, 0xd6, 0x85, 0xac, 0xdc, 0x77, 0x27, 0x9e, 0x10, 0xbc, 0x34, 0x5f, 0x82, 0xa8, 0xd3, 0xc8, 0x72, 0x5d, 0x2c, 0xe6, 0x0e, 0x21, 0x23, 0x16, 0xae, 0x9c, 0x32, 0xc4, 0xa6, 0x14, 0xc4, 0x2e, 0x73, 0xb7, 0x6d, 0x32, 0xd0, 0xaa, 0xd5, 0x5c, 0x8e, 0xc9, 0x41, 0xa9, 0x65, 0x33, 0x25, 0x2a, 0x07, 0xbd, 0x86, 0xd5, 0xe4, 0x8a, 0x02, 0xac, 0x6a, 0x16, 0xb3, 0xcb, 0x4b, 0x52, 0x81, 0x54, 0x13, 0xea, 0x92, 0x91, 0x0b, 0x42, 0x57, 0xb9, 0x5b, 0x02, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t thirtytwo[] PROGMEM = {0x00, 0x00, 0x00, 0x90, 0xb8, 0x22, 0x3d, 0xd2, 0x55, 0xc9, 0x89, 0xad, 0xa9, 0x4c, 0xb3, 0x50, 0x27, 0x56, 0xc9, 0xd3, 0x4b, 0x63, 0x1e, 0x56, 0x35, 0xe9, 0x2a, 0xa9, 0x70, 0x99, 0xc3, 0x5a, 0x27, 0x95, 0x43, 0x25, 0x56, 0x6c, 0xa5, 0x44, 0x55, 0x8b, 0x3a, 0x4c, 0xe6, 0x14, 0x37, 0x61, 0x78, 0x31, 0x51, 0x50, 0xdf, 0x38, 0xe1, 0x11, 0x3b, 0xc6, 0x3b, 0x86, 0xc8, 0x5a, 0xca, 0xb8, 0x5e, 0x3b, 0x21, 0x35, 0x25, 0x50, 0x75, 0x95, 0x4c, 0xc7, 0xa5, 0x9d, 0xb2, 0x86, 0x99, 0x9c, 0x46, 0x0d, 0xa4, 0xe6, 0xae, 0x56, 0x05, 0x70, 0x94, 0x89, 0x00, 0x96, 0x73, 0x49, 0x56, 0x53, 0x2c, 0x1e, 0x1d, 0xf8, 0xe4, 0x91, 0x89, 0xcf, 0xb8, 0xa1, 0x23, 0x05, 0x2e, 0xb1, 0x1d, 0x06, 0x97, 0x6c, 0xa5, 0xf6, 0xa6, 0x09, 0x5e, 0xa4, 0x56, 0x3a, 0x9d, 0x26, 0x64, 0xd3, 0x83, 0xd5, 0xca, 0xaa, 0x4b, 0x0d, 0x37, 0x92, 0xdb, 0x98, 0x0a, 0x15, 0x52, 0xa3, 0x92, 0x31, 0xdb, 0x15, 0x2e, 0x81, 0x43, 0x8e, 0x63, 0x97, 0x99, 0x06, 0x36, 0x24, 0x98, 0x61, 0x52, 0x6e, 0x44, 0x90, 0xe0, 0x39, 0x5b, 0x9b, 0x10, 0x41, 0x81, 0x53, 0xcc, 0x65, 0xa6, 0x59, 0x0d, 0x46, 0xb0, 0x56, 0x58, 0x26, 0x35, 0x28, 0x25, 0x1c, 0x99, 0x04, 0x15, 0x20, 0xb7, 0x8a, 0x66, 0x52, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t thirtythree[] PROGMEM = {0x00, 0x80, 0x80, 0x1b, 0xdc, 0x08, 0x3f, 0x88, 0x98, 0x99, 0xda, 0x46, 0x40, 0x91, 0x51, 0x27, 0xf6, 0xa2, 0x33, 0x4d, 0x42, 0x9d, 0x4c, 0xbb, 0xc8, 0x48, 0xb5, 0x74, 0x32, 0x9d, 0x24, 0x73, 0x28, 0xc6, 0xcd, 0x4e, 0x2a, 0xa2, 0x56, 0x35, 0x85, 0x68, 0x19, 0xf0, 0xd2, 0xdd, 0x2c, 0xeb, 0xa4, 0x89, 0x72, 0x6c, 0x87, 0xe1, 0xc3, 0x47, 0x46, 0x75, 0x13, 0x42, 0x17, 0x17, 0x18, 0xed, 0x8d, 0x02, 0x1d, 0xa9, 0x67, 0x74, 0xd3, 0x0a, 0x36, 0xe5, 0xc0, 0xd5, 0xa6, 0xb2, 0x52, 0xd7, 0x61, 0x19, 0xe5, 0x6a, 0x76, 0x5c, 0xd9, 0xb8, 0xa5, 0x99, 0xc8, 0x69, 0x55, 0x15, 0x96, 0x6e, 0x2a, 0xbb, 0xc5, 0xc4, 0x96, 0x47, 0xa8, 0xe5, 0x96, 0xc2, 0x2c, 0x99, 0xa5, 0x96, 0x46, 0xc2, 0xb2, 0xb4, 0x35, 0x55, 0x3c, 0x9c, 0x0e, 0x3c, 0x31, 0x1c, 0xf2, 0x70, 0xce, 0xe8, 0xe4, 0xb0, 0xc8, 0x23, 0x04, 0xa9, 0xdd, 0x63, 0x82, 0x0e, 0x11, 0x99, 0xd4, 0xac, 0x09, 0x3e, 0x4c, 0x60, 0xd2, 0xbb, 0x42, 0x64, 0x84, 0x9a, 0xdb, 0x6c, 0x13, 0xb1, 0x92, 0x49, 0xee, 0xbb, 0x09, 0xe4, 0x72, 0x1e, 0x72, 0xc1, 0x7c, 0x37, 0x80, 0xba, 0x2b, 0x88, 0xac, 0x1d, 0x05, 0xfa, 0x8e, 0xa3, 0xa2, 0x76, 0x0d, 0xe8, 0x19, 0x9f, 0xd1, 0xd8, 0x35, 0x90, 0xab, 0x72, 0x86, 0x75, 0xae, 0x45, 0x32, 0x29, 0x08, 0xb1, 0xe9, 0x54, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t thirtyfour[] PROGMEM = {0x00, 0x80, 0x7a, 0xc2, 0xc2, 0x23, 0x22, 0xb6, 0x00, 0x92, 0xac, 0x3c, 0xb1, 0xd5, 0x95, 0x91, 0x12, 0xf1, 0xc4, 0x32, 0x5b, 0xc6, 0x88, 0xcd, 0xc3, 0xaa, 0x2a, 0x9d, 0x2d, 0x15, 0x0e, 0xa3, 0xb3, 0x54, 0xb4, 0x94, 0x18, 0x31, 0x0f, 0x32, 0x51, 0x5c, 0x72, 0xc4, 0x9e, 0x72, 0x6c, 0xa5, 0xa9, 0xc3, 0x24, 0xc6, 0x71, 0x53, 0x86, 0x0f, 0x1d, 0x98, 0xe4, 0x8f, 0x11, 0x59, 0xa1, 0x12, 0xb2, 0x93, 0x44, 0x65, 0xa4, 0x9c, 0x7b, 0x54, 0x65, 0xec, 0x92, 0x77, 0xed, 0x2c, 0xe6, 0xb6, 0x15, 0x30, 0xa2, 0x79, 0x88, 0xba, 0x75, 0x53, 0x73, 0x2b, 0x49, 0x68, 0x42, 0xc3, 0xcc, 0xa2, 0x94, 0x44, 0x96, 0x0e, 0xb0, 0x9c, 0xd9, 0x78, 0x51, 0xa7, 0xc0, 0xea, 0x42, 0xe1, 0x79, 0xd9, 0x06, 0xab, 0x09, 0x55, 0x4c, 0x84, 0x68, 0x93, 0xe0, 0x35, 0xa2, 0x50, 0x72, 0x4c, 0x42, 0xd6, 0x80, 0xe6, 0xe8, 0x55, 0x01, 0x55, 0x03, 0x9a, 0x6f, 0x76, 0x38, 0x54, 0x0e, 0x68, 0xb1, 0xbd, 0x12, 0xdc, 0x11, 0xb0, 0xa5, 0x76, 0x4b, 0x58, 0x69, 0xc0, 0x96, 0xdb, 0x25, 0x69, 0x29, 0x01, 0x4a, 0x61, 0x36, 0x97, 0x3a, 0x07, 0x0a, 0x95, 0x5e, 0xdc, 0xaa, 0x1c, 0x38, 0xe8, 0xa6, 0x4b, 0xa9, 0x63, 0x90, 0xe8, 0x3b, 0x5f, 0x75, 0x49, 0x11, 0x8e, 0xad, 0x4a, 0x18, 0xcc, 0x35, 0xd8, 0x0d, 0xea, 0x49, 0x08, 0x65, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t thirtyfive[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x4f, 0x2c, 0x42, 0x55, 0x42, 0xb7, 0x24, 0xaa, 0x0a, 0x33, 0x8f, 0x72, 0x62, 0x6d, 0x2b, 0x23, 0x35, 0xe2, 0x61, 0x65, 0xd5, 0xca, 0x66, 0x1b, 0x87, 0xd5, 0x55, 0x2a, 0x9b, 0x2b, 0x2c, 0x46, 0x45, 0xa9, 0x68, 0x29, 0x91, 0x62, 0x18, 0x65, 0x22, 0x29, 0xd2, 0x89, 0x33, 0x23, 0x9b, 0x2a, 0x43, 0x87, 0x89, 0x54, 0xe2, 0x27, 0x05, 0xaf, 0x20, 0x30, 0xee, 0x6b, 0x05, 0x33, 0x22, 0xa6, 0x6c, 0xdb, 0x45, 0x74, 0xcb, 0x1d, 0x55, 0x89, 0xcc, 0xb4, 0x02, 0x18, 0x21, 0x4c, 0x01, 0x3d, 0xb8, 0x33, 0x60, 0x6a, 0x8b, 0x91, 0xf8, 0x30, 0xce, 0x9e, 0xa5, 0x4e, 0x16, 0xe2, 0x28, 0x56, 0x04, 0x3a, 0x79, 0x28, 0x45, 0x34, 0x21, 0xe4, 0x14, 0x21, 0x17, 0x52, 0xa5, 0x90, 0xab, 0x1c, 0x35, 0xe4, 0x40, 0xee, 0x10, 0x73, 0xb4, 0x10, 0x8a, 0xb8, 0x42, 0xcc, 0x31, 0x43, 0x0a, 0xe2, 0x0e, 0x31, 0xc7, 0x0f, 0xa1, 0x98, 0x2a, 0xc5, 0x9c, 0x24, 0x9a, 0x52, 0xf2, 0x34, 0xb2, 0xb2, 0xa0, 0xca, 0xd8, 0x42, 0xe8, 0xca, 0x83, 0x0c, 0x57, 0x75, 0xa1, 0x2b, 0xf7, 0xb2, 0x42, 0x55, 0xc5, 0x8e, 0xcc, 0xe9, 0x48, 0x35, 0x15, 0x96, 0x32, 0xa6, 0x23, 0x4d, 0xd9, 0x9c, 0x2b, 0x29, 0x8b, 0xcc, 0x74, 0xdb, 0x04, 0xe8, 0x5a, 0x3d, 0xe5, 0x4d, 0xba, 0x79, 0x99, 0x65, 0x57, 0x4e, 0x65, 0x61, 0xea, 0x92, 0x01, 0x00, 0x00, 0xe0, 0xff};
const uint8_t thirtysix[] PROGMEM = {0x00, 0x00, 0x86, 0x6b, 0xda, 0x32, 0x5c, 0xad, 0xb6, 0x30, 0xc8, 0xca, 0x54, 0x8b, 0x7c, 0x12, 0x63, 0x2b, 0xc3, 0x2d, 0xd2, 0x61, 0x55, 0xd5, 0xca, 0x92, 0x98, 0x87, 0x55, 0x55, 0xba, 0x4a, 0x4a, 0x1c, 0x56, 0x27, 0xed, 0x6c, 0x2e, 0xb1, 0x58, 0x67, 0xb9, 0x6a, 0x39, 0xc6, 0x89, 0x13, 0xe7, 0x98, 0x4c, 0x53, 0x87, 0x49, 0x9c, 0xf2, 0x26, 0x8d, 0x2c, 0x26, 0x32, 0xaa, 0x1b, 0x27, 0x32, 0xf8, 0x40, 0xb9, 0x6f, 0x0c, 0x68, 0xc9, 0x38, 0xd7, 0xd9, 0x12, 0xaa, 0x29, 0x8b, 0x98, 0x25, 0x2a, 0x92, 0x96, 0x6c, 0x08, 0x11, 0x31, 0xb3, 0x2c, 0x80, 0x23, 0xdd, 0x18, 0xb0, 0x88, 0xd9, 0x09, 0x83, 0x88, 0x4e, 0x2b, 0xc1, 0x37, 0x3a, 0x49, 0xd0, 0xd5, 0xed, 0x21, 0xe4, 0x64, 0x51, 0x45, 0x96, 0x9b, 0x90, 0x63, 0x06, 0xed, 0x59, 0xae, 0x82, 0x47, 0xa8, 0x9c, 0x65, 0xb0, 0x90, 0x0b, 0x31, 0x32, 0x11, 0xad, 0x64, 0x8d, 0xf9, 0xc0, 0x7a, 0xb4, 0x89, 0x34, 0x24, 0x1a, 0xed, 0x16, 0xa1, 0xa2, 0x19, 0x50, 0xbd, 0x19, 0x03, 0x9a, 0x08, 0x21, 0xc0, 0x96, 0xe5, 0x04, 0x58, 0x3a, 0x8c, 0x00, 0x5b, 0xba, 0x13, 0x60, 0xc9, 0x30, 0x04, 0x5c, 0x69, 0x8e, 0x80, 0x2b, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t thirtyseven[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa1, 0xab, 0xa2, 0xd2, 0x4d, 0xc3, 0x8c, 0x38, 0xc8, 0x0a, 0x0f, 0x8d, 0x75, 0x62, 0xe5, 0x23, 0xa3, 0xd4, 0xd2, 0x61, 0x55, 0x95, 0xce, 0xe6, 0x18, 0x87, 0xd5, 0x45, 0x2a, 0x87, 0x4b, 0x2c, 0x56, 0x45, 0xe9, 0x28, 0x29, 0x91, 0x62, 0x10, 0x7d, 0xb2, 0x95, 0xf1, 0x61, 0x32, 0x63, 0xdb, 0x2e, 0x43, 0x87, 0x0e, 0x54, 0xf3, 0x27, 0x04, 0xaf, 0x20, 0x32, 0x8a, 0x1f, 0x17, 0x32, 0x22, 0xcf, 0xb8, 0xbe, 0x95, 0x58, 0xcb, 0x0c, 0x91, 0xec, 0xf6, 0x28, 0x0c, 0xd8, 0xc2, 0x85, 0x01, 0xdb, 0xb8, 0x32, 0xe0, 0x98, 0xb0, 0x22, 0x34, 0xea, 0x9e, 0x11, 0x96, 0x4f, 0x1a, 0x45, 0x75, 0x69, 0x1a, 0xbe, 0xd9, 0x91, 0x43, 0xe8, 0x76, 0x71, 0x21, 0x47, 0x89, 0xa6, 0xca, 0x45, 0x03, 0xb7, 0x5a, 0xa9, 0x0a, 0x31, 0x0d, 0xe5, 0xe4, 0x20, 0x2b, 0xd4, 0xd4, 0x54, 0x53, 0x83, 0xed, 0x50, 0xb7, 0x30, 0x2b, 0xf2, 0x36, 0x82, 0xcd, 0x8d, 0xae, 0x24, 0xa8, 0x0a, 0xb5, 0x34, 0x52, 0x32, 0xa6, 0x2a, 0xcc, 0x52, 0xa8, 0xcb, 0x81, 0xaf, 0x61, 0x75, 0xc5, 0xa6, 0x00, 0xa9, 0x46, 0x42, 0x14, 0xa9, 0x0a, 0xc4, 0x1a, 0x56, 0x53, 0x2c, 0x3c, 0xd0, 0xba, 0x84, 0x43, 0xae, 0xf0, 0x41, 0xae, 0x11, 0x53, 0x25, 0x34, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t thirtyeight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xc0, 0xfa, 0x40, 0xdc, 0x4d, 0x25, 0x72, 0x63, 0xa2, 0xaa, 0x34, 0xf3, 0xa8, 0x27, 0x36, 0xa6, 0x32, 0x52, 0x23, 0x1e, 0x56, 0x16, 0xad, 0x6c, 0xb6, 0x79, 0x58, 0x5d, 0xa5, 0xab, 0xb8, 0xe4, 0x49, 0x74, 0x96, 0xee, 0xa6, 0x92, 0x87, 0xb7, 0x9e, 0xbb, 0x86, 0x0a, 0x9e, 0xcc, 0x0b, 0xf1, 0xa8, 0x8c, 0x74, 0xc4, 0xc4, 0x24, 0x76, 0xdc, 0xd0, 0x91, 0x12, 0xa3, 0xdc, 0x75, 0x21, 0x47, 0x8e, 0x8c, 0xea, 0x56, 0x89, 0x2e, 0x25, 0x32, 0xea, 0x5d, 0x13, 0x72, 0xa4, 0xc4, 0xa9, 0xb7, 0x8d, 0xf0, 0xc9, 0xb2, 0xa0, 0x9a, 0x72, 0x32, 0x27, 0x4b, 0x92, 0xba, 0x4a, 0xc1, 0x9c, 0x2c, 0x2a, 0x99, 0x4a, 0x86, 0x72, 0xf2, 0xa0, 0x75, 0xca, 0x99, 0xea, 0xd5, 0x96, 0xeb, 0x94, 0x4d, 0x2a, 0xd1, 0x6b, 0xb1, 0x94, 0xbe, 0xc9, 0x48, 0xaf, 0x64, 0x46, 0xc8, 0x95, 0x21, 0xbd, 0x94, 0x0b, 0xee, 0x3b, 0x8a, 0xf4, 0x12, 0xeb, 0x19, 0x5f, 0x07, 0x52, 0x4b, 0x84, 0x94, 0xbe, 0xed, 0x40, 0xcf, 0xb5, 0xc0, 0xd4, 0x94, 0xa2, 0xb2, 0x96, 0x65, 0x6d, 0x51, 0x6d, 0xb2, 0x43, 0xde, 0x32, 0x63, 0x74, 0x88, 0x41, 0xbd, 0x97, 0xc4, 0x5d, 0x6e, 0x07, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t thirtynine[] PROGMEM = {0x00, 0x00, 0x00, 0x40, 0x7a, 0x4d, 0xdc, 0xcd, 0x34, 0x8a, 0x00, 0x92, 0xaa, 0x3c, 0xb1, 0x31, 0x95, 0x91, 0x12, 0xf1, 0xc4, 0xb2, 0x58, 0x45, 0x8b, 0xcd, 0xc3, 0x9a, 0xca, 0x53, 0xcd, 0x11, 0x0e, 0xeb, 0x13, 0x75, 0x35, 0x97, 0x18, 0x89, 0xf7, 0xd0, 0x35, 0x5c, 0xf1, 0x24, 0x95, 0x93, 0x75, 0x95, 0xe1, 0xc3, 0x65, 0x8e, 0x7e, 0x9d, 0x42, 0x4f, 0x92, 0x19, 0xd5, 0xb6, 0x03, 0x3d, 0x69, 0x64, 0xd4, 0xdb, 0x0a, 0xae, 0x65, 0x48, 0xc7, 0x86, 0x88, 0xd2, 0x92, 0x02, 0x5f, 0x2b, 0xa6, 0x8a, 0x4f, 0x96, 0xa8, 0x96, 0x47, 0x08, 0x3e, 0x59, 0x62, 0x56, 0xe2, 0x61, 0xe4, 0xe4, 0x41, 0x97, 0x51, 0xa6, 0xd0, 0x93, 0x7b, 0xdd, 0x42, 0x99, 0x46, 0x4e, 0xee, 0x6d, 0x09, 0x65, 0x8a, 0xb9, 0xca, 0xd5, 0x8e, 0x15, 0x54, 0x39, 0x45, 0x18, 0x39, 0x7e, 0x14, 0x9e, 0x1c, 0x6e, 0xe4, 0x44, 0x91, 0x6b, 0x6a, 0x9a, 0xd1, 0x95, 0x04, 0xa6, 0x15, 0x29, 0xe2, 0x46, 0x1a, 0x18, 0x57, 0x17, 0x8b, 0x2b, 0x99, 0xa1, 0xda, 0x9d, 0x4c, 0x3d, 0xe4, 0x48, 0xc4, 0x8c, 0x93, 0x74, 0x95, 0x83, 0xd5, 0x29, 0x6c, 0xb1, 0x45, 0x0e, 0x5e, 0x25, 0x73, 0xd8, 0x11, 0x39, 0x98, 0xd5, 0xc2, 0xe6, 0x94, 0x65, 0x60, 0x74, 0x2b, 0xbb, 0x6d, 0x92, 0x83, 0xbc, 0x95, 0xee, 0x62, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t forty[] PROGMEM = {0x00, 0x00, 0x00, 0xa8, 0xae, 0x5c, 0xdd, 0xd4, 0x2c, 0xab, 0xac, 0x49, 0xb5, 0x30, 0xb1, 0x6c, 0xf2, 0x21, 0xcd, 0x2c, 0xd4, 0x32, 0x20, 0xa0, 0xe8, 0xc8, 0x42, 0x24, 0x5d, 0x65, 0x66, 0x71, 0x47, 0x2c, 0xdb, 0x24, 0x68, 0xcc, 0x68, 0x1c, 0x1f, 0x5b, 0x20, 0x31, 0xb3, 0x71, 0xec, 0x74, 0x80, 0xc6, 0x82, 0xc1, 0xf3, 0xeb, 0x46, 0x11, 0x13, 0x46, 0xaa, 0x16, 0xbb, 0x86, 0x4d, 0x58, 0x99, 0x6e, 0x92, 0x1e, 0x52, 0x72, 0x15, 0xd6, 0x53, 0x47, 0x72, 0xe8, 0x62, 0x72, 0x4f, 0xe3, 0x81, 0xb6, 0x97, 0x17, 0xb9, 0x55, 0xa7, 0x11, 0x19, 0x91, 0x15, 0xde, 0xe3, 0x44, 0xb6, 0xa4, 0x4a, 0xc4, 0x8c, 0x03, 0xb5, 0x98, 0x05, 0xc6, 0x30, 0xef, 0x4b, 0xa0, 0x1e, 0x59, 0x43, 0x4a, 0x51, 0x3b, 0x0a, 0xf2, 0x54, 0xa9, 0xb0, 0xf4, 0xa6, 0x48, 0x15, 0xa5, 0xc1, 0x5c, 0x5d, 0xa2, 0x04, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t fortyone[] PROGMEM = {0x00, 0x00, 0x80, 0x80, 0xa6, 0xd4, 0x54, 0xde, 0x95, 0x98, 0xb9, 0x4a, 0x41, 0xc0, 0x30, 0x1e, 0x89, 0xca, 0xa2, 0x32, 0xcc, 0xe2, 0x96, 0x44, 0x8c, 0x4e, 0x90, 0x98, 0xd1, 0x38, 0x3e, 0xbb, 0x40, 0xec, 0xc6, 0xe0, 0xc4, 0x0b, 0xa3, 0x8a, 0x09, 0x2b, 0x56, 0x9b, 0xcd, 0xdb, 0x46, 0x9e, 0x58, 0x35, 0xc9, 0x28, 0x1d, 0xb9, 0x62, 0xed, 0xa5, 0xbb, 0x84, 0xe1, 0x49, 0x2a, 0x23, 0xef, 0x4e, 0xc3, 0x87, 0xcb, 0x1c, 0x63, 0x37, 0x8d, 0x2c, 0xde, 0x48, 0x99, 0xa9, 0x30, 0x3c, 0x04, 0x50, 0x6a, 0x5c, 0x23, 0x74, 0x92, 0xc0, 0x75, 0xd5, 0x0c, 0x33, 0x41, 0x02, 0x97, 0xcc, 0xcb, 0x9d, 0x04, 0x09, 0x5c, 0x57, 0xac, 0x74, 0x14, 0x0a, 0xb0, 0x42, 0xc1, 0x2a, 0x76, 0xcb, 0xf9, 0x2c, 0x06, 0xaf, 0xc8, 0x23, 0xb3, 0xb3, 0x08, 0xaa, 0x4d, 0xaf, 0xdc, 0xd7, 0x66, 0xa8, 0x36, 0xbc, 0xf3, 0xa5, 0xfa, 0x5c, 0x0c, 0x5d, 0x46, 0x97, 0xe1, 0x52, 0x30, 0x76, 0x0a, 0x59, 0xbe, 0x8e, 0xc5, 0xdc, 0x21, 0x76, 0xc4, 0xc2, 0x56, 0x50, 0x84, 0xd8, 0x90, 0x83, 0x58, 0xa5, 0xee, 0x8a, 0x4c, 0x0e, 0x6a, 0x0d, 0x25, 0x39, 0x36, 0x39, 0xe8, 0xd5, 0x18, 0xe4, 0x5a, 0xe5, 0x60, 0x54, 0x53, 0x88, 0x1a, 0x55, 0x80, 0x50, 0x47, 0x4e, 0xae, 0x45, 0x09, 0x62, 0x1d, 0xa9, 0xaa, 0x16, 0x25, 0x28, 0x35, 0x62, 0xa6, 0x84, 0x65, 0x20, 0xd6, 0xaa, 0x99, 0x5c, 0xd4, 0x82, 0x50, 0xeb, 0xea, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t fortytwo[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x8a, 0xa0, 0x3b, 0xdc, 0x44, 0x8a, 0x2a, 0x0b, 0x53, 0x33, 0x53, 0x2b, 0x2e, 0xef, 0x4a, 0xdd, 0x5c, 0x6d, 0xa5, 0x62, 0x68, 0x33, 0x73, 0xb5, 0x2c, 0x80, 0xe5, 0xcc, 0x09, 0xd0, 0xa5, 0x85, 0x09, 0x5c, 0x9c, 0x32, 0x53, 0xc7, 0x85, 0x16, 0xb3, 0x03, 0xa2, 0x46, 0x14, 0x5a, 0x9e, 0x0a, 0xc8, 0x1e, 0xd1, 0x68, 0xf1, 0xca, 0xc1, 0x63, 0xe4, 0xa2, 0xe4, 0x53, 0xf7, 0xb6, 0x02, 0x87, 0x32, 0x43, 0x2a, 0xca, 0x4b, 0x2c, 0xda, 0x05, 0xea, 0x48, 0x29, 0x71, 0xc2, 0xc2, 0xd9, 0xbb, 0xd2, 0xf4, 0xa1, 0x33, 0xe3, 0xb8, 0x31, 0xa1, 0x9b, 0x1d, 0x71, 0x60, 0xbc, 0x63, 0x04, 0xaf, 0xa5, 0x82, 0xc9, 0x4e, 0x10, 0x5c, 0x53, 0x01, 0x53, 0xdb, 0x46, 0xcc, 0x44, 0x9c, 0x91, 0x78, 0xa5, 0xcb, 0x69, 0xfd, 0x20, 0xea, 0x6e, 0x22, 0xa5, 0xf4, 0x87, 0x09, 0xb3, 0x59, 0x29, 0x06, 0x6c, 0xe7, 0x92, 0xe8, 0xa6, 0x58, 0x22, 0xaa, 0xf0, 0xca, 0x23, 0x63, 0xdf, 0xf6, 0x80, 0x4b, 0x0a, 0x5c, 0x72, 0x3b, 0x0c, 0x0e, 0xd9, 0x4b, 0xe9, 0x2d, 0x37, 0x3c, 0x48, 0xa3, 0x75, 0xa6, 0x5c, 0xe8, 0xa0, 0xb4, 0xb2, 0xee, 0x32, 0x23, 0x83, 0x55, 0xda, 0xab, 0x53, 0x8d, 0x16, 0x92, 0x5b, 0xef, 0x4a, 0x15, 0x5a, 0x22, 0x6e, 0xa3, 0x33, 0xd4, 0x48, 0x4a, 0x99, 0xad, 0x0a, 0x97, 0xc0, 0x21, 0x27, 0xb1, 0xcb, 0x4c, 0x8b, 0x18, 0x12, 0x8e, 0x32, 0xc9, 0x30, 0x2c, 0x48, 0xf0, 0x8c, 0xbd, 0x95, 0x08, 0xa3, 0xc0, 0x2d, 0xa6, 0x32, 0xd3, 0xa4, 0x06, 0xb3, 0x44, 0x22, 0x2c, 0xa3, 0x1a, 0xd4, 0x12, 0xce, 0x8c, 0x8d, 0x32, 0x50, 0x5a, 0x55, 0x33, 0x31, 0x00, 0x3c, 0xff};
const uint8_t fortythree[] PROGMEM = {0x00, 0x80, 0x2a, 0x2f, 0xdc, 0xcd, 0xd4, 0x8e, 0xca, 0x0b, 0x15, 0x0d, 0x15, 0x2b, 0xae, 0x1a, 0xda, 0x3c, 0x54, 0xac, 0xb8, 0x7c, 0x2a, 0x35, 0x37, 0xb1, 0x4c, 0x80, 0xa6, 0x22, 0x43, 0x14, 0x74, 0x95, 0xab, 0xda, 0x69, 0x09, 0xef, 0x5d, 0x60, 0x39, 0x63, 0x70, 0x7c, 0x56, 0x82, 0xe7, 0x8c, 0xc5, 0x89, 0x63, 0x26, 0x1d, 0x15, 0x4e, 0xa2, 0x07, 0xbb, 0x97, 0x57, 0x5c, 0x89, 0x8a, 0xda, 0x9e, 0x5c, 0xf3, 0x24, 0x89, 0xb1, 0x75, 0x87, 0xa9, 0xc3, 0x27, 0xca, 0xbe, 0x1b, 0x46, 0x96, 0x10, 0x88, 0xc4, 0x9d, 0x11, 0x6d, 0x99, 0xa7, 0x9c, 0x3f, 0x42, 0xac, 0xe4, 0x5c, 0xe8, 0x9c, 0x13, 0xb9, 0x50, 0x43, 0x16, 0xd5, 0x65, 0x76, 0x42, 0x5d, 0xb8, 0xa5, 0xab, 0xc8, 0x2e, 0x45, 0x12, 0x9e, 0x6e, 0x2a, 0xa5, 0xc4, 0xc8, 0x57, 0x44, 0xa8, 0x95, 0x96, 0xc2, 0x24, 0x19, 0x65, 0x96, 0x46, 0xc2, 0x13, 0xb7, 0x37, 0x57, 0x5c, 0x9c, 0xf5, 0x34, 0x31, 0x5c, 0xf0, 0x70, 0x5e, 0x4b, 0xe7, 0x8a, 0xc8, 0x23, 0x04, 0xa9, 0x3d, 0x63, 0x82, 0x0e, 0x11, 0x19, 0xd7, 0xac, 0x09, 0x5a, 0x6c, 0xa0, 0xd2, 0xbb, 0x22, 0xa4, 0x85, 0x8a, 0xfb, 0x6c, 0x21, 0xb1, 0x92, 0x09, 0xee, 0xbb, 0x09, 0xe4, 0x72, 0x1e, 0x73, 0x57, 0x60, 0x55, 0x3b, 0x0a, 0xf4, 0x1d, 0xc7, 0x78, 0xcd, 0x3a, 0x50, 0x33, 0x3e, 0x63, 0xb1, 0x63, 0x20, 0x57, 0xe5, 0x8c, 0xc8, 0x5c, 0xab, 0x14, 0x52, 0x60, 0xa2, 0xd3, 0xa5, 0x8e, 0x01, 0x00, 0x00, 0xe0, 0xff};
const uint8_t fortyfour[] PROGMEM = {0xa8, 0x0c, 0xcc, 0xdc, 0x4c, 0xed, 0xa8, 0xbc, 0x0b, 0xb5, 0x50, 0xb1, 0xe2, 0xca, 0xa1, 0xcc, 0x4c, 0xc5, 0x8a, 0xcb, 0x87, 0x56, 0x0f, 0x65, 0xcb, 0x04, 0x28, 0x2a, 0x32, 0x44, 0xb2, 0x75, 0x82, 0x7a, 0xed, 0xc6, 0xf1, 0xd1, 0x05, 0x96, 0x33, 0x06, 0x27, 0x76, 0x05, 0x44, 0xce, 0x58, 0x9c, 0xdc, 0x6a, 0xd6, 0x5e, 0xe1, 0x24, 0xba, 0x49, 0x58, 0x79, 0xc5, 0x91, 0xc8, 0x20, 0x1d, 0x45, 0x11, 0x4f, 0x52, 0x19, 0xdb, 0x4c, 0x06, 0x3a, 0x7c, 0x22, 0x1c, 0xbb, 0x21, 0x74, 0x08, 0x81, 0x72, 0x5f, 0x1b, 0xd1, 0x96, 0x72, 0xae, 0x7b, 0xc6, 0xd0, 0x5a, 0xce, 0x99, 0xe4, 0x74, 0xc5, 0x6e, 0x49, 0x0f, 0x26, 0xcc, 0x62, 0x27, 0xc5, 0x53, 0x99, 0x9a, 0xbb, 0x6d, 0x04, 0x34, 0x6d, 0x9e, 0xd2, 0xa4, 0x22, 0xdd, 0xdd, 0x76, 0x89, 0x45, 0x9f, 0x00, 0xcb, 0x99, 0x8d, 0xe3, 0x6d, 0x0a, 0x24, 0x26, 0x74, 0xbe, 0x08, 0xbc, 0x4d, 0x81, 0xe5, 0xc9, 0x42, 0xc8, 0xd9, 0x01, 0x51, 0x03, 0x05, 0xa0, 0x76, 0x45, 0xf3, 0xcd, 0x09, 0x87, 0xaa, 0x82, 0x23, 0x32, 0x4f, 0x9d, 0x3a, 0x02, 0xb6, 0xd4, 0x3c, 0x2a, 0x0b, 0x11, 0x52, 0x32, 0xbd, 0xa9, 0x4c, 0xc5, 0x48, 0xc9, 0xd5, 0xa6, 0x30, 0xc3, 0x30, 0x29, 0x17, 0x53, 0x42, 0x0c, 0xe3, 0xa6, 0x42, 0x36, 0x0d, 0x71, 0x88, 0x9a, 0x0a, 0x55, 0x34, 0xd4, 0x31, 0x8a, 0xcb, 0x74, 0x96, 0x50, 0x85, 0x68, 0x22, 0x07, 0x49, 0xc2, 0xc4, 0xd2, 0xa2, 0x02, 0x84, 0x52, 0x35, 0x4f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t fortyfive[] PROGMEM = {0x00, 0x00, 0xc0, 0x8a, 0x44, 0x45, 0xc3, 0xc4, 0x8e, 0x2b, 0x86, 0x36, 0x0f, 0x15, 0x2b, 0x2e, 0x9f, 0x4a, 0xcc, 0x4c, 0xa4, 0x20, 0xa0, 0x2b, 0x4f, 0x04, 0x54, 0x15, 0x99, 0x62, 0xd1, 0x3b, 0xc1, 0x72, 0x62, 0xe3, 0xf8, 0xec, 0x02, 0x8b, 0x19, 0x83, 0x13, 0xc7, 0x8d, 0x2a, 0x26, 0xac, 0x44, 0x4d, 0x71, 0x6f, 0xaf, 0x78, 0x12, 0x95, 0xb4, 0x2c, 0xa5, 0xe6, 0x4a, 0x0c, 0xd7, 0xe8, 0x8c, 0xd0, 0x87, 0xcf, 0x8c, 0x7d, 0x27, 0x0c, 0x2f, 0x21, 0x12, 0x89, 0x5b, 0x17, 0xda, 0x52, 0xc7, 0x78, 0x2f, 0x04, 0x6c, 0xcb, 0x88, 0xb0, 0xb9, 0x30, 0x52, 0xa3, 0x48, 0x82, 0x58, 0x23, 0x9a, 0x96, 0x64, 0x58, 0x13, 0x16, 0x8d, 0x43, 0x80, 0xa9, 0x4d, 0x19, 0x30, 0x95, 0xc6, 0x48, 0x42, 0x18, 0xa7, 0xf0, 0x40, 0x27, 0x0b, 0xa9, 0x05, 0x3b, 0x0c, 0x9d, 0x3c, 0xd4, 0x22, 0xea, 0x10, 0x7c, 0x8b, 0xa3, 0x84, 0x14, 0xc8, 0x9d, 0x42, 0xae, 0x7a, 0x34, 0x1f, 0x8b, 0xb8, 0x42, 0xcc, 0xb5, 0x8e, 0x1f, 0x42, 0x10, 0x65, 0x88, 0x3d, 0x49, 0x34, 0xa5, 0xe4, 0x69, 0x64, 0x65, 0x41, 0x95, 0xb1, 0x87, 0xd0, 0x95, 0x07, 0x19, 0xae, 0x66, 0x42, 0x57, 0x1e, 0x54, 0x85, 0x9a, 0x8a, 0x1d, 0x99, 0xd5, 0x91, 0x6a, 0x2a, 0x2c, 0x65, 0xcc, 0x44, 0x9a, 0x8a, 0x79, 0x57, 0x51, 0x1a, 0x55, 0x61, 0xb6, 0x09, 0x30, 0x94, 0x79, 0x2a, 0xbb, 0x0c, 0xf7, 0x34, 0xcb, 0x08, 0x98, 0xca, 0x12, 0x00, 0x00, 0x1e, 0xff};
const uint8_t fortysix[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xf2, 0xae, 0xc5, 0xcc, 0x55, 0x0a, 0x02, 0x86, 0xf1, 0x48, 0x54, 0x16, 0x95, 0xae, 0x16, 0xa7, 0x24, 0x62, 0x74, 0x82, 0xc4, 0x8c, 0xc6, 0xf1, 0xd5, 0x05, 0x62, 0x37, 0x06, 0x27, 0x5e, 0x18, 0x55, 0x4c, 0x18, 0xb1, 0xda, 0xec, 0xde, 0x56, 0x72, 0xc5, 0xaa, 0x69, 0x46, 0xe9, 0xc8, 0x11, 0x6b, 0x2f, 0xd5, 0xa5, 0x8c, 0x0e, 0x5b, 0x18, 0x79, 0x4f, 0x1a, 0x3e, 0x5c, 0xe5, 0x14, 0xbb, 0x69, 0x64, 0xf0, 0x81, 0x72, 0x5f, 0x3b, 0xd1, 0x96, 0x4a, 0xa6, 0x3b, 0xc5, 0x50, 0x53, 0x6e, 0x09, 0x7b, 0x4d, 0xda, 0x49, 0xcd, 0x10, 0x22, 0x62, 0x6e, 0x5b, 0x00, 0x47, 0x85, 0x32, 0x60, 0x53, 0xf3, 0x13, 0x44, 0x1e, 0x5d, 0x5a, 0x82, 0x4f, 0x14, 0x65, 0x74, 0x7a, 0x09, 0x3e, 0x71, 0x54, 0xd5, 0xed, 0x29, 0xf8, 0x64, 0x51, 0x45, 0x95, 0xbb, 0x90, 0xab, 0x2f, 0x3f, 0x18, 0xcb, 0x34, 0x25, 0x9a, 0x62, 0x6a, 0x23, 0x4b, 0xc8, 0x9a, 0x48, 0x81, 0x8d, 0x6a, 0x17, 0xab, 0x80, 0x80, 0x12, 0xc5, 0x19, 0x50, 0x94, 0x2b, 0x03, 0x96, 0x2c, 0x23, 0xc0, 0x32, 0x6e, 0x04, 0x38, 0xd2, 0x8d, 0x00, 0x5b, 0xb9, 0x22, 0xe0, 0x4a, 0x0b, 0x0c, 0x98, 0x7e, 0x61, 0x37, 0x0b, 0xb7, 0x84, 0x84, 0x06, 0x2b, 0x2c, 0xc3, 0x34, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t fortyseven[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xc0, 0xdd, 0xcd, 0xd4, 0x2e, 0xcb, 0x0b, 0x13, 0x0d, 0x15, 0x2b, 0xa6, 0x1a, 0xda, 0xdc, 0x55, 0xac, 0x98, 0x7c, 0x2a, 0x35, 0x37, 0xb1, 0x8c, 0x80, 0xa6, 0x22, 0x4d, 0xe4, 0x6c, 0xb5, 0x8a, 0xda, 0x49, 0x09, 0x1f, 0x5d, 0x60, 0x39, 0xa3, 0x71, 0x7c, 0x55, 0x82, 0xe7, 0x8c, 0xc1, 0x89, 0x63, 0x26, 0x1d, 0x15, 0x56, 0xa2, 0x87, 0xb8, 0x97, 0x57, 0x1c, 0x89, 0x0a, 0xd2, 0x91, 0x5c, 0x73, 0x25, 0x99, 0xb1, 0x76, 0x87, 0xa1, 0xc3, 0x27, 0xca, 0xbe, 0x1b, 0x42, 0x96, 0x90, 0x19, 0xfa, 0x6d, 0x10, 0xb9, 0xd2, 0xc8, 0x1d, 0xa3, 0xbe, 0x52, 0xa2, 0xa5, 0xa2, 0xc4, 0x73, 0xdb, 0xcd, 0x94, 0x66, 0x70, 0x65, 0x0e, 0xb7, 0xc4, 0x80, 0xad, 0x42, 0x09, 0xb0, 0x45, 0x18, 0x01, 0x26, 0x33, 0x3b, 0x69, 0x90, 0xd5, 0xe5, 0x49, 0xfa, 0xe4, 0x41, 0x57, 0xa7, 0x39, 0x91, 0x02, 0x04, 0xdf, 0x7d, 0x94, 0x10, 0xaa, 0xcc, 0xdc, 0xf0, 0xa8, 0x54, 0xae, 0x60, 0x37, 0xc3, 0xce, 0x26, 0xc1, 0x8d, 0x23, 0xcc, 0xba, 0xce, 0x32, 0x8d, 0x30, 0x33, 0x3d, 0x02, 0x1b, 0x2b, 0xc4, 0xcd, 0xc8, 0x8c, 0x5b, 0x66, 0x74, 0xbb, 0x9a, 0x19, 0x71, 0x05, 0xc8, 0xe5, 0x6e, 0x2e, 0x56, 0x15, 0x60, 0x44, 0x8a, 0x9a, 0x1c, 0x55, 0x80, 0x56, 0xcd, 0x6e, 0x72, 0x44, 0x09, 0x6a, 0x8d, 0x88, 0xaa, 0x61, 0x3e, 0x48, 0xb5, 0xa2, 0xe2, 0x84, 0x84, 0xa0, 0x75, 0xb1, 0xba, 0x12, 0x14, 0x81, 0x5a, 0xe5, 0x62, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t fortyeight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x4c, 0x54, 0xcd, 0x4d, 0xe2, 0xb8, 0x62, 0x68, 0xf3, 0x50, 0xb1, 0xe2, 0xf2, 0xa9, 0xc4, 0xcc, 0x44, 0x4a, 0xc8, 0xbb, 0xf6, 0x48, 0x13, 0xcb, 0x04, 0x28, 0x2a, 0x32, 0xc5, 0xa2, 0x77, 0x82, 0xe5, 0xc4, 0xc1, 0xf1, 0xd9, 0x05, 0x16, 0x33, 0x06, 0x27, 0x4e, 0x18, 0x55, 0x4e, 0x58, 0x89, 0x5a, 0xe2, 0xde, 0x5e, 0xe2, 0x70, 0x2a, 0x6b, 0x59, 0x6a, 0xcd, 0x95, 0x08, 0x65, 0x51, 0x19, 0xa6, 0x0f, 0x5f, 0x19, 0xfb, 0x4c, 0x18, 0x3e, 0x42, 0x20, 0x92, 0xbb, 0x21, 0xf4, 0x88, 0x59, 0x60, 0x6d, 0x1b, 0xe1, 0x93, 0x25, 0x41, 0x3d, 0xed, 0x64, 0x4e, 0x96, 0x24, 0x55, 0x97, 0x91, 0x39, 0x59, 0x54, 0xd2, 0x1d, 0x0c, 0xf5, 0xe4, 0x41, 0xdb, 0x94, 0x33, 0xd5, 0xab, 0x1e, 0xc7, 0x2b, 0xdb, 0x54, 0xa4, 0x37, 0x22, 0x25, 0x6d, 0x43, 0x89, 0x5e, 0xc9, 0x8c, 0x90, 0x2b, 0x45, 0x7a, 0x29, 0x57, 0x4c, 0x77, 0x94, 0xa8, 0x25, 0xd6, 0x32, 0xde, 0x71, 0x84, 0x96, 0x08, 0x25, 0x74, 0xdb, 0x80, 0x5e, 0x30, 0xa8, 0xb4, 0x69, 0x67, 0xba, 0x02, 0xa8, 0x5a, 0x23, 0xe5, 0xcd, 0xb3, 0xf4, 0x84, 0x68, 0x91, 0x15, 0x23, 0x18, 0x65, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t fortynine[] PROGMEM = {0x00, 0x80, 0xca, 0xc0, 0xcd, 0xcd, 0xd4, 0xae, 0xca, 0x1b, 0x17, 0x0b, 0x15, 0x2b, 0xae, 0x1c, 0xda, 0xcc, 0x55, 0xac, 0xf8, 0x9c, 0x01, 0x4d, 0x45, 0x86, 0x48, 0x95, 0x2e, 0x14, 0x8b, 0xd3, 0x38, 0x3e, 0xba, 0xc0, 0x72, 0xc6, 0xe0, 0xf8, 0xaa, 0x80, 0xc8, 0x19, 0x8b, 0x93, 0x5b, 0x4d, 0xdb, 0x2b, 0x9c, 0x44, 0x77, 0x09, 0x2f, 0xaf, 0xb8, 0x12, 0x19, 0xa4, 0xa3, 0x38, 0xe2, 0x49, 0x2a, 0x63, 0x9b, 0x89, 0x40, 0x87, 0x4f, 0x94, 0x7d, 0x37, 0x84, 0x1e, 0x21, 0x51, 0xaa, 0x6d, 0x27, 0x72, 0xd2, 0xcc, 0xb0, 0xb6, 0x15, 0xe8, 0x4a, 0x23, 0xa3, 0xd9, 0x12, 0x70, 0x2d, 0x43, 0x26, 0x56, 0x55, 0x5d, 0xaf, 0x8c, 0xb3, 0xe8, 0x74, 0x97, 0x7c, 0xb2, 0x44, 0xad, 0x2d, 0x5c, 0xc8, 0xc9, 0x23, 0x8f, 0xa4, 0x08, 0x23, 0x27, 0xf7, 0xa6, 0x94, 0x32, 0xcd, 0x9c, 0xdc, 0xdb, 0x12, 0xaa, 0x10, 0x73, 0x72, 0x6f, 0x5a, 0x28, 0xd3, 0xcc, 0x55, 0x8e, 0xee, 0x6d, 0x09, 0x67, 0x08, 0x39, 0x4e, 0x50, 0xe1, 0x14, 0x61, 0xe4, 0x04, 0x91, 0x5b, 0x4a, 0x98, 0x91, 0x13, 0x47, 0xae, 0x69, 0xa9, 0x42, 0x57, 0x1a, 0x98, 0x54, 0x15, 0x8b, 0x9b, 0x59, 0xc9, 0x34, 0xd3, 0xee, 0x64, 0x6a, 0x2e, 0x07, 0xae, 0xa6, 0x98, 0x9d, 0x89, 0x1c, 0xdc, 0x4a, 0x92, 0x88, 0x2b, 0x72, 0x70, 0xaa, 0x98, 0xc2, 0x29, 0x2b, 0xc0, 0xe8, 0x16, 0x32, 0xa7, 0xcc, 0x07, 0xb9, 0xcb, 0xc9, 0xad, 0xa0, 0x1c, 0x94, 0xab, 0x72, 0x37, 0x0d, 0x00, 0xff};
const uint8_t fifty[] PROGMEM = {0x00, 0xa2, 0xac, 0x5c, 0x44, 0x2c, 0x2c, 0x93, 0x3c, 0x11, 0x31, 0x33, 0xb7, 0x62, 0xaa, 0x86, 0x59, 0xdc, 0xd5, 0x4a, 0xca, 0x97, 0x36, 0x56, 0xb7, 0x50, 0x02, 0xd8, 0x2e, 0xcc, 0x00, 0x33, 0x76, 0x0c, 0xb2, 0x4b, 0xf5, 0x0c, 0x0f, 0x7d, 0xe8, 0xc8, 0x35, 0xa7, 0xcd, 0xf0, 0x61, 0x82, 0xf0, 0x9a, 0x32, 0x43, 0x27, 0x0e, 0xd2, 0x6b, 0x52, 0x0c, 0x8f, 0xdc, 0x92, 0x88, 0x2c, 0x15, 0xdd, 0xb2, 0xc1, 0xc4, 0xdc, 0xdd, 0x72, 0xe9, 0xa7, 0x14, 0x55, 0x0b, 0x4b, 0xa2, 0x8c, 0x90, 0xcd, 0xd3, 0x13, 0x41, 0x4b, 0x3b, 0xd6, 0x70, 0x35, 0xa7, 0x2b, 0x0f, 0x54, 0x7b, 0xcb, 0xc1, 0x2e, 0xda, 0x51, 0xeb, 0x2b, 0x01, 0xd7, 0x7c, 0x43, 0x6d, 0x2e, 0x09, 0x5c, 0x8a, 0x38, 0x8b, 0xbd, 0x00, 0xf8, 0x2e, 0x61, 0x2c, 0xae, 0x05, 0x98, 0xbb, 0x4c, 0x52, 0xbf, 0x51, 0x40, 0xe6, 0x18, 0x43, 0x6c, 0xcf, 0x80, 0x9e, 0x21, 0x03, 0x91, 0x3d, 0x07, 0x7a, 0x8a, 0x0a, 0x44, 0x76, 0x13, 0x90, 0xb1, 0x1c, 0xb1, 0xd8, 0x75, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t fiftyone[] PROGMEM = {0x00, 0x00, 0xa4, 0xae, 0x54, 0xcd, 0xdc, 0xa4, 0x9a, 0x7c, 0x08, 0x57, 0x0d, 0x17, 0x43, 0x80, 0xe9, 0x5c, 0x05, 0x30, 0x7d, 0x98, 0x06, 0x0e, 0x95, 0x98, 0xc6, 0x94, 0x19, 0x3e, 0x54, 0x66, 0xe6, 0x5b, 0x1e, 0xf8, 0x84, 0x81, 0x47, 0x4e, 0x99, 0x91, 0x91, 0x79, 0xe2, 0x5e, 0xe9, 0xa2, 0x5b, 0xd6, 0xb9, 0x78, 0x54, 0x46, 0x16, 0xc0, 0x32, 0xaa, 0x26, 0xeb, 0x94, 0x25, 0xca, 0x2d, 0x13, 0x60, 0x31, 0x8e, 0x11, 0x34, 0x68, 0xd1, 0xa5, 0x64, 0x16, 0x13, 0xa8, 0xf4, 0xad, 0x03, 0x5d, 0x6c, 0xa4, 0x3c, 0x37, 0x06, 0xf8, 0x70, 0x91, 0x53, 0xdf, 0x84, 0x90, 0xc5, 0x09, 0xad, 0xb3, 0xe9, 0x86, 0x1b, 0x0f, 0x66, 0xa5, 0x6b, 0x44, 0x0a, 0x02, 0x78, 0x46, 0x99, 0x19, 0xba, 0x64, 0x70, 0x94, 0x90, 0x55, 0xec, 0x91, 0x9a, 0xd9, 0x0c, 0x95, 0xa1, 0x56, 0xea, 0x47, 0x13, 0x6c, 0x18, 0x3e, 0x69, 0x98, 0x81, 0xbc, 0x61, 0x78, 0xa5, 0xbe, 0x07, 0xf1, 0x86, 0x90, 0x9d, 0x2f, 0xcd, 0x57, 0x67, 0x9a, 0x10, 0xba, 0x5c, 0x17, 0x43, 0x68, 0x5c, 0xe8, 0x88, 0x45, 0x28, 0xe3, 0x72, 0xb1, 0x21, 0x03, 0xb1, 0xdb, 0x4c, 0x6d, 0x9b, 0x0c, 0xb4, 0x6a, 0x76, 0x53, 0x6c, 0x72, 0x50, 0x6b, 0x44, 0x4d, 0x89, 0xca, 0xc1, 0xa8, 0x21, 0x35, 0xa5, 0xb2, 0x60, 0x25, 0x18, 0x35, 0x42, 0x66, 0x97, 0x54, 0x20, 0xd7, 0x84, 0xb8, 0x64, 0xe4, 0x82, 0x38, 0x9d, 0x6e, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t fiftytwo[] PROGMEM = {0x00, 0xa8, 0x2e, 0xd4, 0x2c, 0x54, 0x65, 0x9b, 0xbc, 0x4b, 0x53, 0x8d, 0x10, 0x83, 0x80, 0xa9, 0x5d, 0x19, 0xb0, 0x42, 0xa8, 0x02, 0xa6, 0x73, 0x1b, 0x44, 0xe1, 0x62, 0x5d, 0x1e, 0xf8, 0x50, 0x89, 0x99, 0x4f, 0xbb, 0xe1, 0x4b, 0x9f, 0xd8, 0xca, 0xc8, 0x09, 0x15, 0xda, 0xf2, 0x42, 0xd4, 0x33, 0xc3, 0x94, 0x00, 0x96, 0x56, 0x0b, 0xf9, 0x54, 0xcc, 0x9e, 0x19, 0x49, 0x14, 0x0d, 0xb2, 0x79, 0xba, 0x6d, 0x05, 0x74, 0xa4, 0x39, 0x82, 0x48, 0xb8, 0x6e, 0x82, 0xc8, 0x60, 0x02, 0x95, 0xb9, 0x15, 0xa0, 0x23, 0x0e, 0x8c, 0x77, 0x9d, 0x90, 0x8d, 0x44, 0x31, 0xd9, 0x49, 0x82, 0xeb, 0x72, 0xa0, 0xfc, 0xda, 0x98, 0x1e, 0x4b, 0x18, 0x8b, 0x1a, 0x53, 0xd9, 0x8d, 0x1a, 0x4c, 0x3d, 0x4c, 0xe5, 0x94, 0xfe, 0x30, 0x61, 0x36, 0x2b, 0x25, 0x80, 0x6d, 0x43, 0x0b, 0xdd, 0x04, 0xb3, 0x47, 0x16, 0x5a, 0x59, 0x64, 0xe2, 0xd3, 0x6e, 0xe8, 0x48, 0x81, 0x4b, 0x6e, 0x7b, 0xc0, 0x25, 0x7b, 0x21, 0xb5, 0xe5, 0x86, 0x17, 0x69, 0xb4, 0xf6, 0x94, 0x0b, 0xd9, 0xd4, 0x60, 0x95, 0xb2, 0xea, 0x52, 0x23, 0x8d, 0x10, 0xc6, 0xa7, 0x42, 0x85, 0x96, 0x90, 0xb9, 0xe8, 0x74, 0x35, 0x5a, 0x52, 0x66, 0xab, 0xd3, 0x25, 0x70, 0xc8, 0x70, 0xe8, 0x72, 0xd3, 0x22, 0x86, 0x84, 0xa3, 0x82, 0xcd, 0x83, 0x28, 0x12, 0x5c, 0x67, 0x1b, 0x15, 0x22, 0x28, 0x70, 0x8b, 0xa9, 0xcc, 0x34, 0xab, 0xc1, 0x2c, 0x91, 0x0c, 0xcb, 0xa4, 0x06, 0xad, 0x44, 0x32, 0x13, 0xa3, 0x0c, 0x94, 0x52, 0xb1, 0x4c, 0x0c, 0x00, 0x00, 0xff};
const uint8_t fiftythree[] PROGMEM = {0x80, 0x9a, 0x44, 0xcd, 0xdc, 0x54, 0x8a, 0xc9, 0x87, 0x34, 0xd5, 0x08, 0x31, 0x04, 0x98, 0xc6, 0x55, 0x00, 0x2b, 0x84, 0x29, 0x60, 0x79, 0xb7, 0x45, 0x26, 0xae, 0x31, 0xe5, 0x81, 0x0f, 0x95, 0x99, 0xf9, 0xb4, 0x07, 0x3e, 0x41, 0xe4, 0x9e, 0x5b, 0x66, 0x78, 0x25, 0x46, 0x44, 0x74, 0xa8, 0x98, 0x96, 0x37, 0xaa, 0x9e, 0x15, 0xa6, 0x04, 0xb0, 0x8c, 0xaa, 0xcb, 0x06, 0x67, 0x89, 0xcc, 0x48, 0x08, 0x58, 0x8c, 0x7c, 0x84, 0x0d, 0x59, 0x76, 0x19, 0x95, 0x11, 0x46, 0xc2, 0x75, 0xe3, 0x44, 0x07, 0x1b, 0xa8, 0xcc, 0x8d, 0x02, 0x6d, 0x29, 0x51, 0xb1, 0x6b, 0x0c, 0xd6, 0xe5, 0x20, 0xcf, 0x14, 0x91, 0x5c, 0x96, 0x81, 0x34, 0xd3, 0x2e, 0x92, 0x51, 0x22, 0x99, 0x67, 0xa5, 0x47, 0x29, 0x59, 0x11, 0x51, 0x61, 0x6a, 0x27, 0x35, 0x91, 0x47, 0x66, 0x98, 0xe4, 0x92, 0x82, 0x64, 0x15, 0xae, 0xb6, 0x5a, 0x4a, 0xb2, 0x54, 0xb4, 0xd8, 0x1e, 0x89, 0x8c, 0x3c, 0xd1, 0x5c, 0xe2, 0x70, 0xce, 0x72, 0xc7, 0x88, 0xc5, 0x93, 0x04, 0xa9, 0x95, 0x6b, 0x22, 0x4f, 0x16, 0xb8, 0xf6, 0x8c, 0x0a, 0x3a, 0x54, 0xa4, 0x52, 0x73, 0x2a, 0x78, 0x08, 0x8e, 0xc9, 0xec, 0x30, 0xd1, 0x96, 0x08, 0x1e, 0xbb, 0x89, 0xe4, 0x52, 0x2e, 0x99, 0xef, 0x16, 0x90, 0x8f, 0x85, 0xcb, 0x39, 0xf7, 0x1d, 0x07, 0xea, 0xae, 0xc0, 0xaa, 0xb6, 0x15, 0xe8, 0x99, 0x92, 0xf0, 0x9a, 0x35, 0xa0, 0xa6, 0x52, 0x46, 0x63, 0xc6, 0x49, 0x8a, 0x28, 0x39, 0x92, 0xde, 0x31, 0xbb, 0xa8, 0xc7, 0x54, 0x7a, 0xd2, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t fiftyfour[] PROGMEM = {0x00, 0x00, 0xa8, 0xaa, 0xdc, 0xcc, 0x4d, 0x25, 0xb3, 0x3c, 0x72, 0x51, 0x4f, 0xb3, 0xa2, 0x8a, 0xc2, 0x95, 0xd5, 0xcd, 0x72, 0x28, 0xa6, 0x76, 0xe5, 0xb4, 0x90, 0x0a, 0x98, 0xce, 0xd5, 0x00, 0x33, 0x84, 0x0e, 0xbe, 0x09, 0x91, 0xec, 0x28, 0x75, 0xa8, 0x24, 0xd4, 0xa7, 0x23, 0xf0, 0xa1, 0x92, 0xd0, 0x98, 0x72, 0x23, 0x27, 0x08, 0x52, 0x73, 0xd2, 0x8d, 0xae, 0xac, 0x22, 0x15, 0x2b, 0x8b, 0x6a, 0x80, 0x69, 0x5c, 0x18, 0xb0, 0x9d, 0x8a, 0xca, 0x0b, 0x61, 0x8e, 0xb0, 0xc8, 0x0c, 0x58, 0xda, 0x75, 0x79, 0x09, 0x8b, 0x5f, 0x87, 0x98, 0x45, 0x45, 0x26, 0xf5, 0x6b, 0x40, 0x17, 0x15, 0x18, 0xf7, 0xad, 0x00, 0x5d, 0x21, 0x57, 0xb6, 0x13, 0x2c, 0x7a, 0x64, 0x9a, 0xa9, 0x65, 0x55, 0x12, 0x01, 0x74, 0x1b, 0xaa, 0x80, 0x1e, 0xcd, 0x83, 0x3c, 0x94, 0x99, 0xa9, 0x46, 0x2e, 0x79, 0xe3, 0x1a, 0x66, 0x56, 0x65, 0x24, 0xb2, 0x74, 0x82, 0xd7, 0x84, 0xc1, 0xcb, 0x3c, 0x0d, 0x9a, 0x17, 0x9a, 0xc0, 0xf3, 0x0e, 0x48, 0x5e, 0xa8, 0x52, 0x21, 0x44, 0x9b, 0x84, 0xa8, 0x81, 0xcd, 0x90, 0x63, 0x12, 0xb2, 0x06, 0x28, 0xc0, 0xac, 0xf2, 0x11, 0x9a, 0xed, 0x8e, 0x1d, 0x05, 0x46, 0x6c, 0xaf, 0x84, 0xb4, 0x05, 0x1c, 0x99, 0x5d, 0x12, 0x9a, 0x52, 0xb0, 0xe5, 0x76, 0x49, 0x69, 0x68, 0xa0, 0x52, 0x9a, 0x25, 0x2d, 0x26, 0x81, 0x92, 0xaa, 0x27, 0x97, 0x19, 0x06, 0x4e, 0xba, 0x6d, 0x92, 0xe6, 0x18, 0x34, 0x95, 0xba, 0x69, 0xaa, 0x61, 0x64, 0xe7, 0x8b, 0x22, 0x29, 0x42, 0xb1, 0x55, 0x05, 0x83, 0xba, 0x84, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t fiftyfive[] PROGMEM = {0xa8, 0x0c, 0x5c, 0xcd, 0xc2, 0xe4, 0x88, 0xa2, 0x08, 0x15, 0x75, 0x8b, 0xe2, 0x8a, 0xa1, 0x5c, 0xb8, 0xcc, 0x22, 0x02, 0xa6, 0x75, 0x55, 0xc0, 0x0a, 0xa1, 0x0a, 0x98, 0xce, 0xe5, 0x50, 0x49, 0xa8, 0x4f, 0x7b, 0xe0, 0x4b, 0x1d, 0x2a, 0x4a, 0x8d, 0xa9, 0x30, 0xba, 0x22, 0xcf, 0x2d, 0x3a, 0xd5, 0xf0, 0xca, 0x07, 0x37, 0x91, 0x34, 0xd3, 0x0a, 0xd8, 0x2e, 0xd4, 0xa4, 0x43, 0x32, 0xa9, 0x6b, 0x6c, 0x52, 0x44, 0xac, 0x9a, 0xe1, 0x96, 0x87, 0x3b, 0xb9, 0x72, 0x84, 0x49, 0x5d, 0x54, 0xa4, 0x5c, 0x37, 0x41, 0x64, 0x50, 0x91, 0x4a, 0xfd, 0x0a, 0xb0, 0x15, 0x78, 0xce, 0xb3, 0xc3, 0x44, 0x47, 0x4c, 0x54, 0xd4, 0xa4, 0x99, 0x6a, 0x79, 0x66, 0xc2, 0xea, 0x91, 0x58, 0x00, 0x23, 0xb8, 0x09, 0x60, 0x38, 0x37, 0x06, 0x74, 0x69, 0x79, 0x52, 0xef, 0xc7, 0x31, 0x3c, 0xd0, 0xc9, 0x43, 0x6a, 0xa1, 0x4a, 0xc3, 0x27, 0x8f, 0xb5, 0x88, 0x3b, 0x84, 0xdc, 0xe2, 0x28, 0xb1, 0x06, 0x4a, 0x87, 0xd8, 0xa3, 0x86, 0x58, 0x28, 0xed, 0x62, 0x8e, 0xee, 0x7d, 0x11, 0x55, 0x8a, 0x39, 0x76, 0x48, 0x41, 0xdc, 0x41, 0xf6, 0x04, 0xc1, 0x07, 0x73, 0x86, 0xd0, 0x93, 0x46, 0x5d, 0xca, 0x91, 0x46, 0x56, 0x16, 0x54, 0xb9, 0x98, 0x0b, 0x5b, 0x79, 0x90, 0x15, 0xaa, 0x26, 0x74, 0xe5, 0x5e, 0x46, 0xa8, 0xa9, 0xd8, 0x91, 0x19, 0x1d, 0x69, 0x2a, 0xc2, 0x5c, 0x06, 0x42, 0xa5, 0x88, 0x45, 0x0b, 0x5e, 0x22, 0x62, 0xe6, 0x6e, 0x85, 0x00, 0x5d, 0x59, 0xa4, 0x72, 0xc8, 0x30, 0x0b, 0xb7, 0x04, 0x00, 0x00, 0x00, 0xff};

const uint8_t selectedplayer[] PROGMEM = {0x00, 0x80, 0x80, 0xab, 0xc2, 0x09, 0xb0, 0xa5, 0x45, 0x4b, 0x3a, 0xf1, 0x08, 0xd7, 0xd8, 0x27, 0x36, 0x61, 0x5d, 0xb5, 0x0c, 0x9f, 0xc4, 0xe4, 0x35, 0xb6, 0x0e, 0x3c, 0x12, 0x9e, 0x16, 0xb9, 0xdb, 0x50, 0xe3, 0x59, 0x7a, 0xa6, 0x2a, 0x93, 0x8b, 0x97, 0xb5, 0x59, 0xbd, 0x44, 0x9f, 0xd8, 0x97, 0x4e, 0xb5, 0x12, 0x7d, 0xa2, 0x10, 0xa2, 0xcc, 0x5d, 0xcc, 0x09, 0xbd, 0xd5, 0x4a, 0x55, 0xa9, 0x21, 0x55, 0xda, 0xbd, 0x54, 0xad, 0x8a, 0xd2, 0x87, 0x28, 0x77, 0xb7, 0xa3, 0xf2, 0x42, 0xc2, 0x32, 0x24, 0xf2, 0xa0, 0x0a, 0x13, 0x9f, 0xf0, 0x30, 0x27, 0x08, 0xac, 0x72, 0x42, 0x0d, 0x1f, 0x36, 0x92, 0xca, 0x2e, 0x0b, 0x78, 0x92, 0x40, 0xbc, 0x3a, 0x35, 0x62, 0x48, 0x81, 0x9d, 0x2e, 0x51, 0xd3, 0x22, 0x07, 0xbb, 0xcb, 0x55, 0x64, 0x93, 0x94, 0xeb, 0xa8, 0x34, 0x91, 0x8a, 0x32, 0xc7, 0xd4, 0x23, 0xdd, 0x56, 0x69, 0x0b, 0x95, 0x0c, 0x97, 0x90, 0xa1, 0xaf, 0x38, 0xc2, 0x55, 0xcc, 0x8c, 0xd2, 0xda, 0x71, 0x96, 0x2a, 0x78, 0x4c, 0xe7, 0xd7, 0xd9, 0x32, 0xd0, 0x71, 0xbd, 0xdb, 0x52, 0x31, 0xc3, 0xc7, 0xf7, 0xba, 0x3a, 0x44, 0x04, 0x8f, 0xc8, 0xb8, 0xea, 0x74, 0x26, 0xda, 0x12, 0x15, 0xa2, 0x43, 0x98, 0x5c, 0x4b, 0x6d, 0xf4, 0x8e, 0x40, 0xd1, 0x25, 0x33, 0xc5, 0x46, 0x0d, 0x82, 0xa4, 0x5c, 0x4f, 0x6d, 0x33, 0x08, 0x9d, 0x0a, 0x5b, 0x75, 0xdc, 0x21, 0x70, 0x50, 0x55, 0xd1, 0x36, 0x85, 0x28, 0xa1, 0x0c, 0x5e, 0x3a, 0x02, 0xc2, 0x1a, 0x5f, 0x45, 0x2b, 0x31, 0xa8, 0x82, 0x2a, 0xa7, 0xc5, 0x35, 0x5c, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t currentplayer[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x04, 0x88, 0x49, 0xbd, 0x38, 0xd1, 0xb8, 0x78, 0x98, 0xe9, 0x96, 0x86, 0x14, 0x22, 0x2e, 0x91, 0x4e, 0x14, 0x0e, 0x9b, 0x95, 0x1a, 0x5e, 0x41, 0x38, 0xec, 0xde, 0x1a, 0x68, 0x50, 0x7e, 0x53, 0x44, 0x73, 0xc5, 0x11, 0xf8, 0x89, 0x19, 0x2d, 0x31, 0x46, 0xe0, 0x33, 0x97, 0x35, 0x57, 0x3c, 0x41, 0xb0, 0x96, 0x56, 0x6e, 0xea, 0x04, 0x41, 0x44, 0x95, 0x85, 0xd1, 0x11, 0x69, 0x51, 0x95, 0x6a, 0x46, 0x4c, 0x0c, 0x7a, 0xa7, 0xb1, 0xcb, 0x63, 0x19, 0x08, 0xdf, 0x6a, 0x62, 0x15, 0x65, 0x44, 0x96, 0xa7, 0xb9, 0x69, 0x54, 0x08, 0x6a, 0xe1, 0x11, 0xb1, 0x53, 0x5b, 0xa8, 0x64, 0xba, 0x84, 0x0a, 0x7d, 0xc5, 0x91, 0xa1, 0x6a, 0xa6, 0x55, 0xd6, 0xae, 0xb3, 0x64, 0xa1, 0x65, 0x3a, 0xbf, 0xce, 0x9e, 0x81, 0x96, 0xeb, 0xdd, 0x96, 0x89, 0x19, 0x5a, 0xbe, 0xd7, 0xd5, 0xa1, 0x22, 0xb8, 0x45, 0xc6, 0x57, 0xa7, 0x33, 0xb1, 0x92, 0xa8, 0x14, 0xad, 0x42, 0xe4, 0x4a, 0x6a, 0x62, 0xb4, 0x07, 0x18, 0x49, 0x99, 0xc9, 0xba, 0x6a, 0x18, 0x24, 0xe4, 0x7a, 0xe8, 0xa8, 0x41, 0x98, 0x90, 0xdb, 0x22, 0xe3, 0x86, 0x81, 0x9d, 0xaf, 0x8a, 0xb6, 0x2a, 0x84, 0x0e, 0xbe, 0x77, 0xdc, 0x11, 0x10, 0x5a, 0x95, 0x32, 0x58, 0x89, 0x43, 0x14, 0xd4, 0x1b, 0x25, 0x16, 0x66, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t pokeycounter[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa2, 0xa9, 0x5c, 0xd2, 0xd2, 0x4c, 0x86, 0xde, 0x98, 0x0a, 0x15, 0x95, 0xb3, 0x12, 0x5f, 0xca, 0x48, 0xab, 0xf0, 0x8d, 0x56, 0xa8, 0x5b, 0x29, 0x47, 0x0f, 0x2c, 0x31, 0x2d, 0x23, 0x92, 0x15, 0x48, 0x65, 0x60, 0x17, 0xa9, 0x87, 0x99, 0x56, 0x0c, 0x2e, 0x91, 0xe9, 0xb6, 0x13, 0xd6, 0x29, 0x65, 0x85, 0xc8, 0x41, 0xc0, 0xa0, 0xe8, 0x25, 0xa9, 0x98, 0x63, 0x46, 0xc8, 0xad, 0x34, 0x11, 0xce, 0x1d, 0x25, 0x37, 0x84, 0x48, 0x38, 0x7f, 0x14, 0x68, 0x28, 0x2c, 0xa5, 0xfe, 0x52, 0xa8, 0xa4, 0x01, 0x22, 0xe6, 0x43, 0xa4, 0xa8, 0xac, 0x08, 0xd2, 0x70, 0xb3, 0x2b, 0x80, 0x22, 0xb4, 0x92, 0x91, 0x45, 0xb8, 0x85, 0x59, 0x19, 0x95, 0x29, 0x22, 0xee, 0x1c, 0xf9, 0x28, 0x3e, 0x07, 0x6b, 0xab, 0xa9, 0xa3, 0xf8, 0x54, 0xc2, 0xed, 0xa6, 0x96, 0xac, 0x43, 0x3b, 0xa5, 0x19, 0x6e, 0x25, 0x35, 0xd1, 0xac, 0x6e, 0xd9, 0xd4, 0xa0, 0x4d, 0xba, 0x3a, 0xdd, 0xd4, 0x37, 0x4a, 0xae, 0xa1, 0x92, 0x15, 0xb0, 0xa2, 0x48, 0x6b, 0x8c, 0xf5, 0xb2, 0x24, 0xcb, 0xc3, 0xd3, 0x49, 0x3a, 0x02, 0x03, 0x8f, 0xc8, 0x16, 0xad, 0x2c, 0x08, 0xd1, 0xe3, 0x92, 0xa9, 0xa1, 0xed, 0x0e, 0x81, 0x43, 0x2e, 0xa7, 0x96, 0x19, 0x84, 0x76, 0x3a, 0x6f, 0x5a, 0x6a, 0x10, 0xc9, 0x84, 0x22, 0x69, 0x99, 0x41, 0x64, 0x91, 0xa1, 0x20, 0x1d, 0x4e, 0x89, 0x01, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t newnumber[] PROGMEM = {0x00, 0x00, 0x00, 0x2c, 0x02, 0xa3, 0x1a, 0x34, 0x9d, 0x36, 0x05, 0xea, 0xe8, 0x0d, 0x25, 0x77, 0xc4, 0xc0, 0xb9, 0xb6, 0x43, 0xd0, 0xe1, 0xb5, 0xf0, 0xba, 0x0c, 0x93, 0x23, 0x05, 0xa1, 0x3a, 0xd9, 0xe4, 0x96, 0x0c, 0xa4, 0x1a, 0x16, 0x53, 0x5d, 0x64, 0x50, 0x7a, 0xd8, 0xc5, 0x49, 0xd3, 0x80, 0x9f, 0x0e, 0x51, 0xbb, 0x47, 0xf5, 0x6c, 0x4c, 0x33, 0x8c, 0x1c, 0xcd, 0xeb, 0x32, 0xc9, 0x14, 0x72, 0x54, 0xe7, 0x4b, 0xb9, 0x42, 0xc8, 0x51, 0x75, 0x2c, 0xc5, 0x76, 0xd1, 0x45, 0x07, 0xa9, 0x52, 0x3d, 0x12, 0x26, 0x1d, 0xb4, 0x2a, 0x17, 0x71, 0x68, 0x1c, 0xf0, 0x22, 0xcc, 0x24, 0x41, 0xeb, 0x9d, 0x8e, 0x54, 0x53, 0x5b, 0x2d, 0x50, 0x8b, 0xc6, 0x84, 0x43, 0x94, 0x58, 0x4f, 0x5a, 0x51, 0x0e, 0x54, 0x32, 0x3b, 0x68, 0xc5, 0xc4, 0x60, 0xc9, 0x5d, 0xe3, 0x33, 0x93, 0x40, 0x0c, 0x70, 0x8d, 0x97, 0x01, 0x66, 0xc8, 0x84, 0x40, 0x37, 0x1e, 0x16, 0x0a, 0x6d, 0x02, 0x9e, 0xb9, 0x59, 0x39, 0x8e, 0x2a, 0xac, 0xa3, 0x61, 0x56, 0xc9, 0x00, 0x00, 0xf0, 0xff};
const uint8_t player1won[] PROGMEM = {0x00, 0x00, 0x10, 0xaa, 0x22, 0xa4, 0x82, 0x24, 0x76, 0xca, 0x23, 0x8e, 0x32, 0x26, 0x2b, 0xc1, 0x49, 0x3c, 0xda, 0xcd, 0xa4, 0xb4, 0xd0, 0xfb, 0x31, 0xd5, 0x34, 0x75, 0x42, 0x6f, 0x27, 0x8d, 0xcb, 0xf0, 0x89, 0x82, 0xaa, 0x4e, 0x0d, 0x32, 0x27, 0x4a, 0xc2, 0x26, 0xd3, 0xc9, 0x9c, 0x28, 0x09, 0xed, 0x69, 0x27, 0x72, 0xa3, 0x13, 0x45, 0xcd, 0x35, 0xcd, 0x46, 0x4f, 0x18, 0x3c, 0x4f, 0x86, 0x04, 0x59, 0x91, 0x4b, 0xd2, 0x61, 0x1a, 0x74, 0x84, 0x72, 0x49, 0xa9, 0x58, 0xb9, 0xc4, 0xf2, 0x47, 0xc1, 0x91, 0x0d, 0x03, 0x4f, 0x9e, 0x29, 0x54, 0x25, 0x4e, 0x02, 0x3d, 0x61, 0x48, 0x99, 0xa4, 0xa5, 0xea, 0x39, 0x63, 0x45, 0xc4, 0x95, 0xd9, 0x19, 0x4c, 0xed, 0xa6, 0x4e, 0xe6, 0x53, 0x29, 0x75, 0x1a, 0x3a, 0xaa, 0x73, 0xe5, 0x9c, 0x69, 0xb0, 0x68, 0x20, 0x54, 0x49, 0xa6, 0xa5, 0xa4, 0x83, 0x52, 0x8d, 0xe9, 0x8e, 0x92, 0x0e, 0x7a, 0x38, 0x55, 0x38, 0x4c, 0x3a, 0x28, 0x95, 0x68, 0xe9, 0x3a, 0x69, 0xb8, 0x76, 0x00, 0x57, 0xa2, 0xa6, 0xf1, 0xd9, 0x0a, 0x5a, 0xb1, 0x97, 0x6a, 0xdb, 0x28, 0x64, 0x87, 0x3c, 0x4a, 0xc8, 0xad, 0x90, 0x1d, 0xf0, 0x28, 0xde, 0xb7, 0x61, 0x95, 0xa1, 0x65, 0x70, 0xb7, 0x2e, 0x92, 0x86, 0x8b, 0x0e, 0x42, 0x0f, 0x9a, 0x27, 0x4a, 0x06, 0x48, 0x33, 0xe0, 0xee, 0xa8, 0x99, 0xd8, 0x9e, 0xab, 0x86, 0xd1, 0x63, 0x39, 0xd6, 0xe9, 0x1a, 0x46, 0x8e, 0xe3, 0xb9, 0x57, 0xb9, 0x0b, 0x39, 0xae, 0xe7, 0x51, 0x1b, 0x2c, 0xb8, 0xf8, 0x54, 0x44, 0xad, 0x83, 0x54, 0xe5, 0x83, 0x3d, 0xc1, 0x24, 0x49, 0x52, 0x94, 0x30, 0xf9, 0x1a, 0x27, 0x1b, 0x79, 0xa1, 0x9c, 0x1b, 0x2a, 0xf6, 0x90, 0x81, 0x59, 0x4e, 0x33, 0x91, 0xa3, 0x06, 0xe9, 0xb5, 0xcd, 0x44, 0x8e, 0x1a, 0x94, 0xf7, 0xa6, 0x10, 0x39, 0x5a, 0x14, 0x5a, 0x5b, 0x42, 0xf4, 0x5a, 0xc7, 0x49, 0x94, 0x62, 0xd2, 0xc8, 0x6d, 0x7f, 0xc4, 0x81, 0x51, 0x4f, 0x08, 0xfd, 0x94, 0x31, 0x69, 0x53, 0x46, 0xf2, 0x5c, 0x09, 0x72, 0x95, 0xaa, 0xc6, 0x55, 0x25, 0x98, 0xd5, 0xcc, 0x66, 0x59, 0x94, 0x60, 0xd4, 0x30, 0x79, 0x14, 0x5e, 0x92, 0x00, 0x8c, 0x6a, 0x15, 0x37, 0x43, 0x22, 0x10, 0x62, 0x4d, 0x53, 0x12, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t player2won[] PROGMEM = {0x00, 0x04, 0x28, 0x52, 0x3a, 0x55, 0x95, 0x47, 0x99, 0xaa, 0x6d, 0x02, 0x14, 0x1e, 0xad, 0x00, 0xbf, 0x42, 0x4f, 0x60, 0x4b, 0x1b, 0x7b, 0x1b, 0x39, 0xb1, 0x77, 0xd3, 0xae, 0x61, 0xe4, 0x24, 0xde, 0x55, 0x57, 0x3a, 0x91, 0x93, 0x46, 0xad, 0xd5, 0x65, 0x82, 0x4f, 0x16, 0x0d, 0x55, 0xb5, 0x1a, 0x3a, 0x59, 0x74, 0x58, 0xd9, 0x12, 0xe8, 0xe4, 0x21, 0xd0, 0x64, 0x68, 0xa0, 0x95, 0xf9, 0x40, 0x5d, 0xc9, 0x01, 0x5b, 0x29, 0x2c, 0x55, 0x2d, 0xdb, 0x00, 0x23, 0x2d, 0x4e, 0xa6, 0xe1, 0xb1, 0x15, 0x70, 0x15, 0x89, 0x00, 0xae, 0x37, 0x2e, 0x74, 0x97, 0xc2, 0x96, 0x59, 0xe8, 0x70, 0x81, 0xab, 0xcf, 0x79, 0x84, 0xc5, 0x73, 0x55, 0x55, 0xc3, 0x15, 0x9b, 0x00, 0xcb, 0x84, 0xa4, 0xcd, 0x28, 0x12, 0x98, 0x25, 0xea, 0x1d, 0x31, 0x28, 0xe0, 0x18, 0x7a, 0xb5, 0x15, 0xa3, 0x82, 0xc7, 0xe2, 0xed, 0x4a, 0x9c, 0x06, 0x4e, 0x38, 0x44, 0x26, 0x4a, 0x2a, 0x3e, 0xc1, 0xe8, 0x11, 0xab, 0x69, 0x72, 0x05, 0xc1, 0x84, 0xa5, 0xa1, 0xd9, 0x56, 0x04, 0x93, 0xa6, 0x97, 0xe6, 0x73, 0x31, 0x74, 0x1a, 0x39, 0x9a, 0xb7, 0xe5, 0x98, 0x69, 0x74, 0xe9, 0x5a, 0x95, 0x4b, 0xa6, 0xd0, 0xa4, 0x01, 0x57, 0x6b, 0xe1, 0xb4, 0x93, 0x0e, 0x7c, 0x2d, 0x99, 0x38, 0x29, 0x26, 0xb4, 0x3d, 0x4a, 0x1e, 0xe7, 0x58, 0x81, 0x6d, 0xaa, 0x5a, 0xa0, 0xe3, 0x04, 0x56, 0xd5, 0x81, 0xa6, 0x93, 0x47, 0x64, 0xd5, 0x1a, 0x58, 0x55, 0x3e, 0x98, 0x9b, 0x02, 0xd2, 0x34, 0x44, 0x0e, 0x73, 0x9d, 0x71, 0xd2, 0x91, 0x37, 0xc6, 0xb1, 0x21, 0x56, 0x0f, 0x15, 0x98, 0xe5, 0xb4, 0x10, 0x3d, 0x6a, 0x90, 0x5e, 0xdb, 0x4c, 0xe4, 0xa8, 0x41, 0x79, 0x5f, 0x32, 0xd1, 0xa3, 0x45, 0xa1, 0xb5, 0x25, 0x44, 0x8f, 0x99, 0x38, 0xe7, 0x95, 0x12, 0x3d, 0x4e, 0xa2, 0x14, 0x93, 0x46, 0x6e, 0xf9, 0x91, 0x51, 0x4e, 0x2a, 0xb5, 0x16, 0x7b, 0xc6, 0xb5, 0x21, 0xd4, 0x52, 0x46, 0xa5, 0x4f, 0x29, 0xc9, 0x37, 0x25, 0x48, 0x55, 0xae, 0x12, 0x55, 0x94, 0x60, 0x55, 0xb1, 0xb8, 0x65, 0x56, 0x82, 0x15, 0xcd, 0xec, 0x91, 0x59, 0x09, 0x76, 0xb5, 0x90, 0x5b, 0x21, 0x21, 0x98, 0x55, 0x2a, 0x6e, 0x86, 0xc4, 0x20, 0xd6, 0x98, 0xa6, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t player3won[] PROGMEM = {0x00, 0x00, 0x80, 0x8a, 0x44, 0xcc, 0xcd, 0xcc, 0x72, 0xc1, 0x0a, 0xd5, 0x6a, 0xe3, 0xda, 0x08, 0x28, 0xb4, 0x2b, 0xf9, 0x51, 0x57, 0xba, 0x46, 0xa4, 0x13, 0xb8, 0x58, 0x29, 0x16, 0x66, 0x4e, 0x10, 0x4c, 0x54, 0xb8, 0x8b, 0x3d, 0x54, 0x50, 0xde, 0x1d, 0x2e, 0xec, 0x50, 0x41, 0x59, 0x4f, 0x18, 0xd1, 0x43, 0x45, 0xc3, 0x55, 0xad, 0x86, 0x0f, 0x15, 0x3c, 0x4f, 0x97, 0x06, 0x3e, 0x94, 0x8f, 0x32, 0x95, 0x56, 0xf8, 0x30, 0xd6, 0x6b, 0x65, 0x4b, 0xa8, 0x93, 0x70, 0xd3, 0x1d, 0x66, 0xa4, 0x4b, 0x09, 0x5c, 0x95, 0xa7, 0x50, 0x55, 0x89, 0x34, 0x55, 0x11, 0x46, 0xb8, 0x91, 0x4d, 0x6b, 0x58, 0xba, 0xdd, 0x82, 0x17, 0xa1, 0x19, 0x66, 0x96, 0x53, 0x91, 0xb8, 0x99, 0xaa, 0xda, 0x6e, 0x19, 0x2b, 0x5c, 0x51, 0x12, 0x63, 0x89, 0x2c, 0x69, 0x47, 0x73, 0x84, 0x23, 0x3a, 0x25, 0x9d, 0x63, 0x16, 0x8f, 0x94, 0x18, 0xc7, 0x4c, 0x9a, 0x38, 0x72, 0x22, 0x6c, 0xb3, 0x25, 0xe2, 0xc8, 0x81, 0xb1, 0xef, 0x86, 0x85, 0x25, 0x63, 0x3b, 0xd5, 0xaa, 0x91, 0x93, 0x0a, 0x46, 0xab, 0x6a, 0x8c, 0x0a, 0x2a, 0x18, 0x61, 0x6c, 0x1d, 0xb9, 0xa9, 0x6a, 0x16, 0xc2, 0xa4, 0xa5, 0xa5, 0xb9, 0x56, 0x04, 0x9d, 0xa6, 0x8f, 0xe6, 0x53, 0x09, 0x54, 0x19, 0x3e, 0x9a, 0xd7, 0x15, 0x14, 0x69, 0x64, 0xe9, 0x92, 0x77, 0x68, 0xa4, 0x91, 0xa2, 0x02, 0x57, 0x6b, 0xee, 0xb4, 0x8b, 0x0e, 0x5c, 0x2f, 0x8b, 0x3a, 0x69, 0x26, 0x93, 0x93, 0x26, 0x51, 0xfa, 0x58, 0x81, 0x6d, 0x9a, 0x69, 0xa0, 0xe3, 0x7a, 0x1e, 0x35, 0x81, 0x42, 0x93, 0x0f, 0x4c, 0xf5, 0x28, 0xda, 0x55, 0x01, 0xd8, 0x9d, 0x06, 0x94, 0xac, 0xa8, 0x85, 0xa0, 0x8e, 0x91, 0xbd, 0x91, 0x27, 0x2a, 0x35, 0xa9, 0x62, 0x0f, 0x19, 0xb8, 0xe5, 0x36, 0x13, 0x39, 0x6a, 0x90, 0x5e, 0x5b, 0x4c, 0xf4, 0xaa, 0x47, 0x8b, 0x42, 0x6a, 0x4b, 0x88, 0x1e, 0x2b, 0x71, 0xae, 0x4d, 0x25, 0x76, 0x9c, 0xc4, 0x28, 0x26, 0x95, 0xdc, 0x0e, 0x5a, 0xe2, 0x19, 0xf7, 0x86, 0x50, 0x4f, 0x19, 0x51, 0x3e, 0x65, 0x28, 0xcf, 0x94, 0xa0, 0x74, 0xa9, 0x58, 0x54, 0x51, 0x82, 0x55, 0x25, 0x6c, 0x96, 0x65, 0xc9, 0x4a, 0x30, 0x6b, 0x84, 0xdd, 0x2a, 0x29, 0xc1, 0xac, 0x52, 0x75, 0xcb, 0x24, 0x02, 0xa9, 0xc6, 0x24, 0x45, 0x03, 0x00, 0x00, 0xc0, 0xff};
const uint8_t player4won[] PROGMEM = {0x00, 0x24, 0x6b, 0x52, 0xd2, 0x59, 0x62, 0xa7, 0x3a, 0x51, 0xcb, 0x20, 0x8a, 0x1d, 0xa2, 0x48, 0xab, 0x4c, 0xc4, 0x0a, 0x02, 0x92, 0xac, 0x3a, 0xa1, 0xf7, 0x63, 0x6a, 0x65, 0xf8, 0x84, 0x41, 0x77, 0x07, 0x87, 0x98, 0x13, 0x45, 0xe5, 0x13, 0xe1, 0x64, 0x4e, 0x94, 0xb8, 0x76, 0x97, 0x93, 0x39, 0x51, 0x12, 0x52, 0x3d, 0x46, 0xe4, 0x44, 0x49, 0x71, 0x4d, 0xab, 0x90, 0x13, 0x05, 0xcb, 0xdd, 0xc5, 0x46, 0x56, 0xe4, 0x83, 0x4c, 0xba, 0x06, 0x5d, 0x91, 0x29, 0xd2, 0xe9, 0x52, 0x64, 0xc5, 0xbc, 0xf2, 0x84, 0x71, 0xa0, 0x95, 0x61, 0x55, 0x19, 0x61, 0xa6, 0x47, 0x5e, 0x84, 0x98, 0xb9, 0x5b, 0x0e, 0x49, 0x11, 0xe6, 0xa6, 0x66, 0x27, 0x91, 0xc9, 0x44, 0xa8, 0xbb, 0x6d, 0x17, 0x89, 0xd1, 0x01, 0x9e, 0x33, 0x4b, 0x22, 0x6a, 0x0f, 0x68, 0xce, 0x68, 0xa9, 0xee, 0xdd, 0x10, 0x39, 0x63, 0x64, 0x7a, 0x47, 0x42, 0xd9, 0x82, 0x95, 0xab, 0x6b, 0xc9, 0xa9, 0x2d, 0x86, 0xac, 0x1e, 0xa7, 0xa5, 0xd6, 0x68, 0x84, 0x78, 0x1c, 0x92, 0x5a, 0x21, 0x11, 0x68, 0x86, 0x41, 0x45, 0xcd, 0xa0, 0x82, 0xd1, 0x0e, 0x51, 0xb1, 0x8a, 0xc6, 0x5a, 0x3b, 0x74, 0xc4, 0x1c, 0xaa, 0xcd, 0xed, 0x30, 0x11, 0x69, 0xa9, 0x3e, 0x96, 0xc1, 0xa4, 0xe0, 0x61, 0x70, 0x3f, 0x2a, 0x5e, 0x82, 0x93, 0x0e, 0x62, 0x0f, 0x9a, 0x27, 0x4a, 0x06, 0x88, 0x33, 0x10, 0x9e, 0xb8, 0x99, 0x58, 0x5f, 0xa8, 0x86, 0xd1, 0x63, 0x59, 0xde, 0xe9, 0x1a, 0x46, 0x8e, 0xe3, 0x79, 0x54, 0xba, 0x0b, 0x39, 0xae, 0xe7, 0x51, 0x1b, 0x24, 0xb8, 0xf8, 0x4c, 0x78, 0x6f, 0xa0, 0x38, 0xe5, 0x83, 0x31, 0x2d, 0x28, 0x4e, 0x43, 0xe4, 0x31, 0xe7, 0x99, 0x24, 0x1d, 0x79, 0x63, 0x14, 0x1b, 0x62, 0xf5, 0x90, 0x81, 0x69, 0x6e, 0x09, 0x91, 0xa3, 0x06, 0xe9, 0xb5, 0xc5, 0x44, 0xae, 0x7a, 0xb4, 0x28, 0xb4, 0x2f, 0x99, 0xe8, 0x31, 0x13, 0xe7, 0xbc, 0x52, 0x22, 0xc7, 0xc9, 0x8c, 0x7c, 0xca, 0xc8, 0x2e, 0x3f, 0x31, 0x8a, 0x49, 0x25, 0xd7, 0x62, 0xcf, 0xb8, 0x27, 0x84, 0x7a, 0xca, 0x98, 0xd0, 0x29, 0x25, 0x65, 0xae, 0x00, 0xa9, 0xda, 0x54, 0xe2, 0x8a, 0x12, 0xcc, 0x2a, 0x16, 0xb7, 0xc2, 0x4a, 0x30, 0x6b, 0x98, 0x3c, 0x0a, 0x2f, 0x49, 0x08, 0x46, 0xb5, 0x8a, 0x9b, 0x21, 0x11, 0x08, 0x35, 0x2e, 0x29, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t player5won[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x88, 0x8b, 0xdc, 0xdd, 0x2d, 0x2c, 0xa7, 0xb6, 0x48, 0xed, 0x32, 0x76, 0x92, 0xca, 0xc2, 0xa3, 0xdc, 0x54, 0x36, 0x02, 0x0a, 0x8f, 0x1a, 0x81, 0x5f, 0xa1, 0x12, 0x23, 0xe4, 0x84, 0x36, 0xb5, 0x8b, 0xb7, 0x91, 0x13, 0x7b, 0x37, 0x1d, 0x1a, 0x42, 0x4f, 0x12, 0x6c, 0x54, 0xa7, 0x09, 0x3e, 0x69, 0xd4, 0x92, 0xdd, 0x2a, 0xf8, 0x64, 0xd1, 0x50, 0x65, 0xab, 0xa1, 0x95, 0x45, 0x87, 0x9d, 0x25, 0x86, 0x56, 0x16, 0x02, 0x4d, 0x86, 0x04, 0x5a, 0xb2, 0x4d, 0xdc, 0xe5, 0x5c, 0x72, 0x28, 0xaa, 0x71, 0x56, 0x60, 0xa9, 0x52, 0x43, 0x57, 0xee, 0xae, 0x52, 0x04, 0x90, 0x89, 0x18, 0x02, 0x3a, 0x37, 0x53, 0x78, 0xa1, 0x16, 0xe1, 0x6a, 0x39, 0x45, 0x99, 0x57, 0xa6, 0x69, 0xe4, 0x93, 0x86, 0xb8, 0xca, 0x11, 0x05, 0x6e, 0x76, 0xb2, 0xe4, 0x56, 0xc5, 0xbd, 0xe0, 0xc9, 0x93, 0x6b, 0x13, 0x8b, 0xc0, 0x27, 0x4b, 0xa6, 0x42, 0xd5, 0x83, 0x9c, 0x2c, 0x9a, 0x4a, 0x37, 0x0d, 0x3c, 0x72, 0x69, 0x23, 0xc2, 0x38, 0xb0, 0x29, 0x41, 0x8e, 0x8c, 0x74, 0x2b, 0xae, 0x22, 0x3c, 0x32, 0xcc, 0xe2, 0x86, 0x82, 0xa4, 0x76, 0x54, 0x4d, 0xe2, 0x0a, 0x5a, 0x26, 0xc0, 0xb2, 0x61, 0x90, 0xd9, 0x6a, 0x01, 0xcd, 0x46, 0x45, 0x12, 0x6d, 0x0d, 0x34, 0x2a, 0x0e, 0xd9, 0x94, 0x31, 0x88, 0x2a, 0xb9, 0x14, 0x1f, 0xc7, 0x21, 0xab, 0xe0, 0x32, 0xb4, 0x1b, 0x67, 0x6b, 0x43, 0x45, 0x07, 0xa1, 0x9b, 0x39, 0x13, 0x07, 0x03, 0xc4, 0x1e, 0x30, 0x6b, 0x9c, 0x4c, 0x10, 0xb6, 0x84, 0xc3, 0xea, 0x30, 0x95, 0x9c, 0x30, 0x0d, 0xa1, 0xc7, 0xf6, 0x3c, 0x2a, 0xcc, 0x8d, 0x1c, 0xd7, 0xf3, 0xa8, 0x09, 0x11, 0xd2, 0x3c, 0xcd, 0xbd, 0x36, 0x49, 0xa8, 0xf1, 0x41, 0x99, 0x0e, 0x26, 0x79, 0x2c, 0x04, 0x75, 0x5b, 0x41, 0xec, 0xb6, 0x76, 0x28, 0xb2, 0x71, 0xb6, 0xba, 0xa8, 0xc8, 0x35, 0xb7, 0x95, 0xe8, 0xd1, 0x82, 0xf4, 0xda, 0x12, 0x22, 0x47, 0x8d, 0xd2, 0x6a, 0x5b, 0x89, 0x1e, 0x2d, 0x4a, 0xed, 0x4d, 0x21, 0x7a, 0x8c, 0x24, 0xb8, 0xae, 0x84, 0xe8, 0xb2, 0x13, 0xa3, 0x98, 0x32, 0x72, 0xd3, 0x6b, 0x51, 0x60, 0x54, 0x93, 0x42, 0x3d, 0xa5, 0x82, 0xcb, 0xb4, 0x33, 0x7d, 0x97, 0x03, 0xdf, 0xe5, 0xca, 0xd6, 0x44, 0x05, 0x66, 0x15, 0x8b, 0x47, 0x66, 0x25, 0x98, 0x35, 0x82, 0x1e, 0x95, 0x14, 0xe0, 0x54, 0x31, 0xbb, 0x65, 0x52, 0x81, 0x59, 0xad, 0x6c, 0x56, 0x48, 0x07, 0x52, 0x8d, 0x69, 0x5a, 0x02, 0x00, 0x00, 0x00, 0x80, 0xff};

const uint8_t players1turn[] PROGMEM = {0x00, 0x00, 0x00, 0x80, 0x3c, 0x68, 0x27, 0x23, 0x42, 0xb1, 0x4a, 0xc0, 0x73, 0xe2, 0x09, 0x2b, 0x29, 0xa3, 0x6d, 0x0d, 0xa2, 0x43, 0x8f, 0x54, 0xf5, 0x51, 0x88, 0x09, 0x7c, 0x62, 0x5f, 0x5a, 0x31, 0xdb, 0xf0, 0x89, 0xbc, 0xaf, 0xe0, 0x0c, 0x53, 0x2d, 0x24, 0xbe, 0x8a, 0x4b, 0x2d, 0xa7, 0x08, 0xd4, 0x2a, 0x4c, 0x89, 0xed, 0x62, 0x70, 0x23, 0xb0, 0x24, 0x31, 0xcb, 0xc0, 0xeb, 0x10, 0x15, 0xc7, 0x29, 0xab, 0x22, 0x52, 0x59, 0xc3, 0xa6, 0xbc, 0x50, 0x2f, 0x65, 0x8e, 0x8c, 0x80, 0x42, 0xba, 0x53, 0xe8, 0xcd, 0x07, 0x6a, 0x4c, 0x38, 0x49, 0xd0, 0x1f, 0x6c, 0x31, 0x30, 0x01, 0xc1, 0x5e, 0x9f, 0x34, 0xa8, 0xe9, 0x32, 0x0d, 0x7c, 0xd2, 0xc8, 0x23, 0xbb, 0xd4, 0xf0, 0xc9, 0xa2, 0xf4, 0xac, 0x32, 0x83, 0x27, 0x8b, 0x46, 0xa2, 0xda, 0x0c, 0x9e, 0x3c, 0x58, 0x89, 0x1a, 0x0e, 0xb8, 0x72, 0xef, 0x24, 0xaa, 0xa9, 0xc4, 0xca, 0x9d, 0xd3, 0xcc, 0xe6, 0x10, 0xab, 0x30, 0xc6, 0x32, 0x4a, 0x43, 0x8e, 0x82, 0x89, 0xaa, 0x62, 0x31, 0xd2, 0xba, 0x02, 0x58, 0xb2, 0x34, 0xb2, 0x00, 0x7e, 0x54, 0x21, 0xc0, 0x8b, 0xc1, 0x0e, 0xd8, 0x5e, 0x54, 0x01, 0x27, 0xa9, 0xb5, 0x22, 0x19, 0x8b, 0x08, 0x35, 0x3d, 0x32, 0x93, 0x69, 0x24, 0xb0, 0xd4, 0xca, 0x7c, 0xa6, 0xd6, 0xc2, 0x8a, 0x23, 0xf7, 0x19, 0xc7, 0x8a, 0x43, 0x0c, 0xc5, 0x67, 0x6a, 0x6b, 0x2a, 0x39, 0x8d, 0xe1, 0xfa, 0x88, 0xa3, 0x45, 0x85, 0x46, 0x18, 0x23, 0x96, 0x35, 0x95, 0xec, 0x49, 0x4a, 0xb9, 0xe7, 0xd5, 0x42, 0x4b, 0xa6, 0x00, 0x29, 0x46, 0x92, 0x15, 0xab, 0x02, 0xb4, 0x1a, 0x51, 0x55, 0xc2, 0x0a, 0xb0, 0xaa, 0x55, 0x54, 0x29, 0xf3, 0x40, 0xaf, 0x91, 0x60, 0x3a, 0xc4, 0x03, 0xbd, 0x5a, 0x55, 0x95, 0x90, 0x08, 0xe4, 0xee, 0x50, 0x93, 0x0b, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t players2turn[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x2a, 0xed, 0x4c, 0x8d, 0xc3, 0x94, 0x2a, 0x60, 0x51, 0x77, 0x05, 0x6c, 0x15, 0xd2, 0xbc, 0x66, 0x94, 0xad, 0x32, 0xf4, 0x71, 0xa5, 0x8e, 0xea, 0x12, 0x43, 0xc7, 0x15, 0x6a, 0x6a, 0x5c, 0x6c, 0x0e, 0x82, 0x84, 0x8b, 0x64, 0x2d, 0x59, 0x7c, 0x30, 0x56, 0xcc, 0x22, 0xb0, 0x49, 0xc0, 0x1b, 0xd5, 0x08, 0xcb, 0x24, 0x07, 0x71, 0x3c, 0xdc, 0xad, 0x20, 0x57, 0xca, 0x88, 0x0a, 0x8f, 0xac, 0x80, 0xc2, 0xac, 0x46, 0xdf, 0x30, 0x79, 0x39, 0x39, 0x0a, 0x74, 0x41, 0xde, 0xc9, 0x6a, 0x65, 0x64, 0x2e, 0x1c, 0x51, 0x54, 0xe0, 0x93, 0x07, 0xbf, 0xc4, 0xde, 0x41, 0x4e, 0x16, 0xd4, 0x98, 0x4a, 0x1b, 0x39, 0x59, 0xe4, 0x95, 0x21, 0x69, 0xf4, 0x64, 0x89, 0x79, 0x94, 0xa7, 0xe0, 0x93, 0x45, 0xe5, 0x51, 0x63, 0x06, 0x4f, 0x16, 0x8d, 0x44, 0x8d, 0x04, 0x3c, 0xb9, 0x77, 0x12, 0x35, 0x14, 0xe2, 0xe6, 0x27, 0xb7, 0x56, 0x23, 0x9b, 0x43, 0x9e, 0x82, 0x9b, 0x68, 0x77, 0x35, 0x35, 0x2a, 0x05, 0xa3, 0xc6, 0xc9, 0xf2, 0xe8, 0x17, 0x26, 0xb6, 0x54, 0xdb, 0x0a, 0xf8, 0x25, 0xd4, 0x00, 0xab, 0xa9, 0x07, 0xe0, 0x46, 0x32, 0x03, 0xcc, 0xe8, 0xba, 0x72, 0x97, 0xb9, 0x35, 0xd8, 0xd2, 0xc9, 0x5c, 0xa6, 0xd1, 0xc4, 0x92, 0x37, 0x3b, 0x85, 0xcf, 0xd8, 0xd6, 0x54, 0xe2, 0x6a, 0xcb, 0x0a, 0x09, 0x5b, 0x8b, 0x0a, 0x2d, 0x2f, 0x44, 0x6c, 0x2b, 0x0a, 0xb9, 0xa3, 0x96, 0x78, 0x8f, 0xa3, 0x4d, 0x26, 0x53, 0x86, 0xbc, 0x8e, 0x36, 0xc9, 0x72, 0x05, 0x28, 0x31, 0x1a, 0x2a, 0x5b, 0x15, 0xa0, 0xd5, 0x52, 0xb0, 0x52, 0x55, 0x80, 0x15, 0x23, 0xc6, 0x4a, 0x84, 0x07, 0x7a, 0x8d, 0xb8, 0x2a, 0x61, 0x3e, 0x98, 0x55, 0x26, 0x2a, 0x8f, 0x84, 0x20, 0xf5, 0xb8, 0xa9, 0x1c, 0x00, 0x00, 0x80, 0xff};
const uint8_t players3turn[] PROGMEM = {0x00, 0x80, 0xea, 0xa8, 0xc3, 0xdd, 0x4c, 0x92, 0x28, 0x8a, 0xb4, 0x70, 0x37, 0x59, 0x08, 0x48, 0x42, 0xc3, 0x45, 0x49, 0x8b, 0x99, 0xa9, 0x65, 0x17, 0x79, 0x2b, 0x6e, 0x66, 0x71, 0x42, 0x0c, 0xa7, 0x94, 0x86, 0x24, 0x2c, 0x2c, 0xc9, 0x3a, 0x9e, 0x1c, 0xeb, 0xd0, 0x4e, 0x4b, 0x55, 0x47, 0xcc, 0x43, 0x47, 0xc1, 0xb9, 0x1b, 0x21, 0x06, 0x1d, 0x38, 0xd7, 0xad, 0x09, 0x6c, 0xa1, 0x67, 0x9a, 0xb7, 0x2e, 0xc8, 0x64, 0x48, 0x45, 0x7d, 0xa3, 0x54, 0x94, 0x41, 0x15, 0xb5, 0x29, 0xb2, 0x1c, 0x33, 0xa8, 0xb4, 0x99, 0xc4, 0x2e, 0x6d, 0x81, 0xda, 0xaa, 0xec, 0x18, 0x01, 0x8d, 0x56, 0xa6, 0xc4, 0xab, 0x0b, 0xb6, 0xa8, 0x74, 0x92, 0xa0, 0x2f, 0xc4, 0xb3, 0xe0, 0x49, 0x82, 0xdc, 0x4e, 0xb3, 0x82, 0x27, 0x0d, 0x6a, 0xba, 0xc3, 0x0c, 0x9d, 0x2c, 0xb2, 0xe8, 0x4a, 0x11, 0x7c, 0xf2, 0xa0, 0x22, 0xab, 0xd5, 0xe0, 0xca, 0x83, 0x11, 0xcf, 0x91, 0x80, 0x2b, 0x0f, 0x8e, 0xa3, 0x9a, 0x4a, 0xcc, 0x7c, 0xe5, 0xce, 0x6a, 0x66, 0x4b, 0xc8, 0x51, 0x70, 0x13, 0xe5, 0x61, 0xa2, 0x4a, 0x65, 0xa1, 0xe7, 0x04, 0x5b, 0x66, 0xc0, 0xe1, 0xcc, 0x04, 0xf8, 0x25, 0x54, 0x00, 0xab, 0x4a, 0x28, 0xe0, 0x26, 0x32, 0x06, 0xcc, 0xe0, 0xda, 0x72, 0x5f, 0xb8, 0xd5, 0x39, 0xe2, 0xc8, 0x5c, 0xe2, 0xd6, 0x84, 0x88, 0x23, 0xf7, 0x99, 0xc6, 0x8a, 0x4a, 0xce, 0xbc, 0x69, 0x21, 0x61, 0x5b, 0x53, 0xc9, 0x6e, 0x37, 0x2f, 0x46, 0x6c, 0x6d, 0x0e, 0xd1, 0xe3, 0x94, 0x18, 0x8f, 0xab, 0x49, 0x96, 0x5c, 0x8e, 0x9d, 0x8e, 0x0e, 0x59, 0x12, 0x05, 0x28, 0x31, 0xe2, 0xa2, 0x98, 0x14, 0xa0, 0xd5, 0x72, 0xb0, 0x1c, 0x52, 0x80, 0x19, 0x63, 0x2e, 0x4c, 0x88, 0x07, 0x7a, 0xb5, 0x98, 0x31, 0x41, 0x3e, 0xe8, 0x55, 0x21, 0x4a, 0x0f, 0x85, 0x20, 0x75, 0x97, 0xa9, 0x1c, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t players4turn[] PROGMEM = {0x80, 0xf2, 0x22, 0xc4, 0xcd, 0x54, 0x92, 0xca, 0x87, 0x53, 0x33, 0x37, 0xd3, 0x26, 0x1b, 0xc6, 0xcc, 0x42, 0x25, 0x21, 0x60, 0x18, 0xb7, 0x42, 0x17, 0x69, 0xe1, 0x6e, 0x72, 0x83, 0xad, 0x73, 0x85, 0x99, 0xd9, 0x29, 0x14, 0x7f, 0x6e, 0xd0, 0x5d, 0xaa, 0x91, 0xf2, 0xa9, 0xc2, 0x76, 0xa8, 0x41, 0xe8, 0x4f, 0xae, 0x95, 0x11, 0x07, 0xa1, 0x1f, 0xb5, 0x46, 0x86, 0x6a, 0x84, 0xbe, 0xb8, 0x66, 0x61, 0x28, 0x04, 0x6c, 0x63, 0x85, 0x73, 0x44, 0x91, 0xe0, 0xc3, 0x16, 0x2a, 0xb6, 0x91, 0x6b, 0x46, 0x69, 0x94, 0xd9, 0x42, 0x40, 0xe1, 0x56, 0xad, 0x6b, 0x94, 0xa2, 0x02, 0x13, 0x06, 0xa9, 0x21, 0xeb, 0x60, 0x35, 0x9b, 0x12, 0xe7, 0x9e, 0xd1, 0x2a, 0xf4, 0xc9, 0x82, 0x3d, 0x66, 0xef, 0x20, 0x27, 0x0b, 0x7a, 0x55, 0xa4, 0x83, 0x9c, 0x2c, 0x8a, 0xca, 0x90, 0x32, 0x72, 0xb2, 0xc4, 0x22, 0xcb, 0x92, 0xe8, 0xc9, 0xa2, 0x8a, 0xac, 0x0e, 0x81, 0x27, 0x0b, 0x46, 0xa3, 0x46, 0x0c, 0x9e, 0x3c, 0x58, 0x89, 0x1a, 0x0a, 0x79, 0x72, 0xef, 0x24, 0xab, 0xb0, 0xc4, 0xc9, 0x9d, 0xd3, 0xcc, 0xa6, 0x90, 0x27, 0x97, 0xd6, 0xcb, 0xcb, 0x4c, 0x8e, 0x92, 0xd3, 0xae, 0x52, 0x32, 0xdd, 0xba, 0x0e, 0x88, 0xa3, 0x24, 0x96, 0x00, 0x7e, 0x52, 0x15, 0xc0, 0x29, 0x21, 0x0e, 0x38, 0x41, 0x4c, 0x01, 0x3b, 0xba, 0xb5, 0x22, 0x24, 0x29, 0x4f, 0x96, 0xbd, 0x32, 0x93, 0x79, 0x24, 0xb0, 0xd4, 0xca, 0x7c, 0xa2, 0xb6, 0xc2, 0x88, 0x3b, 0x1f, 0xaa, 0x4f, 0x34, 0x56, 0x54, 0x68, 0x9a, 0xc3, 0x0d, 0x11, 0xdb, 0x8a, 0x42, 0xce, 0xb0, 0x25, 0xc1, 0xe3, 0x68, 0x51, 0xa8, 0x94, 0x71, 0x2f, 0xa3, 0x8d, 0x96, 0x4c, 0x01, 0x4a, 0x8c, 0xa4, 0xc8, 0x56, 0x05, 0x68, 0x35, 0x62, 0x4a, 0x97, 0x15, 0x60, 0xc5, 0x28, 0xab, 0x52, 0x56, 0x80, 0x5e, 0x23, 0x2e, 0x72, 0x99, 0x0f, 0x7a, 0xb5, 0xa9, 0x32, 0x25, 0x11, 0xc8, 0x35, 0x61, 0x2a, 0x07, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t players5turn[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0xae, 0x0c, 0x01, 0xcb, 0x99, 0x11, 0x60, 0xba, 0xb0, 0x16, 0x86, 0x56, 0x2e, 0x92, 0xa6, 0x4f, 0x14, 0x7a, 0x19, 0x5b, 0x19, 0x39, 0x41, 0x9c, 0xa1, 0xe2, 0x25, 0xfa, 0xf8, 0xb1, 0x86, 0xb3, 0x97, 0xd8, 0xe3, 0xc5, 0x68, 0x21, 0x19, 0x54, 0x8f, 0x17, 0xbc, 0xa5, 0xbb, 0xd2, 0x5b, 0xbe, 0xb5, 0x56, 0xae, 0x2a, 0x2e, 0xc4, 0x8e, 0x6a, 0x64, 0x78, 0x6c, 0xe3, 0x37, 0xae, 0xea, 0xe9, 0x96, 0x49, 0x92, 0x85, 0x5a, 0xb8, 0xda, 0x46, 0x61, 0x52, 0xa6, 0xa6, 0xe6, 0x58, 0xf5, 0x91, 0x44, 0x5a, 0x88, 0x1d, 0xd7, 0x07, 0x5a, 0x41, 0x22, 0x56, 0x54, 0x5c, 0x68, 0xa5, 0x8b, 0x5a, 0x4e, 0x89, 0x2e, 0x23, 0x6c, 0x5d, 0xe8, 0xa4, 0x3e, 0xad, 0x68, 0x4c, 0xc0, 0x93, 0x05, 0x3b, 0x65, 0x5a, 0x81, 0x4e, 0x96, 0x44, 0x54, 0x84, 0x0b, 0x3e, 0x79, 0x94, 0x9e, 0x55, 0x6e, 0xe8, 0x64, 0xd1, 0x48, 0xd4, 0xa8, 0xc1, 0x95, 0x07, 0xc7, 0x59, 0xcd, 0x01, 0x47, 0xee, 0xbd, 0x64, 0x35, 0x95, 0x18, 0xb9, 0x77, 0x1a, 0x39, 0x1c, 0x62, 0xe4, 0xca, 0x58, 0x7a, 0x99, 0xc9, 0x56, 0x72, 0x56, 0x35, 0xc2, 0xa1, 0x4b, 0xd7, 0x00, 0x73, 0x96, 0x46, 0x66, 0xc0, 0x4f, 0x26, 0x04, 0xb8, 0xa9, 0xc4, 0x00, 0x3b, 0x88, 0x09, 0x60, 0x27, 0xb7, 0x52, 0x04, 0xaf, 0x69, 0x21, 0x92, 0x47, 0x66, 0x33, 0xb7, 0x06, 0x94, 0x1a, 0x99, 0xcf, 0xd4, 0x9a, 0x58, 0x72, 0xe4, 0x3e, 0x53, 0x5b, 0x53, 0x88, 0xa6, 0xba, 0x4c, 0x6d, 0x45, 0xa5, 0x9a, 0xe9, 0x13, 0x8e, 0x16, 0x15, 0x6a, 0xae, 0x8f, 0x38, 0x56, 0x14, 0xb2, 0x85, 0x31, 0x62, 0x5b, 0x53, 0xc9, 0x94, 0x84, 0x80, 0x63, 0x4d, 0x81, 0x5c, 0xc6, 0x3d, 0xaf, 0x36, 0x04, 0x11, 0x39, 0xa8, 0x31, 0x92, 0x2c, 0x87, 0x15, 0xa0, 0xd6, 0xaa, 0xaa, 0x1c, 0x52, 0x80, 0x55, 0xad, 0xa2, 0x4a, 0x89, 0x07, 0x7a, 0xb5, 0x99, 0xd2, 0x45, 0x1e, 0x18, 0x55, 0x2e, 0xaa, 0x14, 0x45, 0x20, 0x77, 0xa7, 0x19, 0x1d, 0x00, 0x00, 0x80, 0xff};
const uint8_t correctpokeypokey[] PROGMEM = {0x00, 0x00, 0x00, 0x8c, 0xe4, 0x26, 0x36, 0x85, 0xa9, 0x0d, 0xc1, 0x68, 0xdb, 0x4a, 0x05, 0x77, 0x44, 0xab, 0x7c, 0xb2, 0x82, 0xe8, 0xc9, 0x94, 0x88, 0xca, 0x2c, 0xc1, 0xa3, 0xc4, 0x7c, 0xa2, 0x3c, 0x05, 0x0b, 0x20, 0x02, 0xef, 0xd6, 0x3f, 0x80, 0x26, 0xa9, 0x36, 0x47, 0x1d, 0x41, 0x44, 0xbb, 0x07, 0x3a, 0x4a, 0xa0, 0x96, 0xed, 0x6e, 0xf8, 0x28, 0x41, 0x6a, 0x75, 0x8a, 0x90, 0xa1, 0x38, 0xa5, 0x35, 0xa1, 0x84, 0x0d, 0x30, 0xbc, 0xb8, 0x02, 0x92, 0x2f, 0x29, 0xb1, 0xed, 0xe2, 0x96, 0x1a, 0x69, 0x24, 0x72, 0x52, 0x7a, 0x4a, 0xc4, 0x92, 0xea, 0x8d, 0x1d, 0xc1, 0x31, 0x53, 0xa6, 0x37, 0x4c, 0x3a, 0x57, 0x68, 0x92, 0x1c, 0x54, 0x91, 0x54, 0xf1, 0x64, 0xbe, 0x48, 0x79, 0x53, 0xc8, 0x93, 0x84, 0x1c, 0x15, 0x29, 0x91, 0x4e, 0x1c, 0x62, 0x54, 0x9b, 0x98, 0x59, 0x91, 0x73, 0x9a, 0x4d, 0x62, 0xcd, 0x65, 0xd2, 0x5b, 0x14, 0x8b, 0x54, 0x50, 0xf9, 0xe2, 0x6c, 0x59, 0x12, 0x8b, 0x01, 0x4b, 0xbb, 0x84, 0xaa, 0x09, 0x46, 0x4f, 0x37, 0x5d, 0x02, 0x2f, 0xa8, 0xaf, 0x55, 0xe8, 0x60, 0xb5, 0x92, 0xbd, 0x74, 0x42, 0x8b, 0x17, 0x2a, 0x66, 0x33, 0x04, 0xad, 0x4c, 0x0a, 0xef, 0xf6, 0x12, 0xdc, 0x4a, 0x0f, 0x22, 0xaa, 0x23, 0xb4, 0x00, 0xbe, 0x64, 0x21, 0xc0, 0xe1, 0x66, 0x04, 0x98, 0xcc, 0x6d, 0x25, 0x5e, 0x56, 0x95, 0x25, 0xd1, 0x93, 0x59, 0xdb, 0x15, 0x9a, 0x40, 0x47, 0x2e, 0x6c, 0x97, 0x73, 0x10, 0x75, 0x2a, 0xa8, 0x5d, 0x66, 0x4e, 0x47, 0x68, 0xe0, 0xb6, 0xba, 0xb1, 0x3c, 0x56, 0x83, 0x32, 0x1e, 0xa9, 0x56, 0x90, 0x2a, 0x74, 0x85, 0xbb, 0x4a, 0x0a, 0x58, 0xd0, 0xed, 0xe1, 0x6e, 0xd5, 0xf5, 0xd2, 0xb6, 0xb2, 0x59, 0xe4, 0x96, 0xba, 0xd2, 0x42, 0x11, 0x05, 0x4f, 0xe6, 0x4a, 0x0b, 0x55, 0x96, 0x38, 0x99, 0xc9, 0x63, 0x1c, 0x59, 0x60, 0x64, 0x2a, 0x8d, 0x92, 0x67, 0x85, 0x92, 0xb3, 0x38, 0x84, 0x5d, 0x15, 0x58, 0x0d, 0xd2, 0x29, 0x45, 0xd8, 0x86, 0x12, 0x17, 0xc7, 0x1a, 0x59, 0xa6, 0x4f, 0x1c, 0xa9, 0x45, 0xa7, 0x1a, 0x3e, 0x85, 0x13, 0x95, 0x15, 0x14, 0x2a, 0xd8, 0xc0, 0x56, 0x65, 0xa8, 0x29, 0xd6, 0x81, 0x5c, 0xa6, 0x66, 0xb6, 0x11, 0xd0, 0x8c, 0x59, 0x6a, 0xbd, 0x50, 0xf7, 0x10, 0xb3, 0x08, 0x48, 0x72, 0x6a, 0x64, 0xa6, 0x1b, 0xd8, 0x88, 0xe9, 0x95, 0xd9, 0x1e, 0xa8, 0xab, 0xa6, 0x47, 0x66, 0x46, 0xa1, 0x9c, 0x19, 0x6a, 0x99, 0xea, 0xcd, 0xd8, 0x51, 0x20, 0x64, 0x74, 0x1a, 0xca, 0x64, 0x41, 0x96, 0x83, 0xad, 0x1c, 0x5d, 0xa1, 0x50, 0xcc, 0xdb, 0xb8, 0xb8, 0xc9, 0x62, 0xc0, 0xd0, 0xe2, 0xa5, 0xee, 0x8c, 0xbd, 0x52, 0x24, 0x8f, 0x28, 0x22, 0x8d, 0x59, 0x13, 0xb2, 0xb8, 0x44, 0xd4, 0xf7, 0x4c, 0xe8, 0xe0, 0x22, 0x95, 0xbc, 0x33, 0x21, 0x8d, 0xf3, 0x5c, 0xfa, 0x46, 0xc8, 0xa6, 0x98, 0xc9, 0xd8, 0x55, 0x82, 0x67, 0x62, 0x60, 0xea, 0x9a, 0x90, 0x9d, 0x48, 0x40, 0xd8, 0x5d, 0x25, 0xa5, 0x2c, 0x83, 0xac, 0xfa, 0x52, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};

const uint8_t correctnumberone[] PROGMEM = {0x00, 0x00, 0x00, 0x50, 0x52, 0xa5, 0x6d, 0x23, 0x19, 0xde, 0x11, 0xad, 0xb2, 0xa9, 0x74, 0xa2, 0x27, 0x33, 0x32, 0x3a, 0x33, 0x89, 0xac, 0x9c, 0x89, 0xca, 0xf4, 0x12, 0xd2, 0x6a, 0x01, 0xa6, 0x2a, 0xcd, 0x54, 0x6b, 0x37, 0x40, 0xb7, 0xf6, 0x44, 0x0a, 0xe8, 0x40, 0xfd, 0x94, 0x81, 0x78, 0xb6, 0x87, 0xe1, 0xa3, 0x04, 0xa1, 0xd9, 0xa1, 0x82, 0x8f, 0xec, 0x95, 0xd6, 0x84, 0x10, 0x69, 0xc5, 0xb0, 0xa4, 0x91, 0x2e, 0xc9, 0x00, 0xc5, 0x96, 0xa7, 0x34, 0xc6, 0x10, 0x1d, 0x8f, 0x3c, 0x62, 0x35, 0x29, 0x2c, 0x25, 0x62, 0x4b, 0xd4, 0xc6, 0x8c, 0xe4, 0x98, 0x25, 0xd3, 0x1b, 0x3b, 0x9d, 0x2b, 0x14, 0x49, 0x2e, 0xac, 0x48, 0xaa, 0xb8, 0x32, 0x53, 0xb9, 0xa2, 0x28, 0xe6, 0x49, 0x7d, 0xf1, 0xf2, 0x92, 0x48, 0x27, 0x0e, 0x31, 0xaa, 0x9c, 0x2d, 0x9f, 0x28, 0x04, 0xab, 0x62, 0x91, 0x9a, 0x52, 0xe9, 0x34, 0x5b, 0x44, 0xaa, 0x08, 0x7d, 0xf4, 0x18, 0x15, 0xd3, 0x24, 0xf7, 0x21, 0xa2, 0x42, 0x24, 0xa7, 0x7c, 0x31, 0xd2, 0x28, 0x89, 0xad, 0x0a, 0x10, 0xae, 0x93, 0x45, 0xaa, 0x4a, 0x81, 0xda, 0x2d, 0x65, 0x7a, 0x4e, 0xa5, 0xbc, 0x66, 0x9b, 0x81, 0x0c, 0xd1, 0x72, 0xa9, 0x3b, 0x13, 0x74, 0xa4, 0xc8, 0x29, 0xf6, 0xc2, 0xe0, 0x91, 0x3d, 0x97, 0xd8, 0x71, 0x91, 0x4d, 0xa5, 0xa2, 0x72, 0x32, 0x09, 0x97, 0x6c, 0x00, 0x76, 0xad, 0x8c, 0x5c, 0xca, 0xcb, 0xc4, 0x44, 0xcc, 0x32, 0x03, 0xae, 0x75, 0x13, 0xc0, 0x55, 0xe1, 0x23, 0x0c, 0xac, 0xab, 0xdd, 0x05, 0x1f, 0xd5, 0xcb, 0xea, 0x36, 0x27, 0x72, 0x74, 0xaf, 0xab, 0xd3, 0x1c, 0xc8, 0xb0, 0xad, 0x8a, 0x4a, 0x0f, 0xa0, 0xca, 0x05, 0x65, 0xd2, 0x54, 0xa9, 0x0b, 0x17, 0xe4, 0x6e, 0x31, 0x65, 0x1c, 0x4c, 0xa8, 0xe2, 0xc4, 0xc5, 0x51, 0x31, 0xb1, 0xa8, 0x2e, 0x93, 0x48, 0x47, 0x8f, 0xbc, 0xc2, 0xdd, 0x4d, 0x1e, 0x3d, 0xaa, 0x36, 0x0e, 0x33, 0x75, 0xb4, 0xe0, 0x5b, 0xa8, 0x5c, 0xd4, 0xd2, 0x6c, 0x09, 0xe6, 0x0a, 0x49, 0x41, 0x05, 0xa9, 0xd2, 0x2d, 0x1a, 0x9a, 0x12, 0x1c, 0x4f, 0xd7, 0x88, 0xc8, 0x2a, 0xf0, 0x43, 0xdd, 0xd4, 0x56, 0x22, 0xed, 0x64, 0x8d, 0x0a, 0xd9, 0xad, 0xb0, 0x0b, 0x3b, 0x93, 0x12, 0x0c, 0xd5, 0x2c, 0xec, 0x0a, 0x49, 0xd1, 0x74, 0x75, 0xb0, 0xb2, 0xa4, 0x41, 0xa2, 0xd9, 0x23, 0xb7, 0xb6, 0x08, 0x8e, 0xc6, 0x4f, 0x05, 0x37, 0x4c, 0x1a, 0x06, 0xec, 0x72, 0x30, 0x77, 0x1c, 0x4c, 0xbc, 0x4a, 0xc0, 0xd2, 0x51, 0x31, 0x54, 0x19, 0x87, 0xca, 0x28, 0x43, 0xf7, 0x71, 0x02, 0xba, 0x0c, 0x2f, 0xcd, 0xdb, 0x0e, 0xc8, 0x34, 0xbc, 0x14, 0x1f, 0xca, 0xb0, 0x52, 0xf0, 0x50, 0x6c, 0x0a, 0xa3, 0x49, 0xd2, 0x43, 0x96, 0xa1, 0x9c, 0x2a, 0x29, 0xa7, 0x1c, 0x84, 0x2a, 0x4e, 0xb3, 0xe8, 0x32, 0x50, 0xba, 0x29, 0x38, 0xb6, 0x49, 0xc1, 0x89, 0xa0, 0xd0, 0xd8, 0x22, 0x01, 0xaf, 0x02, 0x42, 0x6b, 0x8b, 0x04, 0xdc, 0x69, 0x72, 0x71, 0x42, 0x12, 0xf0, 0xcb, 0xd4, 0x23, 0x09, 0xca, 0xc0, 0xbb, 0x70, 0x55, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t correctreturn[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x58, 0xa5, 0x6d, 0x23, 0x18, 0xde, 0x12, 0xad, 0xb2, 0xa9, 0x74, 0xa2, 0x27, 0x33, 0xd2, 0x3b, 0x2b, 0x89, 0xac, 0x9c, 0x8b, 0xaa, 0xf4, 0x12, 0xdc, 0x2a, 0x06, 0x37, 0x33, 0xdc, 0x54, 0x6b, 0x27, 0xc0, 0xf0, 0xf6, 0xc4, 0x02, 0x58, 0x40, 0xec, 0x94, 0x01, 0x7b, 0xb6, 0x47, 0xa0, 0xa3, 0x04, 0x6e, 0xd9, 0x61, 0x82, 0x8f, 0x1c, 0x94, 0xd6, 0x84, 0x10, 0x29, 0x45, 0x13, 0xa8, 0x99, 0x2e, 0xca, 0x00, 0xcd, 0x46, 0x10, 0x20, 0x86, 0x90, 0x11, 0xab, 0x49, 0x61, 0x29, 0x15, 0x5b, 0xa2, 0x16, 0x66, 0x24, 0xc7, 0x2c, 0x99, 0xde, 0xd8, 0xe9, 0x5c, 0xa1, 0x66, 0x43, 0xd4, 0x8d, 0x2b, 0x8a, 0x6a, 0x9e, 0xd4, 0x17, 0x2f, 0x6f, 0x8e, 0x74, 0xe2, 0x10, 0xa3, 0x2a, 0xc4, 0xf2, 0x89, 0x42, 0xb4, 0x6a, 0x11, 0xa9, 0x25, 0x91, 0x56, 0xb2, 0x45, 0xa4, 0xaa, 0xd8, 0x45, 0x8b, 0x11, 0x31, 0x4d, 0x32, 0x1f, 0x22, 0x3a, 0xc4, 0x32, 0x01, 0xb6, 0x62, 0x31, 0x05, 0x90, 0x3b, 0x25, 0x2c, 0x45, 0x64, 0xc0, 0xdd, 0xa6, 0xb0, 0x3c, 0xa7, 0x12, 0x5e, 0xb3, 0xcd, 0x40, 0x9b, 0x68, 0xb8, 0xf4, 0x9d, 0x09, 0x5a, 0x62, 0xe0, 0x94, 0x7b, 0x6e, 0xe8, 0xc8, 0x5e, 0x70, 0xee, 0x9a, 0xc1, 0x51, 0x60, 0x5d, 0xd5, 0x11, 0x84, 0x5b, 0x1d, 0x81, 0x65, 0x54, 0x46, 0x2a, 0xcd, 0xe1, 0x62, 0xea, 0x66, 0x91, 0x00, 0x9b, 0x9b, 0x31, 0xa0, 0xd0, 0xc8, 0x93, 0x05, 0x13, 0x55, 0x12, 0x82, 0x8f, 0x1c, 0x6c, 0x54, 0x99, 0x8b, 0x3e, 0x52, 0x90, 0x55, 0xe5, 0x2e, 0x78, 0x15, 0x4e, 0xc4, 0x84, 0x2a, 0x61, 0xa7, 0x01, 0xdf, 0xe5, 0xaa, 0xd4, 0x1c, 0x0d, 0x62, 0xb9, 0x46, 0x44, 0x4e, 0x14, 0x69, 0x9c, 0x99, 0x12, 0xb3, 0xd8, 0xac, 0xf0, 0x58, 0xa8, 0x85, 0xe1, 0x70, 0x6f, 0xe5, 0x61, 0x16, 0x87, 0xc3, 0xf5, 0x64, 0xaa, 0x19, 0x76, 0x2e, 0xf0, 0x9b, 0xa1, 0x6a, 0x94, 0x00, 0x4d, 0xa2, 0x2a, 0x60, 0x1a, 0xd6, 0x54, 0x35, 0xc5, 0xee, 0xa5, 0x96, 0x5a, 0xac, 0x8b, 0xa4, 0x26, 0x45, 0x1a, 0x89, 0xa9, 0x5c, 0x5a, 0x1c, 0x61, 0x24, 0xbe, 0x52, 0x59, 0x71, 0x88, 0x96, 0xba, 0x4a, 0x6d, 0x29, 0x26, 0x4b, 0x22, 0x2b, 0xb7, 0x39, 0x45, 0x2c, 0x31, 0xcf, 0x32, 0xaa, 0x1c, 0x33, 0xc4, 0xb8, 0xca, 0x88, 0x51, 0x64, 0x13, 0x81, 0xa7, 0xce, 0x69, 0xb6, 0x55, 0x04, 0x6e, 0x38, 0x44, 0x24, 0x62, 0x31, 0x78, 0x15, 0x1c, 0x9e, 0x18, 0x65, 0xe0, 0x6d, 0x84, 0x9a, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t correctnumberthree[] PROGMEM = {0x00, 0x00, 0x88, 0xd4, 0x2a, 0xa6, 0x45, 0xa4, 0xb5, 0x54, 0x6b, 0xdb, 0x4c, 0x81, 0x76, 0x44, 0xab, 0x7c, 0xaa, 0x82, 0xe8, 0xc9, 0xb4, 0x8c, 0xce, 0x2c, 0xc2, 0xa3, 0x20, 0xa2, 0xb3, 0x3c, 0x85, 0x94, 0xda, 0x82, 0xea, 0x2a, 0x8b, 0xdc, 0xfa, 0x0b, 0xd0, 0x24, 0xcd, 0xd1, 0x68, 0x32, 0x88, 0xa8, 0xb0, 0x80, 0x47, 0x09, 0xc4, 0xb3, 0x3d, 0x0c, 0x1f, 0x25, 0x48, 0xad, 0x4e, 0x15, 0xbc, 0x14, 0xaf, 0xb4, 0x26, 0x84, 0x88, 0x01, 0x66, 0x10, 0x53, 0x40, 0xf6, 0x25, 0x29, 0xf1, 0x45, 0xd5, 0x4a, 0x2d, 0x8f, 0x58, 0x4e, 0x0a, 0x4f, 0x89, 0xd8, 0x12, 0xbd, 0xb1, 0x32, 0x38, 0x66, 0xca, 0xf4, 0xc6, 0x49, 0xe7, 0x0a, 0x45, 0x12, 0x93, 0x2a, 0x92, 0x2a, 0x9e, 0xcc, 0x15, 0x29, 0x6f, 0x8a, 0x78, 0x12, 0x9f, 0xa3, 0xa2, 0x24, 0xd2, 0x89, 0x43, 0x8c, 0x6a, 0x67, 0x33, 0x27, 0xf2, 0x5e, 0xab, 0x49, 0xa4, 0x85, 0x4c, 0x78, 0xcd, 0x62, 0x91, 0x0a, 0x2c, 0xaf, 0x24, 0x2a, 0x42, 0x4d, 0xa5, 0xbc, 0x41, 0xf2, 0x2a, 0xb1, 0x2d, 0x0a, 0x50, 0xaf, 0x82, 0x85, 0x9a, 0x4a, 0x30, 0xab, 0x9d, 0x14, 0x6a, 0x41, 0x61, 0x3c, 0x66, 0x47, 0x08, 0x0f, 0xd1, 0x73, 0xae, 0x3b, 0x13, 0x74, 0xa4, 0xc8, 0x29, 0xf6, 0xdc, 0xe0, 0x92, 0x0d, 0xd7, 0xbc, 0x0e, 0x81, 0xa5, 0x62, 0xac, 0x63, 0x2a, 0x04, 0x97, 0x74, 0x01, 0x56, 0x8d, 0x88, 0xcc, 0x80, 0x2b, 0xd5, 0x18, 0xf0, 0xac, 0xbb, 0x00, 0x8e, 0x2c, 0x5f, 0x59, 0x10, 0x5d, 0x6d, 0x2e, 0xe4, 0x68, 0x41, 0x56, 0x97, 0x19, 0x91, 0x63, 0x78, 0x53, 0x9d, 0xee, 0x40, 0x9a, 0xa3, 0x64, 0x54, 0x7a, 0x00, 0x13, 0x2e, 0xe8, 0x1d, 0x26, 0x4a, 0xdf, 0xd8, 0xc0, 0xd5, 0x88, 0x8b, 0xa2, 0x60, 0x41, 0x15, 0x27, 0xa6, 0xae, 0x86, 0x29, 0x59, 0x64, 0x98, 0x46, 0x3a, 0x7a, 0xe2, 0xe5, 0xe6, 0x6e, 0xf2, 0x68, 0x51, 0xb7, 0x71, 0xba, 0xa9, 0xa3, 0x85, 0xd8, 0x4c, 0xed, 0xa2, 0x86, 0xae, 0x4a, 0x30, 0x67, 0x58, 0x0c, 0x2a, 0xc8, 0x95, 0xa1, 0x51, 0x53, 0x95, 0xe0, 0x7a, 0x86, 0x7a, 0x44, 0x56, 0x81, 0x17, 0x1e, 0x61, 0x8e, 0x8b, 0x66, 0x06, 0x67, 0x84, 0x38, 0x6a, 0xb9, 0x19, 0x54, 0xe9, 0x58, 0xa3, 0x65, 0xb6, 0x73, 0x57, 0x40, 0x85, 0x9e, 0xb6, 0x54, 0x17, 0x8d, 0x6c, 0xa8, 0x38, 0x78, 0x11, 0x3d, 0x63, 0x28, 0xe2, 0x48, 0x99, 0xad, 0x76, 0x53, 0x53, 0x25, 0x81, 0x3e, 0x5a, 0xdc, 0xa4, 0xaa, 0x02, 0xf8, 0xaa, 0x70, 0xb3, 0x62, 0x92, 0x22, 0xc5, 0x32, 0xc2, 0x16, 0x02, 0x9a, 0x36, 0x07, 0x06, 0x64, 0x19, 0x1d, 0x32, 0x6e, 0x3b, 0xc4, 0x35, 0x76, 0x52, 0x50, 0xa3, 0x8a, 0x16, 0x47, 0x49, 0x26, 0x5d, 0x2a, 0x8a, 0x6a, 0x0c, 0x99, 0x27, 0xa9, 0x18, 0x29, 0xb9, 0x64, 0xab, 0xa5, 0x72, 0x35, 0xe4, 0x91, 0x23, 0x97, 0x9a, 0x71, 0x83, 0x4b, 0x8a, 0x4c, 0x72, 0xd7, 0x09, 0x0f, 0x29, 0x30, 0xaa, 0x9b, 0x20, 0x52, 0x44, 0xc7, 0x78, 0x3e, 0x15, 0x6c, 0x48, 0x89, 0x8e, 0x1b, 0x41, 0x76, 0x2e, 0x61, 0xc2, 0x6e, 0x0d, 0xe1, 0x99, 0x18, 0x8a, 0xd8, 0x37, 0x42, 0x26, 0x62, 0xe0, 0xfa, 0x56, 0x59, 0x2e, 0x49, 0x81, 0x8c, 0xdd, 0x32, 0x3b, 0x28, 0x13, 0xcc, 0xb2, 0xca, 0x62, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t correctchoice[] PROGMEM = {0x00, 0x50, 0x52, 0xa5, 0x6d, 0x23, 0x19, 0xde, 0x11, 0xad, 0xb2, 0xa9, 0x74, 0xa2, 0x27, 0x33, 0x32, 0x3a, 0x33, 0x89, 0xac, 0x9c, 0x89, 0xca, 0xf4, 0x12, 0xd2, 0x6a, 0x01, 0xa6, 0x2a, 0xcd, 0x54, 0x6b, 0x37, 0x40, 0xb7, 0xf6, 0x44, 0x0a, 0xe8, 0x40, 0xfd, 0x94, 0x81, 0x78, 0xb6, 0x87, 0xe1, 0xa3, 0x04, 0xa1, 0xd9, 0xa1, 0x82, 0x8f, 0xec, 0x95, 0xd6, 0x84, 0x10, 0x69, 0xc5, 0xb0, 0xa4, 0x91, 0x2e, 0xc9, 0x00, 0xc5, 0x96, 0xa7, 0x34, 0xc6, 0x10, 0x1d, 0x8f, 0x3c, 0x62, 0x35, 0x29, 0x2c, 0xa5, 0x62, 0x4b, 0xd4, 0xc6, 0x8c, 0xe4, 0x98, 0x25, 0xd3, 0x1b, 0x3b, 0x9d, 0x2b, 0x14, 0x49, 0x2e, 0xac, 0x48, 0xaa, 0xb8, 0x32, 0x53, 0xb9, 0xa2, 0x28, 0xe6, 0x49, 0x7d, 0xf1, 0xf2, 0x92, 0x48, 0x27, 0x0e, 0x31, 0xaa, 0x9c, 0x2d, 0x9f, 0x28, 0x04, 0xab, 0x62, 0x91, 0x9a, 0x52, 0xe9, 0x34, 0x5b, 0x44, 0xaa, 0x08, 0x7d, 0xf4, 0x18, 0x15, 0xcb, 0x24, 0xf3, 0xae, 0xbc, 0x52, 0x64, 0x13, 0xe0, 0x38, 0x55, 0x01, 0xec, 0x1e, 0x9c, 0xa2, 0x44, 0xd9, 0x6b, 0xdc, 0x62, 0x91, 0xb5, 0xd4, 0xde, 0x91, 0x80, 0x43, 0x11, 0xca, 0x7a, 0x5b, 0x4d, 0x2c, 0xd5, 0xd0, 0x88, 0x2b, 0x33, 0x39, 0x28, 0xca, 0x37, 0xc7, 0xd4, 0x70, 0xeb, 0x23, 0x70, 0xd5, 0xaa, 0xc8, 0x04, 0x38, 0x50, 0x14, 0x01, 0x97, 0x87, 0x12, 0x60, 0x70, 0x8d, 0x91, 0x46, 0x55, 0xd9, 0x1a, 0xa6, 0x4f, 0x1e, 0x6c, 0x54, 0x49, 0x08, 0xbe, 0xf2, 0xc9, 0x83, 0xac, 0x2e, 0x33, 0xc1, 0x2d, 0xe7, 0x22, 0xc6, 0x4d, 0x49, 0x9b, 0x02, 0x8c, 0x49, 0x51, 0x95, 0xc7, 0x4a, 0xf0, 0xcb, 0x59, 0x5c, 0xb9, 0x69, 0xa0, 0xd0, 0xc9, 0xb6, 0x38, 0x0c, 0x98, 0x55, 0x55, 0x01, 0xab, 0xb4, 0x09, 0x60, 0x94, 0xf6, 0x54, 0x45, 0xa3, 0x1e, 0x11, 0xb6, 0x46, 0xce, 0x53, 0x84, 0xb8, 0x95, 0x1c, 0xb2, 0xe8, 0x95, 0x14, 0x5e, 0x60, 0x2a, 0x43, 0x96, 0xbd, 0x4c, 0x32, 0x02, 0x0c, 0x49, 0xb4, 0x0a, 0x33, 0x33, 0xdc, 0x32, 0x96, 0xbc, 0x43, 0x9c, 0x6c, 0x49, 0xa8, 0xaf, 0x6e, 0x62, 0x6a, 0x21, 0x81, 0xaa, 0xba, 0xc3, 0x88, 0x86, 0xcc, 0x33, 0xa5, 0x9a, 0xb6, 0x1c, 0x92, 0x25, 0x42, 0xd8, 0xdd, 0x32, 0x02, 0x8e, 0x08, 0x47, 0xc0, 0xd7, 0x16, 0x08, 0x78, 0xc6, 0x1d, 0x01, 0x5f, 0xbb, 0x21, 0xe0, 0x6b, 0x33, 0x04, 0x7c, 0xe1, 0xce, 0x9a, 0x06, 0xdc, 0x3d, 0x34, 0x14, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff};
const uint8_t correctnumberfive[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x82, 0xe2, 0x26, 0x36, 0x95, 0xe9, 0x0d, 0xc1, 0x68, 0xdb, 0x4a, 0x05, 0x77, 0x44, 0xab, 0x7c, 0xb2, 0x82, 0xe8, 0xc9, 0x94, 0x88, 0xca, 0x2c, 0xc1, 0xa3, 0xc4, 0x7c, 0xa2, 0x3c, 0x05, 0x0b, 0x20, 0x01, 0xeb, 0xd6, 0x7f, 0x48, 0x26, 0xa9, 0x36, 0x57, 0x15, 0x61, 0x44, 0xbb, 0x07, 0x3a, 0x4a, 0xa0, 0x96, 0xed, 0x6e, 0xf8, 0x28, 0x41, 0x6a, 0x4d, 0x8a, 0x90, 0xa6, 0x58, 0xa5, 0x35, 0x21, 0x84, 0x0d, 0x30, 0xbc, 0x86, 0x00, 0x92, 0x2f, 0x29, 0xb1, 0xe9, 0xec, 0x96, 0x1a, 0x69, 0x24, 0x72, 0x51, 0x7a, 0x4a, 0xc4, 0x92, 0xea, 0x8d, 0x1d, 0xc1, 0x31, 0x53, 0xa6, 0x37, 0x4e, 0x3a, 0x57, 0x68, 0x92, 0x1c, 0x54, 0x91, 0x54, 0xf1, 0x64, 0xbe, 0x48, 0x79, 0x53, 0xa8, 0x93, 0x84, 0x1c, 0x15, 0x29, 0x91, 0x4e, 0x1c, 0xa2, 0x57, 0x9b, 0x98, 0x19, 0x91, 0x73, 0x9a, 0x4d, 0x62, 0xcd, 0xa5, 0xd2, 0x5b, 0x14, 0x8b, 0x14, 0x80, 0x94, 0x27, 0x20, 0x35, 0x29, 0xb6, 0x59, 0x0e, 0xda, 0x95, 0x93, 0xd2, 0x33, 0x09, 0xa5, 0x35, 0x5b, 0x02, 0x36, 0x49, 0x82, 0x7b, 0xef, 0x2a, 0xe1, 0x25, 0x06, 0x4e, 0xb5, 0xe7, 0x86, 0xae, 0xb4, 0x14, 0xc5, 0x3d, 0xaf, 0x42, 0x50, 0xa9, 0x2c, 0xa8, 0xa8, 0x71, 0x43, 0xa5, 0x5f, 0x80, 0x55, 0x3d, 0x2c, 0x33, 0xe0, 0x69, 0x35, 0x01, 0x3c, 0xeb, 0xce, 0x80, 0x2d, 0xca, 0x4e, 0xee, 0x65, 0x77, 0x9b, 0x0b, 0x39, 0x5a, 0x90, 0xd5, 0x65, 0x46, 0xf4, 0x18, 0xce, 0x54, 0xa7, 0x3b, 0x90, 0xe4, 0x32, 0x15, 0x15, 0x16, 0xc0, 0x98, 0x0b, 0x66, 0x87, 0xb1, 0x32, 0x73, 0x16, 0x34, 0xb1, 0x12, 0xe2, 0x28, 0x58, 0x40, 0xc7, 0x89, 0x9a, 0xea, 0x65, 0x78, 0x16, 0xe1, 0x66, 0x26, 0x8f, 0x9e, 0x44, 0xb9, 0xba, 0x9b, 0x3a, 0x5a, 0x34, 0xad, 0x9c, 0x6e, 0xea, 0xa8, 0x21, 0x35, 0x53, 0xbb, 0xa8, 0xa2, 0xb1, 0x14, 0xc2, 0x11, 0x31, 0x83, 0x0a, 0x4a, 0x64, 0x48, 0x34, 0x54, 0x05, 0x38, 0x9e, 0x61, 0x5a, 0x43, 0x95, 0xa0, 0x8a, 0x65, 0x87, 0x9b, 0x92, 0xd9, 0x4e, 0x5e, 0xc9, 0x31, 0x47, 0x66, 0x2a, 0x7b, 0x15, 0x26, 0x28, 0xa9, 0x6c, 0xd8, 0x69, 0x54, 0xa1, 0x65, 0xba, 0x50, 0x67, 0x60, 0xc9, 0x91, 0xe9, 0xc8, 0x99, 0x85, 0x15, 0x4a, 0x8e, 0x93, 0x4c, 0x38, 0x45, 0x0a, 0x15, 0x14, 0x96, 0x95, 0x9e, 0x18, 0x01, 0x5d, 0xab, 0x12, 0x60, 0x18, 0x37, 0x06, 0x34, 0x6d, 0x31, 0xf2, 0xd0, 0x5a, 0xa8, 0x22, 0xd0, 0xc9, 0x43, 0x6b, 0xc6, 0x72, 0xc3, 0x37, 0x3f, 0x79, 0xc8, 0x85, 0x5c, 0x6e, 0xf4, 0xe4, 0xa1, 0x38, 0x49, 0xba, 0xd8, 0x95, 0xfb, 0x6e, 0xae, 0xee, 0x82, 0x4f, 0xee, 0xb3, 0xa7, 0x98, 0x8b, 0x5d, 0x99, 0x4d, 0x51, 0x1c, 0x4a, 0x6e, 0xa4, 0x2a, 0x46, 0xa9, 0x2b, 0xb9, 0x90, 0x82, 0x1c, 0x69, 0xae, 0xe2, 0x5d, 0x06, 0x4c, 0x77, 0xbb, 0x45, 0x49, 0x69, 0x13, 0xa2, 0xea, 0x6e, 0x19, 0x01, 0xcb, 0xb9, 0x12, 0x60, 0x84, 0x30, 0x57, 0x15, 0xe1, 0xe1, 0xa6, 0x52, 0x50, 0x9f, 0xb9, 0x44, 0x98, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t correctfullcount[] PROGMEM = {0x00, 0x00, 0x80, 0x08, 0xad, 0x62, 0x5b, 0x84, 0x5a, 0x4b, 0xb5, 0xb6, 0xcd, 0x14, 0x68, 0x47, 0xb4, 0xca, 0xa7, 0x2a, 0x88, 0x9e, 0x4c, 0xcb, 0xe8, 0xcc, 0x22, 0x3c, 0x0a, 0x22, 0x3a, 0xcb, 0x53, 0x48, 0xa9, 0x2d, 0xa8, 0xae, 0xb2, 0xc8, 0xad, 0xbf, 0x00, 0x4d, 0xd2, 0x1c, 0x8d, 0x26, 0x83, 0x88, 0x0a, 0x0b, 0x78, 0x94, 0x40, 0x3c, 0xdb, 0xc3, 0xf0, 0x51, 0x82, 0xd4, 0xea, 0x54, 0xc1, 0x4b, 0xf1, 0x4a, 0x6b, 0x42, 0x89, 0x18, 0x60, 0x06, 0x31, 0x05, 0x54, 0x5f, 0x92, 0x12, 0x5f, 0x54, 0xad, 0xd4, 0xf2, 0x88, 0xe5, 0xa4, 0xf0, 0x94, 0x88, 0x2d, 0xd1, 0x1b, 0x2b, 0x83, 0x63, 0x96, 0x4c, 0x6f, 0x98, 0x74, 0xae, 0x50, 0x24, 0x31, 0xa9, 0x22, 0xa9, 0xe2, 0xc9, 0x5c, 0x91, 0xf2, 0xa6, 0x88, 0x27, 0xf1, 0x39, 0x2a, 0x4a, 0x22, 0x9d, 0x38, 0xc4, 0xa8, 0x76, 0x36, 0x73, 0x22, 0xef, 0xb5, 0x9a, 0x44, 0x5a, 0xc8, 0x84, 0xd7, 0x2c, 0x16, 0xa9, 0xc0, 0xf2, 0x4a, 0xa2, 0x22, 0xd4, 0x54, 0xca, 0x1b, 0x24, 0xaf, 0x12, 0xdb, 0xa2, 0x00, 0xf5, 0x2a, 0x58, 0xa8, 0xa9, 0x04, 0xb3, 0xda, 0x49, 0xa1, 0x16, 0x64, 0xc6, 0x63, 0x76, 0x94, 0xf0, 0x10, 0x3d, 0xe7, 0xba, 0x33, 0x41, 0x47, 0x0a, 0x9c, 0x62, 0xcf, 0x0c, 0x1d, 0x59, 0x0b, 0xad, 0x29, 0x37, 0x39, 0x0a, 0x24, 0x27, 0x2b, 0x4d, 0x70, 0x6b, 0x1b, 0x20, 0xb7, 0xcc, 0x48, 0x04, 0x38, 0xc2, 0x8d, 0x00, 0x8b, 0x69, 0x8c, 0x24, 0xaa, 0xc8, 0x96, 0x30, 0x7c, 0xf2, 0x60, 0xa3, 0x4a, 0x42, 0xf0, 0x91, 0xa3, 0x8e, 0x2a, 0x73, 0x21, 0x47, 0x0a, 0xb2, 0xba, 0xcc, 0x85, 0xb4, 0x82, 0xcb, 0x18, 0x57, 0x25, 0xe3, 0x4c, 0x22, 0x6d, 0xd4, 0x35, 0x89, 0x33, 0xa5, 0xd0, 0x32, 0x35, 0x27, 0xa9, 0x4d, 0x44, 0xcc, 0x4b, 0x25, 0xab, 0xa4, 0x09, 0xd5, 0x08, 0x95, 0xad, 0xd2, 0x2e, 0x54, 0xcc, 0xc5, 0x0a, 0x01, 0x8a, 0x89, 0x48, 0xb1, 0x3e, 0x21, 0xd8, 0x65, 0x7a, 0xa4, 0x7a, 0x97, 0xe0, 0x54, 0xa0, 0x96, 0xc9, 0xd9, 0x02, 0x5d, 0x81, 0x8a, 0xe4, 0xd4, 0x2e, 0xf0, 0x14, 0x68, 0xb9, 0x31, 0xdb, 0xa0, 0x1b, 0x28, 0x65, 0xb4, 0x15, 0x68, 0x0f, 0x31, 0x51, 0x82, 0x3e, 0x82, 0xd9, 0x56, 0x10, 0x50, 0xac, 0x7a, 0x8d, 0x4a, 0x5a, 0x94, 0x1a, 0x87, 0x46, 0x1a, 0xb9, 0x09, 0xee, 0xee, 0x64, 0xf5, 0x24, 0xde, 0x85, 0x5b, 0x88, 0x98, 0x93, 0x04, 0x5d, 0x21, 0xe1, 0x66, 0x56, 0xe2, 0x43, 0x19, 0x57, 0x88, 0x6e, 0x89, 0x4e, 0xa1, 0x58, 0x11, 0xba, 0xc4, 0xbc, 0x86, 0x52, 0x7a, 0x24, 0x17, 0x83, 0xe1, 0x8e, 0xed, 0x95, 0x55, 0x0c, 0x4e, 0x05, 0x64, 0xd9, 0x16, 0x09, 0xb8, 0x13, 0x2a, 0x5e, 0xd7, 0x64, 0x09, 0xb9, 0x7b, 0x98, 0x6c, 0x02, 0x0c, 0x18, 0xee, 0xaa, 0x49, 0x54, 0xcc, 0x35, 0x10, 0xea, 0x0b, 0x52, 0x75, 0x73, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t players1gameloses[] PROGMEM = {0x00, 0x00, 0x28, 0x8d, 0xd4, 0xdc, 0xc2, 0x6c, 0xa7, 0x3a, 0x33, 0xcd, 0x20, 0x8e, 0x1d, 0x92, 0x88, 0xa3, 0x8c, 0xd9, 0x0a, 0x02, 0x92, 0x88, 0x5e, 0xa1, 0xf3, 0xa3, 0x6a, 0x65, 0xf8, 0x84, 0x41, 0x77, 0x3b, 0xa7, 0x99, 0x13, 0x45, 0x15, 0x93, 0xee, 0x64, 0x4e, 0x94, 0x84, 0x4e, 0xa5, 0x93, 0x39, 0x51, 0x12, 0x5a, 0x33, 0x4e, 0xe4, 0x44, 0x49, 0x71, 0x4d, 0xab, 0x90, 0x13, 0x45, 0xc3, 0x3d, 0xcd, 0x46, 0x4f, 0xe8, 0x83, 0x4c, 0xba, 0x06, 0x5d, 0x91, 0xcd, 0xd2, 0x61, 0x1a, 0xb4, 0xb1, 0x6c, 0x73, 0x9b, 0x59, 0x85, 0xc2, 0x93, 0x47, 0xa9, 0xee, 0x35, 0x92, 0x80, 0x9f, 0x1a, 0x74, 0xd4, 0x0c, 0x19, 0x7e, 0xa1, 0x50, 0x15, 0x2b, 0xe4, 0xf4, 0x09, 0xd2, 0xba, 0xad, 0x91, 0x99, 0x19, 0x04, 0xeb, 0x42, 0x4e, 0xe6, 0x4b, 0x09, 0x4c, 0x18, 0x39, 0x99, 0xc9, 0x61, 0xec, 0x15, 0xa8, 0xe5, 0x20, 0x47, 0x70, 0x85, 0xe5, 0x94, 0x81, 0xd2, 0x45, 0xa1, 0x89, 0x4a, 0x06, 0xe2, 0x34, 0x9b, 0xa6, 0x2e, 0x19, 0xc8, 0x9b, 0xcc, 0x5e, 0xa7, 0x28, 0xc0, 0x5c, 0x2b, 0xf9, 0xc4, 0x23, 0x73, 0xd9, 0x15, 0xe2, 0xa5, 0x8e, 0xc4, 0xf5, 0x76, 0xaa, 0x86, 0x3c, 0x22, 0x35, 0x53, 0xa5, 0x5c, 0xf2, 0x88, 0x4c, 0x77, 0xb7, 0x6a, 0xa8, 0x23, 0x72, 0xde, 0xd9, 0x6e, 0x05, 0x47, 0x2e, 0xf0, 0x66, 0x86, 0x07, 0x6c, 0x55, 0x00, 0x9e, 0x35, 0x11, 0x4b, 0x00, 0x1d, 0x48, 0x0d, 0xd7, 0x83, 0xae, 0x52, 0x0d, 0x34, 0x5c, 0x87, 0xba, 0x46, 0x2d, 0x60, 0x73, 0xb1, 0xdd, 0x74, 0x0d, 0x21, 0xc5, 0x85, 0xf6, 0xc2, 0xdd, 0x89, 0x26, 0x17, 0xca, 0x0f, 0x73, 0x15, 0x92, 0x7c, 0x06, 0x3a, 0xbb, 0x2c, 0xb2, 0x49, 0x13, 0x32, 0x4d, 0x37, 0xdb, 0xa4, 0xb7, 0xd4, 0x2d, 0xcc, 0xec, 0x24, 0xc6, 0xfb, 0x8a, 0x72, 0x93, 0x72, 0x72, 0x69, 0xb7, 0x5c, 0xcc, 0xd0, 0xd1, 0x1c, 0xaf, 0x6a, 0x67, 0x43, 0xcb, 0xf6, 0x4c, 0xe2, 0x86, 0x05, 0x3b, 0x17, 0x89, 0xea, 0x75, 0x14, 0x57, 0x82, 0x42, 0x28, 0x5d, 0x55, 0xce, 0x6a, 0x32, 0x91, 0xe8, 0x32, 0xb2, 0x47, 0x49, 0x54, 0x63, 0x4a, 0x89, 0x5e, 0xf9, 0xc8, 0x99, 0x4b, 0x74, 0x2a, 0xd9, 0x23, 0x47, 0xa6, 0xd9, 0xc1, 0xd4, 0xae, 0x72, 0xb4, 0x48, 0xa5, 0xc6, 0x99, 0xde, 0xb1, 0x12, 0x95, 0xdc, 0x64, 0x6a, 0x33, 0x68, 0xa9, 0xa7, 0xd2, 0x13, 0x44, 0xbd, 0x14, 0x5c, 0xc4, 0xa4, 0x91, 0x55, 0x53, 0x02, 0x5f, 0xe3, 0xa2, 0x95, 0x94, 0x0e, 0x62, 0xac, 0x88, 0x59, 0x36, 0x0a, 0x08, 0xb1, 0x26, 0x1a, 0x5a, 0x15, 0x20, 0xd6, 0x3a, 0xb3, 0x15, 0x51, 0x80, 0xd6, 0xad, 0xa2, 0x91, 0x99, 0x0f, 0x52, 0x8d, 0x4b, 0x98, 0x06, 0x00, 0x78, 0xff};
const uint8_t players2gameloses[] PROGMEM = {0x00, 0x00, 0x00, 0x80, 0x80, 0xa6, 0xb8, 0x4b, 0x9f, 0x45, 0xb4, 0xab, 0xd8, 0x22, 0x40, 0xe1, 0xd1, 0x0c, 0xf0, 0xbd, 0xed, 0x04, 0xb6, 0x97, 0x70, 0xb4, 0x91, 0x13, 0x79, 0x37, 0xa5, 0x9a, 0x46, 0x4e, 0xe2, 0x7d, 0x75, 0x86, 0x13, 0x39, 0x69, 0x34, 0x56, 0x5d, 0x26, 0xf8, 0x64, 0xd1, 0x70, 0x55, 0xab, 0xa1, 0x93, 0x45, 0x8b, 0x95, 0xad, 0x81, 0x4e, 0x16, 0x3c, 0x4e, 0x86, 0x06, 0xda, 0xd9, 0x28, 0xb4, 0xa5, 0xac, 0xe5, 0x18, 0xae, 0x45, 0x96, 0xba, 0x46, 0x23, 0x12, 0x49, 0x39, 0xf6, 0x6e, 0x95, 0x28, 0x80, 0x4e, 0x3d, 0x04, 0x70, 0x5c, 0x18, 0x01, 0xba, 0x0b, 0x29, 0x29, 0xf6, 0x9d, 0x66, 0x11, 0x71, 0x88, 0x38, 0xac, 0xab, 0xc5, 0xc0, 0x26, 0x11, 0x77, 0xce, 0x11, 0x03, 0x92, 0x82, 0xcc, 0x27, 0x6a, 0xcc, 0x08, 0x2a, 0xf0, 0x1f, 0x10, 0x31, 0x32, 0xe8, 0x48, 0x7e, 0xa3, 0xda, 0xc4, 0xa1, 0x4a, 0xde, 0x69, 0xe6, 0x23, 0x8f, 0x64, 0xe9, 0x74, 0x05, 0x47, 0x3c, 0xa2, 0xa6, 0xd3, 0x99, 0x62, 0xa9, 0xe5, 0x9c, 0x4c, 0xb5, 0x9b, 0xa1, 0x54, 0x46, 0xe0, 0x5d, 0xed, 0x95, 0x08, 0x70, 0x11, 0x6a, 0x29, 0x33, 0xf0, 0xca, 0xd0, 0x50, 0x4b, 0x76, 0xb8, 0x6a, 0xd4, 0x02, 0x35, 0x5d, 0xe3, 0xad, 0x92, 0x28, 0xd4, 0x6c, 0x89, 0xba, 0x8a, 0x33, 0x50, 0x08, 0x01, 0xab, 0xcc, 0xb0, 0xd8, 0x86, 0x8b, 0x48, 0xd5, 0xdd, 0xed, 0xa0, 0xdc, 0x12, 0xb7, 0x70, 0xb7, 0x13, 0x18, 0xef, 0x2b, 0xca, 0x4d, 0xca, 0xc9, 0xa5, 0xdd, 0x0a, 0xb1, 0x40, 0x47, 0xb3, 0xa2, 0xba, 0x8d, 0x0d, 0x2d, 0x36, 0x50, 0x8d, 0x1d, 0x16, 0xe4, 0x5c, 0x60, 0xa6, 0x5a, 0x41, 0x6a, 0x08, 0x02, 0xa6, 0x0a, 0x33, 0x25, 0xa3, 0xad, 0x84, 0xb3, 0xd3, 0xa4, 0x1e, 0x25, 0x11, 0x89, 0x6e, 0x25, 0x72, 0xe4, 0xcc, 0xd9, 0xbb, 0x8d, 0xe8, 0x95, 0x8f, 0x1c, 0x99, 0xe6, 0x84, 0x50, 0x3d, 0x4a, 0x60, 0x5a, 0xed, 0x4c, 0xed, 0x6a, 0xcb, 0x8a, 0x94, 0x73, 0x82, 0xa9, 0x0d, 0x3f, 0x50, 0xa9, 0x0d, 0xa2, 0xd7, 0x52, 0x4f, 0xa5, 0x27, 0x88, 0x7a, 0xc9, 0xb9, 0x88, 0x4e, 0x63, 0x6b, 0xa6, 0x04, 0x21, 0xc6, 0x45, 0x23, 0x2b, 0x1f, 0xa4, 0x58, 0x26, 0xb7, 0xac, 0x14, 0x10, 0x63, 0x55, 0x34, 0xb4, 0x2a, 0x40, 0xaa, 0x35, 0x92, 0xd8, 0xa2, 0x00, 0xad, 0x47, 0x59, 0x2d, 0x33, 0x1f, 0xe4, 0x1a, 0x93, 0x90, 0x8c, 0x62, 0x50, 0xa6, 0xd2, 0xc2, 0x14, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t players3gameloses[] PROGMEM = {0x00, 0x05, 0x2b, 0x4c, 0xab, 0x8d, 0x1b, 0x87, 0xa6, 0x90, 0xce, 0x50, 0xb5, 0x1c, 0xfc, 0x2a, 0x23, 0x5d, 0x3d, 0xd2, 0x09, 0x5c, 0xac, 0x14, 0x4b, 0x31, 0x27, 0x08, 0x36, 0x2a, 0xdc, 0xc5, 0x1e, 0x2a, 0x28, 0xef, 0x0e, 0x17, 0x7a, 0xa9, 0x43, 0x45, 0x2d, 0x55, 0x6d, 0x86, 0x0f, 0x15, 0x1c, 0x77, 0x97, 0x06, 0x3e, 0x94, 0x8f, 0x32, 0x95, 0x56, 0xf8, 0x30, 0x2e, 0x48, 0x57, 0x49, 0xa0, 0x93, 0x08, 0x53, 0x1d, 0x6e, 0xa4, 0x4a, 0x01, 0x42, 0x95, 0x85, 0x40, 0x55, 0x09, 0x0f, 0x95, 0x91, 0x42, 0x5a, 0x00, 0x4d, 0x5b, 0x16, 0x22, 0xc9, 0x28, 0x77, 0x93, 0x13, 0xda, 0xa8, 0x3c, 0xcd, 0xd9, 0xb2, 0xc9, 0xb0, 0x77, 0xd3, 0xc8, 0x38, 0x25, 0xc3, 0x5e, 0x2a, 0x5b, 0x1d, 0x1e, 0x31, 0x48, 0xf6, 0x9a, 0x08, 0x75, 0xc4, 0x82, 0x45, 0xf3, 0x32, 0xe0, 0x12, 0x33, 0x14, 0xeb, 0x0f, 0xc1, 0x4b, 0x0c, 0x54, 0xe2, 0xd6, 0x85, 0x0c, 0x89, 0x4b, 0x9b, 0x0b, 0x11, 0x3b, 0x64, 0x2e, 0x62, 0x56, 0xc5, 0xea, 0x92, 0x98, 0xde, 0x76, 0xf6, 0x8a, 0x43, 0x62, 0xf2, 0x4a, 0x38, 0x47, 0x2c, 0x41, 0x8b, 0x73, 0xf1, 0x2c, 0x79, 0x52, 0xc3, 0xb7, 0xcc, 0xac, 0xe2, 0x4a, 0xb9, 0xb9, 0x10, 0x8f, 0x90, 0x2b, 0x65, 0x7a, 0xd3, 0xc4, 0x23, 0xb5, 0x8c, 0xd1, 0xad, 0x36, 0x35, 0x98, 0x4a, 0x0f, 0xa2, 0xab, 0x32, 0x12, 0x01, 0x16, 0x20, 0x2b, 0x55, 0x05, 0x96, 0x91, 0x66, 0x6a, 0xe5, 0x8e, 0x44, 0x8f, 0x6a, 0xa0, 0xa1, 0x29, 0xb2, 0x95, 0x12, 0x81, 0x9a, 0x6d, 0x60, 0x57, 0x71, 0x16, 0x4a, 0x02, 0xa4, 0x9d, 0xe9, 0x16, 0xd9, 0x34, 0x16, 0xba, 0x65, 0x78, 0x5c, 0x94, 0x05, 0xa4, 0xee, 0xee, 0xb1, 0x03, 0x13, 0x5c, 0x45, 0xb9, 0x4b, 0x39, 0xb9, 0x32, 0x53, 0xa1, 0x1a, 0xe8, 0x68, 0x5a, 0x75, 0x97, 0x4a, 0xa0, 0x63, 0x04, 0x6a, 0xb1, 0xc3, 0x82, 0x82, 0x03, 0x4c, 0xf5, 0x28, 0xc8, 0x71, 0x3e, 0x23, 0x3a, 0x69, 0xae, 0x64, 0xc4, 0x85, 0x51, 0x96, 0x9b, 0xdc, 0xa3, 0x24, 0xa2, 0x31, 0xa5, 0x44, 0xaf, 0x7c, 0xe4, 0xcc, 0x39, 0x3b, 0x95, 0xec, 0x91, 0x13, 0x93, 0x9c, 0x14, 0x72, 0x47, 0x89, 0x4c, 0x73, 0x82, 0xa9, 0x5d, 0x6d, 0x9b, 0xcb, 0x8f, 0x94, 0x6b, 0x92, 0xa9, 0xb5, 0x24, 0x50, 0xee, 0x35, 0xa2, 0x5e, 0x0a, 0xc9, 0xbd, 0xdb, 0x59, 0x9a, 0x2b, 0x81, 0xaf, 0x76, 0xd5, 0x48, 0xca, 0x07, 0x39, 0x56, 0xd8, 0x2d, 0x1b, 0x15, 0xc4, 0x58, 0x15, 0x33, 0xad, 0x0a, 0x10, 0x6b, 0x8d, 0x35, 0xb2, 0x28, 0x40, 0xef, 0x56, 0x91, 0xc8, 0xac, 0x00, 0xb5, 0xda, 0xc4, 0x2d, 0xa3, 0x18, 0xd4, 0xa9, 0x34, 0x33, 0x05, 0x00, 0xff};
const uint8_t players4gameloses[] PROGMEM = {0x80, 0x80, 0x26, 0xa5, 0x53, 0x19, 0x71, 0x94, 0x33, 0xc5, 0x0e, 0x6e, 0xe2, 0x51, 0xae, 0x2a, 0x25, 0xe4, 0x51, 0x57, 0xaa, 0xba, 0xed, 0x13, 0x7a, 0x37, 0xa1, 0xd2, 0x86, 0x4f, 0x14, 0x74, 0x75, 0x4a, 0x88, 0x39, 0x51, 0x94, 0x36, 0x99, 0x46, 0xe6, 0x44, 0x89, 0x6b, 0x4f, 0x05, 0x99, 0x13, 0x25, 0x29, 0x35, 0x6d, 0x44, 0x4e, 0x14, 0x15, 0xd7, 0x8c, 0x08, 0x3d, 0x61, 0x70, 0x3c, 0x95, 0x62, 0x64, 0x45, 0x2e, 0xc9, 0x84, 0x6b, 0xd0, 0x15, 0xa9, 0x2a, 0x93, 0xce, 0x85, 0x57, 0xcc, 0x8a, 0x74, 0x19, 0x9b, 0x1a, 0x39, 0x67, 0x96, 0x19, 0x1e, 0xa5, 0xa5, 0x4d, 0xa9, 0x99, 0x87, 0x15, 0x97, 0x36, 0xa1, 0x66, 0x66, 0xb6, 0x11, 0x50, 0x75, 0xa5, 0xc3, 0xc5, 0x0e, 0x43, 0x8b, 0xc6, 0x89, 0x64, 0xcf, 0x15, 0xb2, 0x6a, 0x24, 0x92, 0x7f, 0x15, 0xec, 0x0c, 0xd1, 0x74, 0xf5, 0x58, 0xbd, 0x3d, 0xc4, 0x30, 0xf4, 0x61, 0x8f, 0x91, 0x10, 0xcb, 0xd0, 0xd3, 0xcd, 0x2a, 0x25, 0x2c, 0xd3, 0xa8, 0x4d, 0xe6, 0x18, 0x50, 0x68, 0x45, 0xaf, 0x41, 0xbb, 0x44, 0xa1, 0x05, 0xbd, 0x61, 0x8a, 0x09, 0xc5, 0xe4, 0xf4, 0x9b, 0xd5, 0x27, 0x0c, 0x43, 0xa2, 0x69, 0x75, 0xaf, 0x79, 0x64, 0x8f, 0x7a, 0x2c, 0x34, 0xc2, 0x11, 0x25, 0x9b, 0x8e, 0xd0, 0x48, 0x2d, 0x63, 0x74, 0xaa, 0x4d, 0x0d, 0xa5, 0x32, 0x80, 0xe8, 0xaa, 0x88, 0x44, 0x80, 0x05, 0xc8, 0x4a, 0x95, 0x40, 0x64, 0xa4, 0x99, 0x5a, 0xb2, 0xc3, 0x55, 0xa3, 0x16, 0x68, 0x68, 0x8a, 0x6c, 0xa5, 0x44, 0xa0, 0xc6, 0x2a, 0x34, 0x95, 0x9c, 0x85, 0x92, 0x00, 0x69, 0x67, 0x86, 0xd9, 0x36, 0x75, 0x40, 0xaa, 0xe1, 0x6e, 0x17, 0xe5, 0x8e, 0x98, 0x85, 0x7b, 0xec, 0xc0, 0x04, 0x57, 0x51, 0xe1, 0x52, 0x4e, 0x2e, 0xed, 0xa6, 0xab, 0x19, 0x3a, 0x9a, 0x91, 0xdd, 0xad, 0x12, 0x68, 0x99, 0x81, 0x6a, 0xec, 0x88, 0x20, 0xe7, 0x00, 0x5b, 0x3d, 0x82, 0xe2, 0x42, 0xa0, 0x31, 0x77, 0x9a, 0x29, 0x19, 0x4d, 0xa1, 0x94, 0x15, 0x26, 0xf7, 0x28, 0x89, 0xa8, 0x4f, 0x0b, 0x91, 0x23, 0x67, 0x26, 0xde, 0x6d, 0x44, 0x4f, 0x9e, 0x39, 0x47, 0x97, 0x12, 0x39, 0x72, 0x64, 0x9a, 0x9d, 0x4c, 0xee, 0x2a, 0x47, 0x8b, 0x54, 0x6a, 0x9c, 0xe8, 0x1d, 0x33, 0x51, 0xce, 0x29, 0xa1, 0x36, 0xfc, 0x48, 0xb9, 0x36, 0x99, 0x7a, 0x4b, 0x02, 0xe5, 0x99, 0x60, 0x6a, 0x25, 0x97, 0xc2, 0xbb, 0x9c, 0xa5, 0xb9, 0x00, 0xb8, 0x98, 0x10, 0x89, 0xa4, 0x7c, 0x90, 0x62, 0x99, 0x43, 0xb2, 0x51, 0x40, 0x88, 0x55, 0x31, 0xd3, 0xaa, 0x00, 0xa1, 0xd6, 0x59, 0x22, 0x8b, 0x02, 0xd4, 0x1e, 0x13, 0xb1, 0xcc, 0x4a, 0x50, 0x6a, 0x4c, 0xdc, 0x34, 0x8a, 0x41, 0x99, 0x4e, 0x73, 0x53, 0x00, 0xff};
const uint8_t players5gameloses[] PROGMEM = {0x00, 0x00, 0x00, 0x04, 0x28, 0x52, 0x3a, 0x55, 0x85, 0x47, 0x99, 0xaa, 0x6d, 0x04, 0x14, 0x1e, 0xad, 0x00, 0xbf, 0x42, 0x4f, 0x68, 0x4b, 0x1b, 0x7b, 0x1b, 0x39, 0xb1, 0x77, 0xd3, 0xae, 0x61, 0xe4, 0x24, 0xde, 0x55, 0x57, 0x3a, 0x91, 0x93, 0x46, 0xad, 0xd5, 0x65, 0x82, 0x4f, 0x16, 0x0d, 0x55, 0xb5, 0x1a, 0x5a, 0x59, 0x74, 0x58, 0xd9, 0x12, 0x68, 0x65, 0x21, 0xd0, 0x64, 0x48, 0xa0, 0x95, 0xbb, 0xc8, 0x5d, 0xce, 0x01, 0x87, 0xa2, 0x9a, 0x64, 0x05, 0x96, 0x2c, 0x15, 0x4c, 0x61, 0x1e, 0x22, 0x45, 0x00, 0x91, 0x88, 0x23, 0xa0, 0x73, 0x53, 0x08, 0x58, 0xe1, 0x11, 0xe9, 0x16, 0xfb, 0x24, 0x21, 0xae, 0xb1, 0x47, 0x81, 0x93, 0xc5, 0xb8, 0x4a, 0x11, 0x05, 0x4f, 0x96, 0xdc, 0x9a, 0xb8, 0x17, 0x3c, 0x79, 0x32, 0x6d, 0xe2, 0x1e, 0xea, 0x28, 0x51, 0x57, 0xaa, 0x99, 0xe9, 0xa3, 0x04, 0x1d, 0xe5, 0xca, 0x86, 0x87, 0xc1, 0x7d, 0x94, 0x29, 0x9b, 0x71, 0x16, 0x08, 0x9d, 0xe1, 0x6a, 0x25, 0x58, 0x9a, 0x68, 0xa5, 0x6a, 0x9c, 0x54, 0x71, 0xd9, 0xad, 0x9c, 0x95, 0x92, 0x86, 0xf5, 0x95, 0x50, 0x8e, 0x0c, 0x3a, 0x52, 0x5f, 0xa8, 0x39, 0xb1, 0x68, 0x8c, 0x77, 0xaa, 0x47, 0xc9, 0x23, 0x1b, 0x36, 0x5d, 0x2e, 0x25, 0x8f, 0xa4, 0xd8, 0x74, 0x26, 0x47, 0x6c, 0x19, 0x63, 0x5b, 0x6d, 0x62, 0x28, 0x95, 0x0e, 0x54, 0x77, 0x46, 0x28, 0x02, 0x0c, 0x40, 0x96, 0xea, 0x06, 0x2c, 0x22, 0xdd, 0xd2, 0xc8, 0x3d, 0x8e, 0x1a, 0xd5, 0x40, 0x43, 0xd5, 0x64, 0xaa, 0xd4, 0x03, 0x15, 0xd6, 0x80, 0xae, 0x62, 0x2f, 0x14, 0x78, 0xc8, 0x3a, 0x43, 0xcd, 0xb2, 0xe9, 0x2c, 0x36, 0x8b, 0x30, 0x3b, 0x28, 0x4f, 0xd8, 0x34, 0xdc, 0x6d, 0x3b, 0x26, 0xb8, 0x8a, 0x72, 0xb3, 0xb2, 0x72, 0x69, 0x37, 0x5d, 0x2d, 0xd0, 0xa1, 0xb4, 0xea, 0x2e, 0x95, 0x80, 0xcb, 0x08, 0xd4, 0x62, 0x87, 0x05, 0x05, 0x07, 0xf1, 0xae, 0x09, 0x90, 0xa2, 0x7c, 0xa0, 0x7b, 0x42, 0x55, 0xee, 0x88, 0x1a, 0xa7, 0x4c, 0x37, 0x39, 0x47, 0x49, 0x58, 0xbd, 0x47, 0x89, 0x1c, 0x39, 0x71, 0xf1, 0x6e, 0x25, 0x7a, 0xe5, 0x23, 0x27, 0xa6, 0x39, 0x21, 0xe4, 0x8e, 0x12, 0x99, 0x56, 0x07, 0x53, 0xdb, 0xea, 0x32, 0x12, 0xe5, 0x9c, 0x10, 0x6a, 0xd3, 0x6b, 0x71, 0xa0, 0xd2, 0x13, 0x44, 0x3d, 0xe5, 0x82, 0x7b, 0xb7, 0x93, 0x74, 0x17, 0x82, 0x50, 0x65, 0x2a, 0xa5, 0x95, 0x0f, 0x72, 0xac, 0xb0, 0x5b, 0x51, 0x2a, 0x48, 0x35, 0x2a, 0x6a, 0x59, 0x15, 0x20, 0xc6, 0x1a, 0x8b, 0x65, 0x51, 0x80, 0xda, 0x6d, 0xcc, 0xb1, 0x49, 0x09, 0x4a, 0x8d, 0x89, 0x9b, 0x42, 0x11, 0x28, 0xd3, 0x61, 0x6e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t choice11[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x91, 0x58, 0x15, 0xb0, 0x4a, 0x88, 0x03, 0xd6, 0x18, 0x37, 0xc0, 0x4a, 0xc6, 0x27, 0xd5, 0xb1, 0x52, 0xcc, 0x1a, 0x9c, 0xdc, 0x94, 0x4a, 0x0a, 0x9f, 0x70, 0x72, 0x53, 0x2b, 0xa8, 0x72, 0xc4, 0x52, 0x4c, 0x2b, 0xa7, 0x8e, 0x81, 0x4b, 0xd3, 0x3d, 0x8c, 0xdb, 0x03, 0x0f, 0x53, 0x8c, 0x70, 0x49, 0x35, 0x32, 0x3c, 0x91, 0xbd, 0xdc, 0x94, 0x6c, 0x4b, 0x84, 0x8b, 0x2e, 0x13, 0xa1, 0x2d, 0x97, 0xca, 0x7b, 0x5d, 0x88, 0xa6, 0x9c, 0xea, 0xaa, 0x35, 0x26, 0x9a, 0x2a, 0x47, 0x4c, 0x6b, 0xdc, 0x74, 0x6a, 0x97, 0x70, 0x15, 0x33, 0xcb, 0x0c, 0xd8, 0x2a, 0x8c, 0x01, 0x47, 0xba, 0x33, 0xe0, 0x69, 0x0f, 0x02, 0x5c, 0x6d, 0x8e, 0x80, 0x6b, 0xcc, 0x4c, 0xb5, 0x89, 0xba, 0xb8, 0x87, 0x42, 0xde, 0x20, 0x6a, 0xaa, 0x96, 0x18, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t easymode[] PROGMEM = {0x00, 0x00, 0x80, 0xb8, 0x04, 0x75, 0xba, 0x59, 0x6c, 0x93, 0x02, 0xe5, 0x9a, 0x57, 0x21, 0x4b, 0xf6, 0x82, 0x7a, 0xc6, 0x0c, 0x0d, 0x19, 0xbb, 0xd8, 0x34, 0x31, 0xdc, 0x14, 0x30, 0xaa, 0xd8, 0xdc, 0x48, 0x22, 0xc1, 0x0c, 0xd7, 0x30, 0x62, 0xad, 0x04, 0x79, 0x95, 0x8d, 0xed, 0x35, 0x0d, 0xc4, 0x70, 0x51, 0x8d, 0x77, 0x34, 0x1b, 0x23, 0x54, 0x45, 0xdc, 0xd1, 0x43, 0xa8, 0x0c, 0x33, 0xc3, 0xcb, 0xd0, 0x29, 0x42, 0x55, 0x8d, 0x06, 0x13, 0x94, 0xf0, 0x08, 0x8b, 0x12, 0x2c, 0x42, 0xab, 0x2c, 0xd5, 0x76, 0xea, 0x9b, 0x40, 0x73, 0x57, 0xd9, 0x06, 0x58, 0x63, 0xd2, 0x01, 0x4d, 0x9b, 0x2b, 0xc0, 0x76, 0x99, 0x13, 0xdb, 0x61, 0xa5, 0x65, 0xa1, 0x0e, 0xeb, 0x6a, 0x24, 0x77, 0x19, 0x5e, 0xac, 0xc9, 0x95, 0x94, 0x1d, 0x68, 0xb1, 0x2a, 0x75, 0x71, 0x74, 0xa1, 0xc5, 0xca, 0xd0, 0x2d, 0x11, 0x81, 0x47, 0xca, 0xe5, 0x95, 0xa9, 0x05, 0x6a, 0x65, 0x02, 0x3a, 0x15, 0x6e, 0xb9, 0xf4, 0x1b, 0x91, 0xa8, 0xb9, 0x9d, 0x16, 0x4f, 0x60, 0xa6, 0xee, 0x96, 0x87, 0x25, 0xe4, 0x86, 0x89, 0x09, 0x59, 0x8e, 0xe1, 0x53, 0x2e, 0x66, 0x64, 0x38, 0x92, 0x6d, 0x9a, 0xba, 0xd1, 0x64, 0x01, 0xdd, 0xeb, 0xe8, 0x96, 0x83, 0x09, 0x7c, 0xad, 0x9a, 0x2a, 0x2a, 0x06, 0x16, 0x5d, 0x65, 0x21, 0x74, 0x19, 0x9e, 0x6a, 0x4d, 0x38, 0xb1, 0x66, 0x38, 0x2a, 0xbd, 0x2d, 0xe0, 0x8a, 0x6e, 0x98, 0xf6, 0x0d, 0x92, 0x2f, 0xba, 0xa3, 0xd2, 0xb7, 0x0c, 0xb6, 0xe9, 0x9e, 0x70, 0xef, 0x2a, 0x98, 0xa6, 0x45, 0x42, 0x7d, 0xab, 0x50, 0x87, 0x1a, 0x29, 0xd5, 0xad, 0x43, 0x5e, 0x4a, 0xa0, 0x34, 0x3b, 0x06, 0x66, 0xa8, 0x4c, 0xd8, 0xb6, 0x29, 0xd4, 0x54, 0x02, 0xdd, 0x39, 0x25, 0x54, 0x52, 0x6b, 0xa1, 0x69, 0x76, 0xc7, 0x61, 0x40, 0x13, 0x06, 0x23, 0x0f, 0x8c, 0x6a, 0xab, 0x08, 0x2f, 0x39, 0x52, 0xf2, 0xef, 0x22, 0xbc, 0xd4, 0x44, 0xc9, 0x7e, 0x4a, 0xd0, 0x32, 0x22, 0xa3, 0xb8, 0x71, 0x83, 0xc9, 0x02, 0xb6, 0x7a, 0x84, 0xed, 0x04, 0x0d, 0x84, 0x18, 0x55, 0x8f, 0x3d, 0x4c, 0xe9, 0xcb, 0x31, 0x23, 0xd0, 0xf2, 0x82, 0xed, 0xc0, 0xcc, 0xc0, 0x3b, 0x98, 0x51, 0x49, 0xac, 0x6f, 0x83, 0x2e, 0x23, 0x25, 0xd5, 0xbe, 0x1d, 0xaa, 0x0c, 0xa7, 0x4c, 0x86, 0x0e, 0xa8, 0x0a, 0x14, 0x32, 0x9e, 0xcb, 0x60, 0x43, 0x88, 0xcb, 0x60, 0x2d, 0xa7, 0x0a, 0xc1, 0x26, 0x07, 0x25, 0x5a, 0xdc, 0x2c, 0xa9, 0x12, 0x28, 0x5b, 0x6f, 0xb5, 0x9d, 0x82, 0x2a, 0x38, 0x2d, 0xcd, 0xb2, 0x71, 0xb9, 0xf4, 0x74, 0x37, 0x69, 0xa4, 0xa5, 0xca, 0x3d, 0xd2, 0xe8, 0x01, 0x00, 0xc0, 0xff};
const uint8_t fullcount[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa8, 0x70, 0xa6, 0x4c, 0x45, 0x64, 0xb3, 0x2c, 0xc9, 0x70, 0x13, 0x95, 0x8c, 0x80, 0xee, 0xc5, 0x09, 0x30, 0x7c, 0x38, 0x01, 0xba, 0x09, 0x17, 0x40, 0xb3, 0xee, 0x25, 0x32, 0xad, 0x9d, 0xdd, 0xe3, 0x9c, 0xd8, 0xa6, 0x4d, 0x94, 0x18, 0xb1, 0x62, 0x17, 0xae, 0x50, 0x62, 0xc2, 0x48, 0xbd, 0xbe, 0x01, 0xc8, 0x0b, 0x23, 0x0b, 0xe2, 0x06, 0x20, 0x2e, 0x8c, 0xcc, 0xaa, 0x73, 0xb0, 0x2e, 0xe4, 0x72, 0x30, 0x0a, 0x65, 0x5a, 0x2c, 0xe9, 0xc0, 0x0c, 0xe4, 0x4c, 0xc9, 0x08, 0xe8, 0xc6, 0x9c, 0x01, 0x45, 0x58, 0x84, 0xbe, 0x09, 0xf3, 0x48, 0x31, 0xdd, 0xf2, 0xa8, 0x2c, 0x34, 0x44, 0xea, 0xc9, 0x83, 0xb4, 0xb0, 0x50, 0x33, 0x27, 0x8f, 0xca, 0x43, 0xc3, 0xc4, 0x9e, 0x3c, 0xca, 0x70, 0x49, 0x37, 0x72, 0xf2, 0xa8, 0xc2, 0x39, 0x43, 0xe8, 0xd2, 0xbc, 0x09, 0xe3, 0x0a, 0xb1, 0xc3, 0xf6, 0x36, 0x94, 0x2a, 0x8c, 0x8e, 0x30, 0xd8, 0x32, 0xa8, 0x0c, 0x52, 0x52, 0xe7, 0xca, 0xa1, 0xd2, 0x68, 0xc8, 0xb9, 0x2f, 0x87, 0x0e, 0xd3, 0x26, 0x07, 0xb9, 0x92, 0xca, 0x63, 0x11, 0x1f, 0xcc, 0x4e, 0x65, 0x53, 0x42, 0x80, 0xa6, 0x9c, 0x53, 0x5b, 0x50, 0x58, 0x86, 0x89, 0x0e, 0xd9, 0x62, 0x25, 0x9c, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t hardmode[] PROGMEM = {0x00, 0x45, 0x0c, 0x84, 0xbb, 0x4f, 0x85, 0x2e, 0xd9, 0x0b, 0xea, 0x59, 0x33, 0xb4, 0x64, 0x6a, 0x7c, 0x2b, 0xc4, 0x70, 0x53, 0x40, 0xaf, 0x66, 0x35, 0xc3, 0x89, 0x04, 0xc3, 0x43, 0xd3, 0x81, 0x95, 0x12, 0x94, 0x55, 0x36, 0xb6, 0xd6, 0x34, 0x10, 0x2b, 0x44, 0x35, 0xde, 0xd1, 0x74, 0xf2, 0x50, 0x15, 0x71, 0x47, 0x0f, 0xa1, 0x32, 0x4c, 0x0d, 0x1f, 0xdd, 0xa6, 0x48, 0x55, 0x35, 0x1a, 0x2c, 0x90, 0xc3, 0x3d, 0x2d, 0x6a, 0x30, 0x11, 0xeb, 0xb6, 0x54, 0xdb, 0xa1, 0x4f, 0x14, 0xc3, 0x43, 0xed, 0x28, 0x60, 0x8d, 0x09, 0x07, 0x0c, 0x67, 0xae, 0x00, 0x57, 0xa5, 0x4e, 0x6c, 0x87, 0x96, 0x95, 0x94, 0x3a, 0xac, 0xed, 0x11, 0xd2, 0x15, 0x68, 0xc5, 0x26, 0x57, 0x52, 0x76, 0xa0, 0xc5, 0xaa, 0x5c, 0xc5, 0xd9, 0x85, 0x16, 0x2b, 0x43, 0x97, 0x44, 0x16, 0x5a, 0x09, 0x33, 0x5b, 0x2e, 0x1e, 0xa8, 0x15, 0x11, 0xf8, 0xa4, 0xbb, 0xa5, 0xd2, 0x2f, 0x80, 0x6a, 0x1e, 0x76, 0x04, 0xb0, 0xa0, 0xd9, 0x30, 0xa4, 0xd8, 0x70, 0x75, 0xc1, 0xcb, 0x31, 0x7c, 0xd2, 0x45, 0x8d, 0x0c, 0x47, 0xb1, 0x4d, 0xd3, 0x10, 0x5a, 0x6c, 0xa8, 0x7b, 0x02, 0xcd, 0x4a, 0xb2, 0x40, 0x9a, 0x66, 0x0b, 0x99, 0xc3, 0xb4, 0x62, 0x8d, 0xbd, 0x8c, 0x1e, 0x3b, 0x98, 0x36, 0xf6, 0x14, 0x72, 0x9c, 0x60, 0xcb, 0xd9, 0x42, 0xc8, 0x71, 0xbd, 0x0f, 0x65, 0x77, 0xa1, 0x0c, 0x40, 0x2a, 0x9c, 0x00, 0x50, 0x59, 0x12, 0x80, 0x3b, 0xad, 0xa6, 0xba, 0xc9, 0x8a, 0x2d, 0x16, 0x57, 0x11, 0x36, 0x9b, 0xb4, 0x58, 0x5c, 0x79, 0x98, 0xec, 0xde, 0x14, 0x73, 0xc9, 0xbe, 0x48, 0x64, 0x61, 0x8c, 0xa1, 0xfa, 0x40, 0x55, 0x4d, 0x11, 0x4c, 0x01, 0x9a, 0x4c, 0x06, 0xda, 0x52, 0x3a, 0xe8, 0xd5, 0x36, 0xa8, 0x4a, 0x19, 0x60, 0x45, 0x72, 0xa8, 0x92, 0xa0, 0x83, 0x1c, 0xe5, 0x6a, 0x09, 0x8b, 0x01, 0x7c, 0xa5, 0x44, 0x54, 0x5a, 0x8e, 0x77, 0x1d, 0x58, 0x19, 0x68, 0xf9, 0xc1, 0x76, 0x40, 0x56, 0xe0, 0x19, 0xf6, 0xb8, 0xa4, 0xc6, 0xb7, 0x43, 0x95, 0x91, 0x94, 0xca, 0xd0, 0x01, 0x55, 0x81, 0x42, 0x26, 0x52, 0x3b, 0x4c, 0x1a, 0x76, 0x19, 0xc9, 0xe5, 0x38, 0x21, 0xd8, 0xe5, 0xa0, 0x44, 0xaa, 0x85, 0x29, 0x51, 0x82, 0x59, 0xe5, 0xa1, 0x96, 0x53, 0x55, 0x24, 0xa5, 0xa6, 0x58, 0x76, 0x9e, 0x94, 0x91, 0x9e, 0x26, 0x56, 0x84, 0x4c, 0x58, 0x7a, 0xb8, 0x58, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t pokeypokey[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa0, 0x9a, 0xca, 0x35, 0xad, 0xcc, 0x64, 0x68, 0x8c, 0x2d, 0x17, 0x56, 0xbb, 0x2b, 0x76, 0xa5, 0x8c, 0xb4, 0x0a, 0x9f, 0xc8, 0xd7, 0x12, 0xf2, 0x2e, 0xb4, 0x42, 0xd3, 0x8a, 0x34, 0x7a, 0x40, 0x48, 0x78, 0x0d, 0x88, 0x89, 0x80, 0x26, 0xd2, 0x3e, 0xc2, 0xc8, 0x9b, 0x94, 0xac, 0x48, 0xf1, 0x71, 0xb7, 0x7d, 0x22, 0x6f, 0x23, 0x2b, 0xcc, 0xc8, 0x89, 0xb5, 0xaf, 0x08, 0xd7, 0x20, 0x21, 0x07, 0x39, 0xd2, 0xcc, 0xa4, 0xb2, 0x12, 0xd4, 0x88, 0x50, 0x96, 0xca, 0xc2, 0x60, 0xc3, 0xdd, 0xcd, 0x76, 0xa1, 0xa3, 0xad, 0x10, 0x37, 0xbb, 0x08, 0x08, 0xba, 0x73, 0x54, 0xce, 0xae, 0xa3, 0xf8, 0x88, 0x93, 0x3b, 0xbd, 0x89, 0x12, 0x13, 0x56, 0x66, 0xdd, 0x14, 0x92, 0x8f, 0x18, 0xa9, 0x0a, 0x63, 0xe4, 0x55, 0x21, 0x65, 0x34, 0x17, 0xe9, 0x54, 0x40, 0x51, 0x81, 0x56, 0xe2, 0x13, 0xa6, 0x19, 0x30, 0x53, 0x10, 0x03, 0x86, 0x16, 0x4d, 0x7e, 0xa3, 0xa8, 0x3d, 0x26, 0x76, 0x71, 0x91, 0x72, 0xdc, 0x2a, 0xd1, 0xe9, 0x77, 0xa6, 0xb0, 0x81, 0x71, 0xdf, 0x10, 0xb0, 0x90, 0x18, 0x6a, 0x73, 0x0d, 0xc4, 0x4d, 0xca, 0x44, 0xec, 0x1a, 0x50, 0x37, 0x19, 0x67, 0xbe, 0xeb, 0x40, 0x5e, 0xf1, 0x9a, 0xca, 0x9e, 0x03, 0x75, 0x91, 0x5a, 0x22, 0xbb, 0x89, 0xd4, 0x98, 0x91, 0x08, 0xe5, 0xb6, 0x4a, 0x21, 0x69, 0x63, 0xa8, 0xdd, 0x2a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff};
const uint8_t return11[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x04, 0xd3, 0xca, 0xdd, 0x2a, 0x1e, 0x41, 0x18, 0xed, 0x2a, 0xb3, 0x78, 0x04, 0x27, 0x24, 0xb7, 0x43, 0xd0, 0x48, 0x03, 0xe1, 0xba, 0x49, 0xd2, 0x25, 0x93, 0x4c, 0xf7, 0x52, 0xe1, 0x8a, 0x0c, 0xd8, 0xde, 0x4b, 0xb1, 0x8c, 0x80, 0x95, 0xc9, 0x1d, 0xb0, 0x83, 0xa8, 0x01, 0x76, 0x72, 0x6b, 0x45, 0x70, 0x16, 0x9e, 0x2a, 0x65, 0x65, 0x36, 0xf3, 0x70, 0x60, 0xa9, 0x93, 0xf9, 0xcc, 0x6d, 0x85, 0x11, 0x56, 0xee, 0x33, 0x8d, 0x16, 0x87, 0x5c, 0xaa, 0xcf, 0x34, 0x56, 0x54, 0x68, 0x9b, 0xc3, 0x0d, 0x11, 0xc7, 0x8a, 0x42, 0x8e, 0x30, 0x46, 0x6c, 0x6b, 0x2e, 0xd9, 0x92, 0x10, 0x70, 0xb4, 0x29, 0x50, 0xca, 0xb8, 0xe7, 0xd5, 0x42, 0x53, 0xaa, 0x00, 0x35, 0x86, 0x93, 0xed, 0xa8, 0x02, 0xb4, 0x5a, 0x55, 0xa5, 0x23, 0x0a, 0xb0, 0x6a, 0x44, 0x45, 0x89, 0x28, 0x41, 0xaf, 0x56, 0x17, 0xa6, 0xcc, 0x03, 0xbd, 0xda, 0x54, 0x95, 0x92, 0x08, 0x94, 0x6e, 0x57, 0x53, 0x02, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t player1select[] PROGMEM = {0x00, 0x00, 0x00, 0xa1, 0xaa, 0x5c, 0x2a, 0x88, 0x63, 0x87, 0x2c, 0xe2, 0x28, 0x63, 0xb6, 0x82, 0x80, 0x24, 0xa2, 0x5b, 0xe8, 0xfd, 0x98, 0x5a, 0x99, 0x3a, 0x61, 0x30, 0x5d, 0xce, 0x65, 0xfa, 0x44, 0x51, 0xc5, 0xa4, 0x05, 0x99, 0x13, 0x25, 0xa1, 0x53, 0xe9, 0x64, 0x4e, 0x94, 0x84, 0xf6, 0xb4, 0x13, 0xb9, 0xd1, 0x89, 0xa2, 0xe6, 0x9a, 0x66, 0xa3, 0x2b, 0xf4, 0x5e, 0x26, 0x43, 0x82, 0x8e, 0xc8, 0x27, 0xee, 0x74, 0x0d, 0xda, 0x52, 0x3e, 0xb8, 0xd4, 0xbd, 0x70, 0x92, 0xe9, 0xa1, 0x94, 0xf4, 0x12, 0x81, 0x84, 0xcf, 0x14, 0x2a, 0x62, 0x3a, 0x0a, 0xcc, 0x32, 0xe8, 0xb4, 0x15, 0x28, 0xd4, 0xc6, 0xc0, 0x22, 0x61, 0xd2, 0xf8, 0x58, 0x07, 0xcd, 0x84, 0x4d, 0xd1, 0x7d, 0x1d, 0xbc, 0x62, 0x8d, 0xdc, 0x97, 0x35, 0xc8, 0xb6, 0x34, 0xb2, 0xd0, 0x47, 0xa0, 0xda, 0xf0, 0xca, 0x43, 0x69, 0x85, 0x2a, 0xc3, 0x4b, 0x09, 0xb5, 0x18, 0xba, 0x8c, 0x0c, 0xdd, 0xa7, 0x62, 0xe8, 0x30, 0x3a, 0x5c, 0xef, 0x4a, 0xb1, 0xd2, 0x48, 0x0b, 0x8d, 0x29, 0xc7, 0x4c, 0x21, 0x21, 0x02, 0x6e, 0x82, 0xa3, 0xa4, 0x9a, 0x08, 0xcc, 0x4e, 0x31, 0xa7, 0xa3, 0x02, 0xb0, 0x3b, 0x49, 0x42, 0x89, 0xf2, 0xc0, 0xec, 0x46, 0x0d, 0xd5, 0xca, 0x06, 0xbb, 0x13, 0x2d, 0x59, 0x2b, 0x1d, 0x3c, 0x37, 0x0a, 0x57, 0xa5, 0x54, 0xf0, 0xc2, 0x21, 0xd5, 0x11, 0x2b, 0xc0, 0x77, 0x65, 0x77, 0xc7, 0x28, 0x07, 0xbf, 0x54, 0xd8, 0xec, 0xa0, 0x02, 0xfc, 0x4d, 0x57, 0x93, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xa1, 0xcb, 0x54, 0x5a, 0x45, 0xec, 0xb8, 0x3e, 0xc8, 0x32, 0x11, 0xb5, 0xed, 0x82, 0x20, 0xdc, 0x4d, 0x23, 0xce, 0xa2, 0x8d, 0xf4, 0xee, 0x2c, 0x21, 0x8b, 0x0e, 0x5c, 0x76, 0x3b, 0x09, 0x4f, 0x6a, 0xd0, 0x46, 0xd8, 0x4e, 0x05, 0x90, 0x92, 0x10, 0x55, 0xd5, 0x11, 0x44, 0x4b, 0x2e, 0x50, 0x64, 0x55, 0x5a, 0x49, 0x79, 0x07, 0x68, 0x59, 0xd1, 0x98, 0x01, 0x4f, 0xab, 0x32, 0xe0, 0x0a, 0x37, 0x06, 0x4c, 0x66, 0x3e, 0x12, 0xab, 0x2e, 0x84, 0x72, 0x50, 0xcb, 0x84, 0xd9, 0x20, 0xca, 0x51, 0x45, 0xe4, 0x76, 0x93, 0xa9, 0x0b, 0x9d, 0xc2, 0xbb, 0x0d, 0x96, 0x2a, 0x94, 0x80, 0x60, 0x36, 0x8f, 0x16, 0x4c, 0x64, 0x99, 0x1a, 0x1e, 0x95, 0xd6, 0x12, 0x63, 0x62, 0x56, 0xa5, 0x52, 0xa9, 0xa7, 0x98, 0x15, 0x54, 0x04, 0x2b, 0x92, 0x2e, 0x96, 0x11, 0xd0, 0xa4, 0xea, 0x08, 0x93, 0x30, 0xcf, 0x48, 0x43, 0x47, 0x75, 0xa6, 0x32, 0xc3, 0x0c, 0x1d, 0xcd, 0xda, 0x4e, 0x31, 0x0b, 0x95, 0x6c, 0xec, 0x3a, 0x30, 0xa2, 0x04, 0xeb, 0x61, 0x69, 0x25, 0x0b, 0x93, 0xa8, 0xe2, 0x71, 0x9c, 0xcd, 0x2d, 0x21, 0xa0, 0x6b, 0xf1, 0xd4, 0x17, 0xcc, 0x91, 0x8e, 0x72, 0x83, 0x57, 0x90, 0x67, 0x98, 0xd8, 0x19, 0xb9, 0x57, 0x67, 0xe8, 0x15, 0xe8, 0x64, 0x41, 0xae, 0x8b, 0x56, 0xe0, 0x93, 0x47, 0x1e, 0x65, 0x16, 0x82, 0x4f, 0x9e, 0xa8, 0x54, 0xa6, 0x89, 0x39, 0x45, 0x10, 0x9e, 0x55, 0x22, 0xf8, 0xa8, 0x41, 0x59, 0x56, 0x8b, 0xa1, 0xe5, 0x7a, 0x67, 0x95, 0x85, 0x86, 0x5a, 0x6c, 0x8b, 0x76, 0x3a, 0x84, 0x2a, 0x99, 0x2d, 0x3a, 0xe1, 0x50, 0xb8, 0xe4, 0xb6, 0xca, 0xba, 0x92, 0xc1, 0x52, 0xb8, 0x22, 0x13, 0x8e, 0x81, 0x52, 0xe9, 0xb2, 0x76, 0x04, 0x04, 0x4a, 0xa5, 0x29, 0x56, 0x66, 0x10, 0x29, 0x94, 0x3a, 0x5a, 0x6a, 0x40, 0x69, 0x52, 0x11, 0x27, 0xa9, 0xa9, 0x8e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t player2select[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x0e, 0x6b, 0x5c, 0xaa, 0x8d, 0x1b, 0x07, 0xbc, 0x52, 0xcb, 0x14, 0xa9, 0x85, 0x80, 0x22, 0xaa, 0x86, 0x6f, 0x73, 0x85, 0x78, 0x8a, 0x39, 0x81, 0x77, 0x55, 0xa6, 0x2e, 0xf6, 0x04, 0x41, 0x7b, 0x57, 0xb8, 0xd0, 0x43, 0x05, 0x1d, 0x3d, 0xe9, 0xc2, 0x0e, 0x15, 0x94, 0x76, 0x97, 0x09, 0x39, 0x54, 0xb4, 0xdc, 0xd5, 0x6a, 0xf8, 0x50, 0x21, 0xf0, 0x54, 0x59, 0xe1, 0x43, 0xb9, 0x24, 0xd3, 0xa9, 0x85, 0x57, 0xe0, 0x33, 0x76, 0x27, 0x05, 0x2a, 0x89, 0x0a, 0xb8, 0x19, 0x18, 0xca, 0x95, 0x5e, 0x60, 0x47, 0x59, 0x44, 0xd2, 0x83, 0x24, 0xd1, 0xc6, 0xb2, 0x11, 0xb0, 0x05, 0xbb, 0x00, 0x2e, 0x41, 0x53, 0xc0, 0x15, 0x22, 0x0c, 0x38, 0x52, 0x6d, 0xc5, 0x15, 0xa9, 0x57, 0x9b, 0xa9, 0x13, 0x47, 0x64, 0xd1, 0x63, 0x26, 0x0f, 0x97, 0xb0, 0x7a, 0xaf, 0x99, 0x38, 0x7c, 0x22, 0xe6, 0xb5, 0x1e, 0xe2, 0x88, 0x91, 0x58, 0xd4, 0x9a, 0xc9, 0x23, 0x07, 0x6a, 0xd9, 0x63, 0x06, 0x16, 0xad, 0x95, 0x75, 0xa7, 0x19, 0x1c, 0xbc, 0x30, 0xd1, 0x95, 0x1a, 0xb0, 0x51, 0x34, 0xc4, 0x84, 0xab, 0xc1, 0xc4, 0xa0, 0xd2, 0x6d, 0x66, 0x01, 0x53, 0x04, 0x5b, 0xa5, 0x78, 0x04, 0x08, 0x34, 0x98, 0x6d, 0x12, 0x1d, 0x22, 0x90, 0x70, 0x2d, 0x59, 0xb6, 0x41, 0xc7, 0x81, 0x13, 0xd8, 0xed, 0x42, 0x0d, 0x03, 0x6e, 0x61, 0x94, 0x13, 0x63, 0x26, 0x78, 0xa2, 0x53, 0x4c, 0x0e, 0x75, 0xe0, 0xb5, 0x66, 0x87, 0x25, 0x00, 0x00, 0x00, 0x80, 0xd0, 0x45, 0x2a, 0xad, 0xa2, 0x76, 0x5c, 0x96, 0x44, 0x9b, 0xaa, 0xc9, 0x0e, 0xa1, 0x54, 0x11, 0xe1, 0x11, 0xe7, 0xd0, 0x4e, 0xe8, 0x74, 0x96, 0x98, 0x45, 0x07, 0xce, 0xb3, 0x1d, 0x84, 0x27, 0x35, 0x68, 0x2d, 0x6c, 0x3b, 0x03, 0x48, 0x49, 0xb0, 0xaa, 0xec, 0x74, 0xb2, 0x25, 0x37, 0xc0, 0xb2, 0x2a, 0x23, 0x97, 0x7c, 0x41, 0x54, 0x2b, 0x4f, 0xcc, 0x80, 0xa7, 0xcc, 0x04, 0x70, 0xa4, 0x5b, 0x09, 0x0a, 0xad, 0x74, 0x73, 0xbb, 0x23, 0xb1, 0xea, 0x82, 0x29, 0x07, 0x35, 0x41, 0xea, 0x4d, 0xc6, 0x1c, 0xd4, 0x24, 0xe1, 0x26, 0x88, 0xa7, 0xd0, 0x91, 0xbd, 0xdb, 0x14, 0xa9, 0x42, 0x47, 0x0d, 0x66, 0x2a, 0xc4, 0x0b, 0x1d, 0x2d, 0x98, 0xc8, 0x32, 0x35, 0xdc, 0x2a, 0xa5, 0xc4, 0xc7, 0xd9, 0x8c, 0xea, 0xad, 0x56, 0xad, 0x10, 0xd3, 0xa8, 0xf0, 0x56, 0x25, 0x9c, 0xed, 0x04, 0xac, 0x29, 0x53, 0x4b, 0xb7, 0xbc, 0xe2, 0x20, 0xcd, 0x2b, 0xc3, 0xd0, 0x51, 0x9d, 0x8d, 0x4a, 0x77, 0x43, 0x47, 0xb3, 0xb6, 0x8b, 0xd5, 0x4b, 0x06, 0x07, 0xfa, 0x4e, 0x56, 0x8f, 0xc8, 0x7a, 0x54, 0x5a, 0x49, 0xc3, 0x14, 0xaa, 0x58, 0x18, 0x17, 0x75, 0x4b, 0xa9, 0xe8, 0x5a, 0x3c, 0x5d, 0xec, 0x94, 0xbe, 0x40, 0x8e, 0x70, 0x92, 0x13, 0xa4, 0x44, 0xaa, 0x4c, 0xd4, 0xf6, 0x4a, 0xbd, 0x7a, 0x43, 0xcf, 0xc0, 0x27, 0x0b, 0x62, 0x5c, 0xb4, 0x0c, 0x9f, 0x3c, 0x32, 0x2f, 0x57, 0x17, 0x7d, 0xf2, 0xc4, 0xa4, 0x32, 0x4d, 0xc8, 0xc9, 0xa3, 0xf0, 0xac, 0x12, 0xc3, 0x47, 0x0b, 0xca, 0xb2, 0x9a, 0x0d, 0x2d, 0xcf, 0x79, 0xeb, 0x4c, 0x34, 0xd5, 0x62, 0x5b, 0xb4, 0xc3, 0x31, 0x70, 0xc9, 0x6c, 0x91, 0x09, 0x83, 0x42, 0x25, 0xb7, 0x55, 0xd6, 0x8d, 0x02, 0x95, 0xc2, 0x15, 0x99, 0x70, 0x0c, 0x94, 0x4a, 0x9b, 0xb5, 0x3d, 0x20, 0x54, 0x28, 0x75, 0xb1, 0x34, 0x83, 0x52, 0xa1, 0xd2, 0xd1, 0x52, 0x03, 0x4a, 0xa3, 0x02, 0x58, 0x8f, 0x0c, 0x73, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t player3select[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xca, 0xc6, 0x25, 0x4b, 0x39, 0x56, 0xc2, 0x0a, 0xd5, 0x2a, 0xe5, 0xda, 0x08, 0x28, 0xac, 0x2b, 0xf9, 0xde, 0x57, 0xaa, 0x85, 0xe9, 0x1b, 0x9c, 0x20, 0x98, 0xe8, 0x0c, 0x17, 0x7b, 0xa8, 0xa0, 0xbc, 0x27, 0x5d, 0xd8, 0xa5, 0x0e, 0x15, 0x0d, 0x57, 0xb5, 0x1a, 0x3e, 0x54, 0xf0, 0x3c, 0x55, 0x5a, 0x78, 0x51, 0x3e, 0xca, 0x54, 0x6a, 0xe1, 0xc3, 0x1a, 0x67, 0x95, 0x2d, 0xa6, 0x56, 0xc2, 0x5c, 0xb7, 0xab, 0x91, 0x09, 0x15, 0xb0, 0x95, 0x51, 0x42, 0xc5, 0x24, 0x81, 0x7b, 0x45, 0xba, 0x65, 0x02, 0x34, 0x69, 0x61, 0xa8, 0x62, 0xdc, 0x23, 0x4c, 0x76, 0xaa, 0xa2, 0xb0, 0x72, 0x35, 0x31, 0xa9, 0x04, 0xd5, 0x5d, 0xd3, 0x42, 0x05, 0x89, 0x0c, 0xec, 0x2c, 0x8e, 0x51, 0x44, 0xd6, 0xa9, 0xb2, 0xb8, 0x46, 0x13, 0x79, 0xe2, 0x89, 0xe4, 0x82, 0x2b, 0x73, 0x86, 0x2b, 0x57, 0x4d, 0x1e, 0x29, 0x0a, 0xc9, 0x9e, 0x30, 0x78, 0xc8, 0x24, 0xa8, 0x66, 0x42, 0xd0, 0x60, 0x02, 0xe7, 0xde, 0x31, 0x22, 0x8d, 0xf6, 0x4c, 0xe6, 0x86, 0x89, 0x16, 0x2e, 0x71, 0xac, 0x5b, 0x21, 0x5a, 0x92, 0xc8, 0xb0, 0x6f, 0x99, 0x58, 0x4e, 0x12, 0x17, 0x18, 0xcd, 0x2e, 0x11, 0x0b, 0x8c, 0xe5, 0xb2, 0xdb, 0x40, 0xdc, 0xb9, 0x54, 0xda, 0x95, 0x82, 0x7c, 0xc7, 0x20, 0x1d, 0x17, 0x0c, 0xf6, 0x15, 0x0d, 0x6c, 0x9d, 0x20, 0x24, 0x23, 0x0d, 0x88, 0x73, 0xa1, 0x28, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x97, 0xa8, 0xb4, 0x88, 0xda, 0x71, 0x59, 0x94, 0x6d, 0xa2, 0x26, 0x2b, 0x84, 0x4a, 0x46, 0x84, 0x7b, 0x9c, 0x45, 0x3b, 0x61, 0xd3, 0x59, 0xa2, 0x17, 0x1d, 0x38, 0xef, 0x75, 0x12, 0x1e, 0x94, 0xe7, 0xb2, 0xdb, 0x46, 0x78, 0xd0, 0x52, 0xfa, 0x4c, 0x06, 0x90, 0x92, 0x10, 0x19, 0xd5, 0x99, 0x64, 0x52, 0x6e, 0x81, 0x66, 0x57, 0x46, 0x49, 0xf9, 0x04, 0x28, 0x9e, 0x5e, 0x87, 0x01, 0x4f, 0x99, 0x09, 0xe0, 0x48, 0xb7, 0x94, 0x37, 0xe2, 0x99, 0x1e, 0x56, 0x46, 0xe2, 0xe4, 0x85, 0x50, 0x0e, 0x6a, 0x99, 0x30, 0x1b, 0x44, 0x35, 0xa8, 0x48, 0xdc, 0x6d, 0x10, 0x77, 0xa1, 0x23, 0x7b, 0xb7, 0x25, 0x52, 0x85, 0x13, 0x10, 0xec, 0xe6, 0xd1, 0x82, 0x89, 0x28, 0x53, 0xc3, 0xad, 0x16, 0x5a, 0x7d, 0x8d, 0xcd, 0xaa, 0x58, 0x69, 0xf5, 0x30, 0x13, 0x83, 0x0a, 0x6f, 0x54, 0xc2, 0xd9, 0x4a, 0xc0, 0xba, 0x32, 0xb5, 0x34, 0xcb, 0xab, 0x8a, 0xd2, 0xbc, 0x2a, 0x0c, 0x1d, 0xd5, 0xda, 0xaa, 0x74, 0x33, 0x74, 0x34, 0xeb, 0x3a, 0x59, 0xa3, 0x54, 0x70, 0xa0, 0xab, 0x12, 0x8e, 0x88, 0xa4, 0xc7, 0xa5, 0x95, 0x2c, 0x0c, 0xa1, 0x8a, 0x87, 0x76, 0x36, 0xb7, 0x94, 0x8a, 0xae, 0x24, 0xc2, 0xd9, 0x4e, 0xea, 0x0b, 0x92, 0x08, 0x43, 0x3b, 0x41, 0x68, 0x24, 0xda, 0x54, 0x1d, 0x8f, 0xcc, 0xab, 0x53, 0xf4, 0x0a, 0x74, 0xb2, 0x28, 0xc6, 0x45, 0x3b, 0xf0, 0xc9, 0x23, 0x8f, 0x72, 0x0d, 0x21, 0x27, 0x4f, 0x4c, 0x2b, 0xd3, 0x04, 0x9f, 0x3c, 0x4a, 0xcf, 0x2a, 0x31, 0x7c, 0xb4, 0x28, 0x2d, 0x72, 0xc4, 0xd0, 0xf0, 0xbc, 0xb7, 0xce, 0x42, 0xc3, 0x2d, 0xb6, 0x45, 0x3b, 0x03, 0x42, 0xd5, 0x2c, 0xe5, 0xb6, 0xca, 0xba, 0x61, 0xa0, 0x52, 0xb8, 0x2c, 0x93, 0x01, 0x81, 0x52, 0x69, 0xb3, 0xb6, 0x07, 0x04, 0x0a, 0xa5, 0x29, 0x96, 0x66, 0x10, 0xc9, 0x55, 0x3a, 0x5a, 0x6a, 0x40, 0x19, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t player4select[] PROGMEM = {0x00, 0x00, 0x00, 0xa1, 0xaa, 0x5c, 0x2a, 0x88, 0x63, 0x87, 0x2c, 0xe2, 0x28, 0x63, 0xb6, 0x82, 0x80, 0x24, 0xa2, 0x5b, 0xe8, 0xfd, 0x98, 0x5a, 0x99, 0x3a, 0x61, 0x30, 0x5d, 0xce, 0x65, 0xfa, 0x44, 0x51, 0xc5, 0xa4, 0x05, 0x99, 0x13, 0x25, 0xa1, 0x53, 0xe9, 0x64, 0x4e, 0x94, 0x84, 0xf6, 0xb4, 0x13, 0x39, 0x51, 0x92, 0x5c, 0xd3, 0x46, 0xe4, 0x44, 0x51, 0x73, 0x4d, 0xb3, 0xd1, 0x15, 0x7a, 0x2f, 0x93, 0x2e, 0x41, 0x47, 0x64, 0xb3, 0x74, 0x98, 0x04, 0x1d, 0x91, 0xa8, 0x32, 0xe9, 0x1c, 0x78, 0xa4, 0x28, 0x84, 0x67, 0x8a, 0xe5, 0x51, 0x04, 0x26, 0xee, 0xe1, 0xa6, 0x43, 0xdc, 0x84, 0x98, 0x7b, 0x58, 0x46, 0x40, 0x13, 0x16, 0xa9, 0x2f, 0xdc, 0x33, 0x4c, 0xed, 0x24, 0x5a, 0x8c, 0x31, 0xf0, 0x9a, 0x51, 0x58, 0x3e, 0x37, 0x40, 0x7b, 0x46, 0xe2, 0xf9, 0xde, 0x00, 0x9b, 0x09, 0x49, 0x64, 0x73, 0x13, 0xac, 0x27, 0x04, 0x92, 0xcf, 0x09, 0xf0, 0x1e, 0x11, 0xcd, 0xe4, 0xca, 0x57, 0x0a, 0xdd, 0x01, 0x8a, 0xaf, 0x9e, 0x29, 0x6e, 0x06, 0x6c, 0xa1, 0x79, 0xe2, 0xb2, 0x16, 0xa0, 0x45, 0xe6, 0x72, 0x5a, 0x6b, 0x80, 0x16, 0x9b, 0xc3, 0x6d, 0x29, 0x21, 0x46, 0x64, 0xb6, 0x74, 0x3a, 0x87, 0x18, 0x81, 0x59, 0x32, 0x6e, 0x12, 0xb0, 0x7b, 0xc5, 0x14, 0x8b, 0xdb, 0x99, 0x8c, 0x16, 0x95, 0x4e, 0x75, 0x37, 0x88, 0x92, 0x0a, 0x30, 0x42, 0xcd, 0x31, 0x8e, 0x29, 0xc0, 0x6a, 0xd3, 0xe4, 0x7a, 0xa4, 0x02, 0x7b, 0xc2, 0x82, 0xe3, 0x02, 0x00, 0x00, 0x00, 0x84, 0x2e, 0x53, 0x69, 0x55, 0xb1, 0xe3, 0x8a, 0x20, 0xcb, 0x44, 0x55, 0x96, 0x0b, 0x83, 0x70, 0x37, 0xb3, 0x24, 0x8b, 0xb6, 0xd2, 0xba, 0xb3, 0x84, 0x2c, 0x3a, 0x70, 0xde, 0xed, 0x24, 0x3c, 0xa8, 0xc0, 0x79, 0xb6, 0x8d, 0xc8, 0xa0, 0xad, 0xd0, 0xed, 0x0e, 0xc0, 0x25, 0x21, 0xaa, 0xaa, 0x33, 0x88, 0xa6, 0x8c, 0xe3, 0xc8, 0xea, 0xb4, 0x52, 0xf2, 0x01, 0xd0, 0xa2, 0xbc, 0x31, 0x03, 0x9e, 0x51, 0x13, 0xc0, 0x11, 0xee, 0xa9, 0x18, 0xcc, 0x3d, 0x2c, 0xa3, 0x8c, 0xc4, 0xaa, 0x73, 0xa1, 0x1a, 0xd4, 0x32, 0xa9, 0x2f, 0x18, 0x73, 0x54, 0x11, 0xb9, 0x5b, 0x27, 0x9e, 0x42, 0x47, 0xf6, 0x76, 0x53, 0xa4, 0x0a, 0x25, 0x20, 0x98, 0xcd, 0xa3, 0x05, 0x53, 0x99, 0xa6, 0x86, 0x47, 0x65, 0x94, 0xfa, 0x38, 0x9b, 0x36, 0xbd, 0x96, 0x6e, 0x65, 0x2a, 0x1a, 0x95, 0xde, 0xa8, 0xa4, 0x8b, 0x65, 0x04, 0x34, 0xa9, 0x3a, 0xc2, 0x24, 0xd5, 0x2b, 0xd3, 0xd0, 0x51, 0xad, 0xa9, 0x2a, 0x37, 0x43, 0x47, 0xb3, 0xae, 0x53, 0xd4, 0x43, 0x25, 0x9b, 0xda, 0x4a, 0x96, 0x0c, 0xc9, 0x7a, 0x5c, 0x5a, 0xc9, 0xc2, 0x10, 0xaa, 0x78, 0x1c, 0x67, 0x73, 0x4b, 0x08, 0xe8, 0x5a, 0xbc, 0x74, 0x05, 0x73, 0x84, 0xa3, 0xdc, 0x40, 0x17, 0x5c, 0x9d, 0x2e, 0xb6, 0x47, 0xea, 0xd5, 0x19, 0x79, 0x05, 0x3a, 0x59, 0x14, 0xeb, 0xa2, 0x15, 0xf8, 0xe4, 0x89, 0x46, 0xb9, 0x86, 0x91, 0x93, 0x27, 0xaa, 0x95, 0x69, 0x64, 0x4e, 0x1e, 0x85, 0x67, 0x95, 0x0a, 0x3e, 0x5a, 0x50, 0x96, 0xd5, 0x22, 0x68, 0xb9, 0xde, 0x59, 0x65, 0xa1, 0xe9, 0x16, 0xdb, 0xa2, 0x9d, 0x01, 0xa1, 0x6b, 0x56, 0x72, 0xd3, 0x64, 0x5c, 0x31, 0x50, 0x29, 0x5c, 0x91, 0x09, 0x83, 0x40, 0xa9, 0x70, 0x59, 0x3b, 0x02, 0x02, 0x85, 0xd2, 0x14, 0x4b, 0x73, 0x88, 0x14, 0x4a, 0x13, 0x2d, 0x35, 0xa0, 0x34, 0xaa, 0x40, 0xf4, 0x08, 0x53, 0xcf, 0x00, 0x00, 0x00, 0xff};
const uint8_t player5select[] PROGMEM = {0xc0, 0xf2, 0xa6, 0xa4, 0x82, 0x25, 0x76, 0xaa, 0x23, 0xf1, 0x0c, 0xa2, 0xd8, 0x2e, 0x88, 0xac, 0xca, 0x45, 0xad, 0xb8, 0x32, 0xc9, 0x2a, 0x33, 0xb3, 0xb3, 0x42, 0xef, 0xc7, 0x54, 0xcb, 0xf0, 0x09, 0x83, 0xae, 0x4e, 0x09, 0x31, 0x27, 0x8a, 0xca, 0x27, 0xd2, 0xc9, 0x9c, 0x28, 0x71, 0xed, 0xae, 0x20, 0x73, 0xa2, 0x24, 0xa4, 0xba, 0x8d, 0xc8, 0x89, 0x92, 0xe2, 0x9a, 0x51, 0x21, 0x27, 0x0a, 0x96, 0xbb, 0x53, 0x8c, 0xac, 0xc8, 0x47, 0x99, 0x70, 0x0d, 0x3a, 0x22, 0x5d, 0xa4, 0xd3, 0xa5, 0xc8, 0x88, 0x79, 0xe5, 0x09, 0xe3, 0x40, 0x23, 0x27, 0x22, 0x32, 0xc3, 0xcc, 0xb4, 0xac, 0x48, 0x31, 0x75, 0xb7, 0xec, 0x92, 0xc2, 0xc4, 0x23, 0xcc, 0x76, 0x08, 0x3a, 0xb7, 0x30, 0x53, 0xcb, 0x21, 0x8d, 0x7e, 0x42, 0xcc, 0xa2, 0xac, 0x24, 0x84, 0x31, 0x88, 0x0c, 0x74, 0xd2, 0x10, 0x5b, 0x31, 0xca, 0xf0, 0xce, 0x56, 0x16, 0x73, 0x09, 0x76, 0x09, 0x5d, 0x79, 0x08, 0xad, 0x90, 0x25, 0x74, 0xa9, 0x21, 0x96, 0x60, 0x95, 0xb0, 0x6d, 0x2c, 0x37, 0x86, 0x12, 0xcc, 0x34, 0xba, 0x82, 0xe8, 0xca, 0xd0, 0xd3, 0xc8, 0x0e, 0x57, 0x14, 0x6c, 0x19, 0x87, 0x0b, 0x5d, 0x41, 0x30, 0x15, 0xe2, 0x2e, 0x6c, 0x79, 0x41, 0x57, 0xb8, 0xa9, 0xd0, 0xe5, 0x78, 0x13, 0x19, 0xaa, 0xc2, 0x86, 0x21, 0x5d, 0x64, 0xb8, 0x12, 0x0b, 0x3a, 0x28, 0xe1, 0xae, 0x2a, 0xcc, 0xe8, 0x20, 0x4e, 0x85, 0xa8, 0x6c, 0x53, 0x51, 0x12, 0x99, 0x19, 0x71, 0x42, 0xd3, 0x98, 0xb9, 0x8a, 0x5a, 0x26, 0xc0, 0xd0, 0x16, 0xae, 0xea, 0xd2, 0xdc, 0xd5, 0x62, 0x23, 0xb9, 0x50, 0x73, 0x35, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x2e, 0x6e, 0x9c, 0xdb, 0x4c, 0xec, 0x84, 0xde, 0xb1, 0x48, 0x11, 0xb3, 0x82, 0x80, 0x22, 0xcb, 0x5b, 0xa8, 0x54, 0x54, 0x45, 0x09, 0x39, 0x74, 0xe0, 0xb2, 0x53, 0x25, 0x78, 0x50, 0x81, 0xf3, 0x5e, 0x1b, 0xe1, 0x41, 0x79, 0x21, 0x33, 0x1d, 0x80, 0x5b, 0x2c, 0x85, 0x4d, 0x67, 0x82, 0x29, 0x19, 0x61, 0x95, 0x9d, 0x21, 0x26, 0xe5, 0x11, 0x48, 0x56, 0x65, 0x63, 0x06, 0x3c, 0x45, 0x22, 0x80, 0x2b, 0xcc, 0x19, 0x70, 0xa4, 0x59, 0x0b, 0x9c, 0x3e, 0x17, 0xc9, 0xd2, 0x23, 0xd5, 0xea, 0x92, 0x31, 0x06, 0x15, 0x91, 0xdb, 0x0d, 0xa2, 0x1e, 0x35, 0x24, 0xe5, 0x26, 0x48, 0xbb, 0x60, 0x00, 0x82, 0xdd, 0x3c, 0x6a, 0x30, 0x5d, 0x21, 0x1e, 0xe8, 0x68, 0xde, 0x58, 0xb4, 0x89, 0x90, 0xd0, 0x62, 0x13, 0x9e, 0x4e, 0x76, 0x48, 0xe3, 0x8d, 0x69, 0xba, 0x98, 0x46, 0xbd, 0x30, 0x26, 0x6e, 0x66, 0xb7, 0x10, 0x4d, 0x99, 0x7a, 0x85, 0xe5, 0x53, 0x78, 0x1d, 0xd9, 0xe1, 0x82, 0x8e, 0x66, 0x5d, 0x55, 0x98, 0x19, 0x1e, 0x86, 0x74, 0x95, 0x64, 0x19, 0xd2, 0x04, 0xc0, 0x4f, 0x90, 0xa6, 0x09, 0x94, 0x89, 0x3c, 0x4e, 0x16, 0x21, 0x49, 0x25, 0x55, 0x65, 0xa8, 0xd8, 0x2a, 0x5d, 0xe3, 0xec, 0xe1, 0x2c, 0x37, 0xf5, 0x0d, 0x6a, 0xba, 0x88, 0xe4, 0x14, 0x45, 0xbe, 0xc1, 0x1c, 0x95, 0x4e, 0x16, 0xe4, 0x19, 0x5b, 0x07, 0x3a, 0x59, 0x14, 0x15, 0xaa, 0x65, 0xe4, 0xe4, 0x91, 0x69, 0x85, 0xbb, 0xe8, 0x93, 0x47, 0x6e, 0x55, 0xa9, 0x82, 0x4f, 0x11, 0x94, 0x67, 0x17, 0x1b, 0x3e, 0x66, 0x30, 0x96, 0x59, 0x24, 0x7a, 0x04, 0x2e, 0x6a, 0x67, 0x60, 0xe0, 0x96, 0xba, 0x2a, 0x93, 0x01, 0x81, 0x4a, 0xee, 0x0a, 0x4f, 0x18, 0x06, 0x4e, 0xb9, 0x6d, 0xb2, 0x61, 0x18, 0x28, 0x15, 0x3e, 0xcb, 0x44, 0x40, 0xa0, 0xe4, 0xd9, 0x62, 0xe5, 0x01, 0xa1, 0x42, 0xa5, 0xb3, 0xa5, 0x06, 0x44, 0x52, 0x25, 0x0b, 0x96, 0x1a, 0x50, 0x19, 0x00, 0x00, 0x00, 0xe0, 0xff};
const uint8_t player1join[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa5, 0x8e, 0xc4, 0x33, 0x08, 0x63, 0x07, 0x2f, 0xb1, 0x28, 0x17, 0xb5, 0x12, 0xca, 0xa4, 0xaa, 0xcc, 0xcc, 0xf6, 0x09, 0xbd, 0x1b, 0x57, 0x6d, 0xc3, 0x27, 0x0c, 0xba, 0x3a, 0x25, 0xc4, 0x9c, 0x28, 0x4a, 0x9f, 0x4c, 0x27, 0x73, 0xa2, 0xc4, 0xb5, 0xa7, 0x82, 0xcc, 0x89, 0x92, 0x94, 0x9a, 0x36, 0x22, 0x27, 0x4a, 0x8a, 0x6b, 0x46, 0x84, 0x9c, 0x28, 0x58, 0x9e, 0x4e, 0x31, 0x72, 0x22, 0x1f, 0x65, 0xc2, 0x35, 0xe8, 0x88, 0x74, 0x95, 0x76, 0xd5, 0x62, 0x85, 0x15, 0x0f, 0x53, 0x3c, 0x6b, 0x06, 0x8e, 0x3e, 0x55, 0xe8, 0x4c, 0x14, 0x04, 0x72, 0x43, 0x41, 0xaa, 0x49, 0x4b, 0xc5, 0x73, 0x41, 0x8f, 0x58, 0x2b, 0xb3, 0xc7, 0x99, 0x3a, 0x2c, 0x9d, 0xcc, 0x37, 0x17, 0x9e, 0x30, 0x7d, 0x72, 0x1f, 0x2a, 0x28, 0xd3, 0xd0, 0x29, 0xac, 0x89, 0xe6, 0x50, 0x43, 0x45, 0x06, 0xb9, 0x5b, 0xd4, 0xad, 0x1c, 0x55, 0x0b, 0x4f, 0x2f, 0x23, 0xdb, 0x2a, 0x60, 0xa2, 0xa2, 0x54, 0x59, 0xab, 0x80, 0x89, 0xa9, 0x71, 0xbb, 0xa3, 0x02, 0xb6, 0xcb, 0x5c, 0xec, 0x9d, 0x52, 0x26, 0x0b, 0x31, 0xb6, 0x77, 0x0a, 0xe7, 0x22, 0x55, 0xcd, 0xf4, 0x51, 0x9c, 0xac, 0x2a, 0xf2, 0x40, 0x43, 0xb7, 0xb0, 0xab, 0xc5, 0x4a, 0x0a, 0x20, 0x01, 0x49, 0x06, 0x78, 0x20, 0x65, 0x1c, 0x20, 0x76, 0x2a, 0x44, 0x92, 0xb3, 0x81, 0xe8, 0xde, 0x56, 0xca, 0x02, 0xc8, 0x04, 0x79, 0x74, 0x4d, 0x10, 0x4a, 0x46, 0xac, 0x45, 0x08, 0x5d, 0x61, 0xad, 0x32, 0x97, 0xc2, 0x63, 0xb9, 0xa6, 0xdb, 0x18, 0x84, 0x28, 0xe5, 0x98, 0x15, 0x61, 0x28, 0x2a, 0x77, 0x80, 0x57, 0x8d, 0x49, 0x2c, 0xd5, 0xe6, 0x76, 0xf4, 0xaa, 0x70, 0x74, 0x97, 0xdb, 0x28, 0x2a, 0xc4, 0x31, 0x6d, 0x71, 0x93, 0x74, 0x93, 0xc7, 0xb6, 0xd6, 0x83, 0x4b, 0x02, 0x9f, 0x30, 0x08, 0x29, 0x4f, 0x31, 0xb2, 0xd2, 0xc4, 0x28, 0xb2, 0xcd, 0x48, 0xc9, 0x05, 0xd3, 0x9e, 0x30, 0x6a, 0xa6, 0x04, 0x79, 0xda, 0x51, 0xe3, 0x8a, 0x02, 0xf4, 0x1a, 0xa4, 0x74, 0xc2, 0x0a, 0xb0, 0xab, 0x08, 0xc3, 0x6e, 0xa9, 0x2a, 0xb0, 0x70, 0x53, 0x3b, 0x29, 0xef, 0x40, 0xdc, 0xd3, 0x4c, 0x11, 0x60, 0x20, 0xd6, 0x90, 0x0f, 0x16, 0x26, 0x95, 0x86, 0x85, 0x5b, 0x68, 0x78, 0xa4, 0x19, 0x05, 0x00, 0x00, 0x78, 0xff};
const uint8_t player2join[] PROGMEM = {0x00, 0x00, 0x00, 0x06, 0x6b, 0x5c, 0xb2, 0x8d, 0x1b, 0x27, 0xac, 0x50, 0xad, 0x52, 0xa9, 0x85, 0x80, 0xc2, 0xab, 0x9a, 0xef, 0x52, 0x85, 0x78, 0x9a, 0x3e, 0x81, 0xf7, 0x55, 0xa6, 0x21, 0xf6, 0x04, 0x41, 0x7b, 0x67, 0xb8, 0xd0, 0x43, 0x05, 0xed, 0x3d, 0xe9, 0xc2, 0x0e, 0x15, 0x94, 0x76, 0xa7, 0x09, 0x39, 0x54, 0xb4, 0xdc, 0xd5, 0x6a, 0xf8, 0x50, 0xc1, 0xf3, 0x54, 0x69, 0xe1, 0x43, 0xf9, 0x24, 0xdd, 0x29, 0x85, 0x17, 0xad, 0x8b, 0x4c, 0x25, 0x85, 0x4a, 0x09, 0x8f, 0xbc, 0x69, 0x68, 0x51, 0xe4, 0xa8, 0x4a, 0x27, 0x93, 0xac, 0x96, 0x0e, 0x62, 0x16, 0xae, 0x76, 0x05, 0x30, 0xb0, 0x92, 0x02, 0x56, 0x08, 0x56, 0xc0, 0x8c, 0xc6, 0x27, 0x8e, 0x9c, 0x62, 0xbb, 0x08, 0x5d, 0xfe, 0x08, 0x96, 0x7b, 0x5e, 0xa4, 0xa1, 0x23, 0x32, 0x5d, 0xb5, 0xe4, 0x66, 0x9b, 0x40, 0x47, 0xa0, 0xda, 0x0c, 0x49, 0x22, 0x3f, 0x0a, 0x35, 0x6d, 0xb8, 0xc9, 0x72, 0x99, 0xe8, 0xb4, 0xa1, 0x23, 0xab, 0xba, 0xa9, 0x66, 0x05, 0x8f, 0xea, 0x7c, 0xa7, 0x9b, 0x04, 0x3a, 0xaa, 0x76, 0x95, 0xa6, 0x2a, 0xa4, 0x95, 0x48, 0x4e, 0x86, 0x85, 0xe1, 0xd2, 0x46, 0xa0, 0x55, 0xe9, 0xb1, 0x19, 0x10, 0x00, 0x97, 0x71, 0x00, 0x9f, 0xa9, 0x14, 0x4b, 0xc6, 0x06, 0x76, 0x66, 0x42, 0x28, 0x33, 0x20, 0x12, 0xe4, 0xd6, 0x77, 0x45, 0x48, 0xee, 0x89, 0x87, 0x22, 0x54, 0x84, 0xb7, 0xca, 0x5c, 0x0a, 0x0f, 0xe5, 0x5a, 0x66, 0x63, 0x10, 0xbc, 0x94, 0x51, 0x66, 0x84, 0xa6, 0xa8, 0xda, 0x0e, 0xde, 0x35, 0x86, 0xa2, 0xd3, 0x24, 0x58, 0xd6, 0x58, 0xaa, 0xcd, 0x13, 0x10, 0x55, 0x61, 0xe9, 0x2e, 0x4e, 0x60, 0x54, 0x88, 0x65, 0xda, 0x12, 0xca, 0x15, 0x26, 0x97, 0x65, 0xbc, 0x39, 0x97, 0x84, 0x5e, 0x7e, 0x90, 0x52, 0x56, 0x6a, 0x64, 0xa4, 0x89, 0x51, 0x66, 0x9b, 0x90, 0x92, 0x6b, 0xa6, 0xd5, 0x65, 0x44, 0x4d, 0x01, 0x5c, 0x4d, 0xa9, 0xc8, 0x63, 0x25, 0x18, 0x35, 0x48, 0xe9, 0x84, 0x15, 0x60, 0x77, 0x31, 0x86, 0xdd, 0x54, 0x45, 0xe0, 0xe1, 0xaa, 0x4e, 0x52, 0x3e, 0x80, 0x86, 0xa7, 0x9a, 0x46, 0xc0, 0x80, 0x24, 0x2e, 0x1f, 0xdc, 0x95, 0x33, 0x0c, 0xa9, 0xbc, 0xe1, 0x70, 0x6d, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t player3join[] PROGMEM = {0x60, 0xb0, 0xc6, 0x25, 0xdb, 0xb8, 0x71, 0xc1, 0x0a, 0xd5, 0x2a, 0xe5, 0x5a, 0x08, 0x28, 0xac, 0xaa, 0xf9, 0x2e, 0x55, 0xa8, 0xa5, 0xe9, 0x13, 0x78, 0x5f, 0x65, 0x1a, 0x62, 0x4f, 0x10, 0xb4, 0x77, 0x86, 0x8b, 0x3d, 0x54, 0xd0, 0xde, 0x93, 0x2e, 0xec, 0x50, 0x41, 0x69, 0x77, 0x9a, 0x90, 0x43, 0x45, 0xcb, 0x5d, 0xad, 0x86, 0x0f, 0x15, 0x3c, 0x4f, 0x95, 0x16, 0x3e, 0x94, 0x8f, 0x32, 0x9d, 0x5a, 0xf8, 0x70, 0xda, 0x7a, 0x45, 0xab, 0xa9, 0x93, 0x52, 0x37, 0xed, 0x6a, 0x64, 0x43, 0x05, 0x6c, 0x65, 0x94, 0xc8, 0x09, 0x49, 0xe5, 0x9a, 0x11, 0x1e, 0xb5, 0x90, 0x45, 0x5a, 0x58, 0xb9, 0x9d, 0xe6, 0x16, 0x69, 0x1e, 0x6e, 0x51, 0x52, 0xd2, 0xac, 0x98, 0xa8, 0xc4, 0x6e, 0x1c, 0x8d, 0xda, 0x99, 0x1a, 0xf3, 0x70, 0x56, 0x69, 0xf7, 0x78, 0xc4, 0xc3, 0x25, 0x2a, 0xb6, 0x9b, 0x25, 0x0f, 0x17, 0xb1, 0xfa, 0xad, 0x09, 0x19, 0x99, 0x90, 0xb6, 0x23, 0x48, 0xad, 0xe4, 0x40, 0xd5, 0x8c, 0x82, 0xb3, 0x96, 0x03, 0x3b, 0x53, 0xca, 0xce, 0x56, 0x0e, 0x6d, 0x55, 0x0a, 0xc9, 0x3b, 0xb9, 0x08, 0x96, 0xaa, 0x42, 0xef, 0x64, 0xde, 0x47, 0xa9, 0x19, 0xd9, 0x93, 0x19, 0xdd, 0x19, 0x12, 0x44, 0x5b, 0x41, 0xe9, 0x65, 0xa8, 0x5a, 0x69, 0x75, 0x04, 0x1a, 0x55, 0x19, 0x5b, 0x00, 0x01, 0x70, 0x3a, 0x07, 0xb0, 0x9e, 0x49, 0xb1, 0xe4, 0x2c, 0x60, 0x66, 0x36, 0x85, 0x32, 0x03, 0x12, 0x41, 0x6e, 0x5d, 0x57, 0x8c, 0xec, 0x9e, 0x78, 0x11, 0x52, 0x45, 0x78, 0x9b, 0xcc, 0xa5, 0xf0, 0x50, 0xae, 0x69, 0x36, 0x06, 0x21, 0x5a, 0x19, 0x55, 0x46, 0x18, 0x84, 0x2c, 0xed, 0x60, 0x55, 0x63, 0xa8, 0xba, 0x74, 0x80, 0x57, 0x85, 0xad, 0x1e, 0xdd, 0xa5, 0x0e, 0x8c, 0x2a, 0x71, 0x4c, 0x9b, 0xcb, 0xb8, 0x22, 0xe4, 0xb2, 0x4d, 0x30, 0x97, 0x92, 0xd0, 0x27, 0x08, 0x52, 0xca, 0x4a, 0x8c, 0xac, 0x34, 0x31, 0xca, 0x6c, 0x15, 0xd2, 0x72, 0xc5, 0xb4, 0x3b, 0x95, 0x9c, 0x29, 0x41, 0xec, 0x71, 0x13, 0xa5, 0xa2, 0x04, 0xa3, 0x06, 0x29, 0x9d, 0xb0, 0x02, 0x9c, 0x2a, 0xa2, 0xb0, 0x53, 0xaa, 0x08, 0x3c, 0xdc, 0xd4, 0x4e, 0xca, 0x07, 0x90, 0xf0, 0x30, 0xd3, 0x04, 0xe8, 0x80, 0x34, 0xe4, 0x93, 0xbb, 0x4a, 0x65, 0x20, 0xe5, 0x16, 0x1c, 0x1e, 0xa5, 0x46, 0x01, 0x00, 0x1e, 0xff};
const uint8_t player4join[] PROGMEM = {0x00, 0x00, 0x00, 0xc6, 0x2f, 0x52, 0x3a, 0x58, 0x62, 0x87, 0x3c, 0xe2, 0x28, 0x63, 0x8a, 0xe3, 0xdc, 0xc4, 0xa3, 0x5c, 0x4d, 0x4a, 0x88, 0x82, 0xed, 0x50, 0x09, 0xcb, 0x27, 0xf4, 0x76, 0xc2, 0xa4, 0x0d, 0x9f, 0x28, 0xa8, 0xea, 0xd4, 0x10, 0x73, 0xa2, 0x24, 0x6d, 0x32, 0x8d, 0xcc, 0x89, 0x92, 0xd0, 0x9e, 0x0e, 0x32, 0x27, 0x4a, 0x52, 0x6a, 0xda, 0x88, 0x9c, 0x28, 0x6a, 0xae, 0x19, 0x11, 0xba, 0xc2, 0xe0, 0x78, 0x2a, 0xc4, 0xc8, 0x88, 0x5c, 0x92, 0x09, 0x97, 0xa0, 0x23, 0x92, 0x55, 0x26, 0x9d, 0x03, 0x8f, 0x98, 0x16, 0xad, 0x72, 0xb6, 0xd4, 0x0a, 0xc9, 0x2c, 0x22, 0x3c, 0x4a, 0x4a, 0x9a, 0x52, 0x33, 0x0f, 0x2b, 0x2e, 0x6b, 0xca, 0x5c, 0x4c, 0xe5, 0x22, 0xa0, 0x28, 0x0f, 0x63, 0xa9, 0xdc, 0xc9, 0x62, 0x76, 0x52, 0xc6, 0x67, 0x27, 0x58, 0x2e, 0x48, 0x02, 0xdb, 0x1d, 0x60, 0x31, 0xa3, 0x49, 0xf2, 0xb9, 0x41, 0x66, 0x05, 0x03, 0xe8, 0xc7, 0xbe, 0x64, 0xbb, 0x28, 0x3d, 0xb4, 0xc2, 0x52, 0x5c, 0xe1, 0x0a, 0xa7, 0x8a, 0x47, 0xf5, 0x51, 0x2a, 0x12, 0x43, 0xb5, 0x8a, 0x7a, 0x4d, 0x77, 0x32, 0x5b, 0x4a, 0x20, 0xad, 0x3b, 0xd5, 0x5e, 0x29, 0x81, 0xae, 0x32, 0x97, 0xa4, 0xab, 0x94, 0xd1, 0x52, 0x4c, 0xa4, 0x9d, 0xc2, 0xb9, 0x2a, 0x53, 0x33, 0xbc, 0x54, 0x2b, 0xbb, 0x8a, 0x3c, 0x50, 0x31, 0x0c, 0xea, 0x2a, 0xb1, 0x8a, 0xa9, 0x2b, 0x80, 0xa2, 0xd2, 0x63, 0x21, 0x40, 0x01, 0x6d, 0xe5, 0x00, 0x73, 0x9d, 0x2e, 0xb2, 0x9d, 0x0d, 0x68, 0xd4, 0x6e, 0x48, 0x22, 0x40, 0xa1, 0x48, 0xad, 0x2d, 0x9c, 0xd8, 0xcb, 0x63, 0x0d, 0x82, 0xeb, 0x0a, 0x6b, 0xb3, 0x39, 0x14, 0x1e, 0xcb, 0x25, 0xcd, 0x42, 0x21, 0x44, 0x2d, 0xc7, 0xa8, 0x08, 0x45, 0x51, 0xb9, 0x03, 0xac, 0x6a, 0x34, 0x45, 0x97, 0x09, 0xf0, 0xae, 0x30, 0x34, 0x97, 0x27, 0x20, 0xaa, 0xc2, 0xd2, 0x7d, 0x6e, 0xc7, 0xec, 0x10, 0xc3, 0xb4, 0xd9, 0x95, 0xcb, 0x42, 0x0d, 0xc7, 0x5a, 0x4b, 0x29, 0x09, 0x3c, 0xc2, 0x28, 0x38, 0xbd, 0xd4, 0x48, 0xcb, 0x12, 0xa5, 0xa8, 0x31, 0x21, 0x29, 0xe7, 0x5c, 0x6b, 0xca, 0xc8, 0x88, 0x0a, 0xe4, 0x6e, 0x27, 0x4e, 0x4a, 0x0a, 0x30, 0x6b, 0x90, 0xd3, 0x09, 0x29, 0xc0, 0xe9, 0x62, 0x72, 0xbb, 0xa9, 0x2c, 0xc0, 0xdc, 0x4d, 0xe5, 0x84, 0xa2, 0x03, 0x76, 0x4f, 0x37, 0xe5, 0xca, 0x81, 0x59, 0xcd, 0x35, 0xa4, 0xc9, 0x3b, 0x75, 0xd3, 0x4e, 0xc3, 0xc4, 0x29, 0x38, 0xdc, 0xd3, 0xc4, 0x00, 0x00, 0xc0, 0xff};
const uint8_t player5join[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x04, 0x28, 0x52, 0x3a, 0x55, 0x95, 0x47, 0x99, 0xaa, 0x6d, 0x04, 0x14, 0x1e, 0xad, 0x00, 0xbf, 0x42, 0x4f, 0x68, 0x4b, 0x1b, 0x7b, 0x1b, 0x39, 0xb1, 0x77, 0xd3, 0xae, 0x61, 0xe4, 0x24, 0xde, 0x55, 0x57, 0x3a, 0x91, 0x93, 0x46, 0xad, 0xd5, 0x65, 0x82, 0x4f, 0x16, 0x0d, 0x55, 0xb5, 0x1a, 0x5a, 0x59, 0x74, 0x58, 0xd9, 0x62, 0x68, 0x65, 0x21, 0xd0, 0x64, 0x48, 0xa0, 0x95, 0xbb, 0xc8, 0x5d, 0xce, 0x01, 0x87, 0xa2, 0x9a, 0x64, 0x05, 0x96, 0x2c, 0x15, 0xca, 0x6e, 0x1e, 0x22, 0x45, 0x00, 0x91, 0x88, 0x23, 0xa0, 0x73, 0x53, 0x08, 0x58, 0xe1, 0x11, 0xe9, 0x16, 0xfb, 0x24, 0x21, 0xae, 0xb1, 0x47, 0x81, 0x93, 0xc5, 0xb8, 0x4a, 0x11, 0x05, 0x4f, 0x96, 0xdc, 0x9a, 0xb8, 0x17, 0x3c, 0x79, 0x0a, 0x65, 0xe6, 0x11, 0xe8, 0xe4, 0x31, 0x44, 0x68, 0xb8, 0xe0, 0x93, 0x85, 0xe0, 0xe9, 0x61, 0x42, 0x5b, 0xc6, 0xa2, 0xa7, 0xb9, 0x8a, 0x35, 0x39, 0xe8, 0x95, 0x1e, 0x66, 0x3b, 0xd5, 0x49, 0x99, 0xab, 0x86, 0xa5, 0x52, 0x63, 0x13, 0x25, 0x62, 0xf2, 0x5a, 0x0e, 0x74, 0x74, 0xa8, 0xda, 0x3b, 0xa5, 0xb2, 0x5e, 0x2a, 0x46, 0xf5, 0x68, 0xce, 0x46, 0x85, 0xb8, 0xe0, 0xa5, 0x8a, 0xdc, 0xa9, 0xec, 0x64, 0x87, 0x8a, 0xcd, 0x94, 0x69, 0x90, 0x29, 0xb5, 0x03, 0xb1, 0xe5, 0x6a, 0x99, 0x01, 0x09, 0x50, 0x38, 0x0e, 0xa3, 0x9a, 0x2e, 0xb6, 0x25, 0x5a, 0xd0, 0xaf, 0x42, 0x59, 0x5a, 0x70, 0x1d, 0x26, 0xeb, 0xad, 0xc4, 0x02, 0xe8, 0x92, 0x60, 0xd4, 0x8e, 0x59, 0x78, 0x9b, 0xcd, 0xa5, 0x08, 0x5b, 0xa1, 0xa5, 0x36, 0x06, 0xc1, 0x6b, 0x19, 0x57, 0xd8, 0x68, 0x84, 0xcc, 0x1d, 0xe0, 0x59, 0xa3, 0x11, 0xba, 0x74, 0x80, 0x55, 0x8d, 0xa1, 0x9a, 0xd2, 0x0e, 0xd9, 0x15, 0x96, 0xe6, 0x72, 0x3b, 0x66, 0x85, 0xd8, 0xe6, 0x32, 0x6d, 0x30, 0xe7, 0x92, 0x50, 0xcb, 0x0b, 0x4a, 0x53, 0x4b, 0x03, 0x8f, 0x38, 0x72, 0x8e, 0x18, 0x35, 0xd2, 0xb2, 0x48, 0x29, 0xab, 0x8d, 0xa8, 0x2b, 0x80, 0x8a, 0xad, 0x50, 0xaa, 0x4c, 0x01, 0xbd, 0x9b, 0xc9, 0x93, 0x90, 0x02, 0xec, 0x6a, 0xe4, 0xb0, 0xe3, 0x4a, 0x46, 0xaa, 0xd2, 0xcd, 0x49, 0xca, 0x07, 0xb0, 0x70, 0x57, 0x29, 0xa1, 0xed, 0x80, 0xd4, 0xd3, 0x63, 0xba, 0x62, 0x72, 0x35, 0x75, 0x0f, 0xa4, 0xb2, 0x86, 0x23, 0xbc, 0x5d, 0x0c, 0x00, 0x00, 0x3c, 0xff};
const uint8_t saidthatplayer1[] PROGMEM = {0x00, 0x00, 0x00, 0x90, 0xe4, 0x26, 0x35, 0x2a, 0x5d, 0xec, 0xe2, 0x3d, 0x97, 0x9e, 0x71, 0xa1, 0x47, 0x0c, 0x9c, 0xbb, 0x37, 0x88, 0x1d, 0xd1, 0x73, 0xae, 0xb9, 0x10, 0x5a, 0x72, 0xa0, 0x6b, 0xb6, 0x98, 0x58, 0x2b, 0x19, 0xb5, 0x9e, 0x36, 0x6a, 0x43, 0xf2, 0x44, 0x6a, 0xce, 0x09, 0x2d, 0xc1, 0x48, 0xde, 0x1d, 0x23, 0xbc, 0x44, 0xa9, 0x74, 0x27, 0x5d, 0xf0, 0x92, 0xb9, 0xf2, 0xe9, 0x74, 0xc1, 0xa3, 0xb6, 0xa0, 0xaa, 0xc6, 0x45, 0x29, 0xe0, 0x22, 0x12, 0x01, 0x3c, 0xed, 0xc6, 0x80, 0x25, 0xcd, 0x46, 0x12, 0x79, 0x64, 0x79, 0x0a, 0x3e, 0x99, 0x35, 0xdd, 0xa9, 0x41, 0xf4, 0x64, 0xda, 0x4d, 0x85, 0x04, 0xd0, 0x54, 0x80, 0x38, 0xe9, 0x96, 0xe0, 0x94, 0x0a, 0x5e, 0xa8, 0xa9, 0xaa, 0x77, 0x35, 0x90, 0x3d, 0x66, 0x6e, 0xc7, 0x30, 0x99, 0x45, 0xbb, 0xb0, 0xed, 0x93, 0x79, 0x73, 0x2e, 0x1a, 0x03, 0x8f, 0x1c, 0xd4, 0x94, 0x71, 0x14, 0x3a, 0x4a, 0x50, 0xd5, 0xa1, 0x6e, 0xf8, 0xa8, 0x41, 0x45, 0xa5, 0x3b, 0xd1, 0xa3, 0x3a, 0x15, 0xd5, 0xa6, 0xc4, 0x0e, 0x61, 0x4c, 0x55, 0xbb, 0x10, 0x3d, 0xb2, 0x4a, 0xd1, 0xe5, 0x42, 0xf8, 0xe4, 0x21, 0x52, 0x65, 0x63, 0x88, 0x95, 0xfb, 0x4c, 0x13, 0xc1, 0x25, 0x46, 0xae, 0x1b, 0xb5, 0x85, 0x94, 0x6c, 0x04, 0x5f, 0x94, 0x96, 0x5a, 0xa2, 0xe8, 0xec, 0x91, 0x5b, 0x9b, 0x49, 0xc7, 0xa0, 0xa7, 0x8c, 0x93, 0x16, 0x9d, 0x05, 0x4e, 0x19, 0x68, 0x24, 0x2a, 0x06, 0x19, 0xa5, 0xe0, 0x91, 0x68, 0xe8, 0x3a, 0x4f, 0x40, 0x55, 0xe4, 0xa5, 0x7b, 0x3f, 0x09, 0x55, 0x81, 0x8f, 0x1a, 0x5c, 0x07, 0x54, 0x1a, 0x3e, 0x8a, 0x8f, 0xa1, 0xd8, 0x25, 0x78, 0x29, 0x26, 0x86, 0x51, 0x17, 0xe9, 0x55, 0x08, 0x5f, 0xce, 0x1d, 0x50, 0x4a, 0x0e, 0x62, 0x95, 0xa4, 0x4b, 0x0c, 0x19, 0xa8, 0xdd, 0x14, 0x1c, 0xc7, 0xa4, 0xe0, 0x85, 0x53, 0x6a, 0x6c, 0x95, 0x80, 0xdb, 0x09, 0x2e, 0x75, 0x54, 0x02, 0x5e, 0x97, 0xb8, 0x3a, 0x21, 0x09, 0xf8, 0xad, 0xe6, 0x96, 0x14, 0x65, 0xe0, 0x6d, 0xba, 0xa9, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t saidthatplayer2[] PROGMEM = {0x00, 0x00, 0x00, 0x80, 0x80, 0x26, 0x35, 0x1a, 0xe3, 0xb9, 0x54, 0xb7, 0x0b, 0x3b, 0x42, 0xe0, 0xdc, 0xbd, 0x41, 0xf4, 0x8a, 0x43, 0x16, 0x42, 0x67, 0xd6, 0x88, 0x96, 0x02, 0x88, 0x9a, 0x0d, 0xa1, 0x36, 0x64, 0x8f, 0xa4, 0xfa, 0x9c, 0xf0, 0x12, 0x0d, 0x97, 0xd9, 0x33, 0x42, 0x4b, 0x50, 0x4a, 0x76, 0xca, 0x85, 0x2c, 0x49, 0x28, 0x9b, 0x2e, 0x17, 0x3c, 0x54, 0x81, 0xbb, 0xa6, 0x54, 0x50, 0xeb, 0x0b, 0x10, 0x8f, 0xce, 0x58, 0x0a, 0xf8, 0xd6, 0x94, 0x01, 0x5b, 0xb9, 0x16, 0xb9, 0x33, 0xf3, 0x48, 0x8f, 0x7c, 0x52, 0xaf, 0xaa, 0x4a, 0x93, 0xe8, 0xc9, 0x8c, 0xeb, 0x0e, 0x09, 0x20, 0x23, 0x67, 0xb6, 0x2b, 0x24, 0xc8, 0x1a, 0x15, 0x9c, 0xf2, 0x50, 0x61, 0xae, 0x34, 0x30, 0x37, 0xc5, 0x4c, 0xaa, 0xeb, 0x02, 0xb6, 0x36, 0x11, 0xcb, 0x25, 0xf5, 0xf6, 0x9c, 0x25, 0x46, 0x9e, 0x3c, 0x98, 0x0d, 0x95, 0x18, 0x78, 0x94, 0xa0, 0xba, 0x83, 0x3d, 0xf0, 0x51, 0x83, 0x8a, 0x0e, 0x73, 0x21, 0x47, 0xf5, 0x2a, 0xba, 0xcc, 0x88, 0x1e, 0xd2, 0xea, 0xaa, 0x76, 0x21, 0x76, 0x14, 0x15, 0xaa, 0xcb, 0x84, 0xf0, 0x90, 0x64, 0xf5, 0x4e, 0x43, 0x33, 0x2d, 0x17, 0x43, 0x47, 0x85, 0x43, 0xb7, 0x4c, 0x16, 0x19, 0x17, 0x0a, 0xdc, 0x32, 0x1d, 0xa8, 0xba, 0x29, 0x42, 0x29, 0x44, 0xc0, 0xec, 0x65, 0x4b, 0xaa, 0x01, 0x81, 0xbb, 0xdb, 0x6d, 0x0a, 0x60, 0x28, 0xf7, 0xd6, 0x6f, 0xa6, 0x42, 0x61, 0x15, 0x15, 0x30, 0x8d, 0x4b, 0x21, 0x9a, 0x10, 0xcd, 0xcc, 0x40, 0x27, 0xf3, 0x5c, 0x73, 0xca, 0x0d, 0x5e, 0xe9, 0x48, 0x56, 0x7a, 0x4d, 0x9b, 0xc1, 0x2b, 0x2d, 0x51, 0x98, 0x98, 0x32, 0x33, 0x3c, 0x44, 0xd8, 0x3a, 0x4d, 0xcc, 0x74, 0x4a, 0xc1, 0x2b, 0x51, 0x0b, 0xa1, 0x26, 0x01, 0xdf, 0x50, 0x23, 0x8d, 0xaa, 0x04, 0x7c, 0xe1, 0x68, 0x17, 0x23, 0x32, 0xf0, 0xcb, 0xcc, 0x3b, 0x32, 0x2a, 0xc1, 0xdb, 0x34, 0x71, 0xcb, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t saidthatplayer3[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6a, 0x52, 0xa3, 0x32, 0xc4, 0x2e, 0xde, 0x73, 0xe9, 0x19, 0x17, 0x7a, 0xc4, 0xc0, 0xb9, 0x7b, 0x83, 0xe8, 0x11, 0x03, 0xe7, 0x9a, 0x4b, 0xa1, 0x25, 0x07, 0x2a, 0x66, 0x5b, 0x88, 0xb5, 0x82, 0x32, 0x9f, 0x69, 0xa5, 0x36, 0x24, 0x8f, 0xa5, 0xfa, 0x9c, 0xf0, 0x12, 0x8d, 0x90, 0xd9, 0x35, 0x42, 0x4b, 0x94, 0x4a, 0x77, 0xd2, 0x05, 0x2f, 0x99, 0x2b, 0x9f, 0x2e, 0x17, 0x3c, 0x2a, 0x03, 0xaa, 0x6a, 0x4c, 0x94, 0x02, 0x36, 0x20, 0x11, 0xc0, 0x37, 0x66, 0x0c, 0x58, 0xca, 0xad, 0xb9, 0x89, 0x45, 0x96, 0xa7, 0xe1, 0x93, 0x5a, 0xd3, 0x9d, 0x1a, 0x44, 0x4f, 0xa6, 0xdd, 0x74, 0x48, 0x00, 0x2d, 0x05, 0xf0, 0x9d, 0xae, 0x09, 0xce, 0xa8, 0xe0, 0x85, 0xba, 0xaa, 0x7a, 0xa7, 0x03, 0x33, 0x63, 0xea, 0x76, 0x0c, 0x93, 0x68, 0xb4, 0x0b, 0xdb, 0x5e, 0x99, 0x37, 0xe7, 0xac, 0x31, 0xf0, 0xc8, 0x41, 0x4f, 0x1a, 0x47, 0xa1, 0xa3, 0x04, 0x55, 0x1d, 0xe2, 0x86, 0x8f, 0x1a, 0x54, 0x54, 0xba, 0x13, 0x3d, 0xaa, 0x53, 0x51, 0x6d, 0x4a, 0xec, 0x90, 0xc6, 0x54, 0xb5, 0x0b, 0xd1, 0x25, 0xab, 0x54, 0x5d, 0xc6, 0x84, 0x47, 0x2e, 0xbb, 0x8d, 0x2b, 0x99, 0x6d, 0xb9, 0xec, 0x32, 0xaa, 0x1c, 0x78, 0x64, 0x2a, 0x6b, 0x65, 0x61, 0xc9, 0x95, 0x88, 0x64, 0x99, 0x43, 0x11, 0x56, 0xca, 0x5c, 0xb5, 0xb9, 0x9a, 0x6a, 0x09, 0x0c, 0xd1, 0xec, 0x46, 0xc7, 0x14, 0x40, 0x47, 0x87, 0x59, 0x14, 0x97, 0x14, 0xa1, 0x9a, 0x1e, 0x92, 0x09, 0xd0, 0x94, 0x9b, 0xa9, 0xaa, 0xf0, 0xc8, 0x4c, 0x5b, 0x02, 0x48, 0x32, 0x3a, 0x65, 0xcc, 0x95, 0x6b, 0x58, 0xa4, 0xa2, 0xe0, 0x46, 0x15, 0x2d, 0xb6, 0x9a, 0x4c, 0x3a, 0x57, 0x14, 0x55, 0x5c, 0x32, 0x4f, 0xd2, 0x31, 0x12, 0xf1, 0xc8, 0x4e, 0x49, 0xe5, 0x6a, 0xc8, 0x23, 0x47, 0x2e, 0xd5, 0x1b, 0x06, 0x8f, 0x14, 0x19, 0xe7, 0x6c, 0x0a, 0x5e, 0x52, 0x64, 0x54, 0x3b, 0x41, 0xa4, 0x89, 0x8e, 0xf3, 0x5e, 0x29, 0xb8, 0x94, 0x12, 0x1d, 0xd7, 0x8c, 0xec, 0x42, 0x42, 0x65, 0xdc, 0x2a, 0x22, 0x77, 0x31, 0x14, 0xb1, 0x6f, 0x84, 0x4c, 0x25, 0xc0, 0xf7, 0x8d, 0xb1, 0x5c, 0x96, 0x02, 0xe9, 0xbb, 0x65, 0x76, 0x50, 0x2a, 0xb9, 0x56, 0xa5, 0xc5, 0x06, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t saidthatplayer4[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xa8, 0x2a, 0xcc, 0xd4, 0xdc, 0xec, 0x14, 0xa5, 0x08, 0x89, 0x0a, 0x27, 0x7b, 0x04, 0xcf, 0xa5, 0x67, 0x5c, 0xe8, 0x11, 0x03, 0xe7, 0xea, 0x0d, 0x62, 0x47, 0xf4, 0x5c, 0x7a, 0x36, 0x84, 0xa6, 0x1c, 0x98, 0x9a, 0x4d, 0x26, 0xd7, 0x4a, 0x4e, 0xac, 0x67, 0x8c, 0xea, 0x90, 0x1c, 0x91, 0x9a, 0x73, 0x42, 0x4b, 0x30, 0x92, 0x77, 0xc6, 0x08, 0x2f, 0x51, 0x2a, 0xdd, 0x49, 0x17, 0xbc, 0x64, 0xae, 0xa2, 0x27, 0x9d, 0x70, 0xab, 0x1d, 0x88, 0xca, 0x09, 0x51, 0x0a, 0x78, 0x94, 0x84, 0x01, 0x4f, 0xb9, 0x31, 0x60, 0x0a, 0xb3, 0x95, 0x04, 0x1e, 0x59, 0x96, 0x82, 0x4f, 0x66, 0x6d, 0x77, 0x48, 0x10, 0x3d, 0xb9, 0x72, 0x53, 0x21, 0x41, 0x34, 0x15, 0x20, 0x4f, 0xb8, 0x05, 0x34, 0xa5, 0x82, 0x17, 0x6a, 0xaa, 0xea, 0x5d, 0x03, 0x78, 0x8d, 0xa9, 0xc7, 0x31, 0x4c, 0xe2, 0xd5, 0x2e, 0x12, 0xfb, 0x64, 0xde, 0x9c, 0x8b, 0xc6, 0xc0, 0x23, 0x07, 0x35, 0xe5, 0x1c, 0x85, 0x8e, 0x12, 0x54, 0x75, 0xa8, 0x1b, 0x3e, 0xaa, 0x57, 0xd1, 0xe9, 0x46, 0xf4, 0xa8, 0x4e, 0x45, 0xb5, 0x29, 0xb1, 0x43, 0x68, 0x5b, 0xdd, 0xc6, 0x44, 0x97, 0xac, 0x52, 0x74, 0x39, 0x13, 0x3e, 0x85, 0x77, 0x52, 0xdd, 0x6c, 0xe0, 0x18, 0x26, 0x6a, 0x75, 0x72, 0x88, 0xe5, 0xaa, 0x2c, 0x53, 0x26, 0x06, 0x9b, 0x43, 0x3b, 0x97, 0xab, 0x84, 0x64, 0x00, 0xf0, 0xee, 0x04, 0x10, 0xd4, 0x8c, 0x01, 0x5d, 0xa9, 0x97, 0x7a, 0x28, 0x33, 0x77, 0xb5, 0x8d, 0x80, 0xa6, 0x2c, 0x4d, 0xc1, 0xae, 0x0b, 0x44, 0xc6, 0xca, 0x45, 0x92, 0xf9, 0x0b, 0x05, 0xaf, 0x88, 0x49, 0x12, 0xcf, 0x15, 0xa6, 0x0a, 0x96, 0x5c, 0x3e, 0x51, 0x3c, 0x37, 0xd8, 0x32, 0xf5, 0x29, 0x74, 0x4c, 0x50, 0x4b, 0xe5, 0x23, 0xf7, 0x22, 0x4b, 0x2d, 0xe1, 0x47, 0x55, 0x0a, 0x6d, 0xb7, 0x98, 0x35, 0x49, 0x53, 0xac, 0x5c, 0x62, 0x1e, 0xb9, 0x5d, 0xa8, 0xac, 0x49, 0x41, 0x97, 0x0e, 0xd3, 0xb9, 0x28, 0x07, 0x33, 0x32, 0xdd, 0x92, 0x00, 0x00, 0xc0, 0xff};
const uint8_t saidthatplayer5[] PROGMEM = {0x00, 0x88, 0x69, 0x5c, 0xcd, 0xcd, 0xec, 0x14, 0x25, 0x71, 0x89, 0x0a, 0x23, 0x77, 0x84, 0xc0, 0xb9, 0x7b, 0x42, 0xe8, 0x15, 0x97, 0x64, 0xb8, 0xf4, 0xac, 0x13, 0x4d, 0x39, 0xd0, 0x3d, 0xe3, 0x42, 0xad, 0xc9, 0x06, 0x4b, 0xcf, 0x1a, 0xd9, 0x21, 0x59, 0x26, 0xbd, 0x67, 0x84, 0x86, 0x60, 0x24, 0xef, 0xb4, 0x11, 0x5e, 0xa2, 0x54, 0xba, 0x93, 0x2e, 0x78, 0x28, 0x4c, 0x54, 0x4d, 0x98, 0xe0, 0xd6, 0x06, 0xe0, 0x99, 0x93, 0x96, 0x04, 0xf0, 0x95, 0x08, 0x01, 0x8e, 0x72, 0x63, 0xc0, 0xe0, 0x66, 0x2b, 0xf1, 0xb2, 0xaa, 0x2c, 0x89, 0x9c, 0xcc, 0xda, 0xee, 0x90, 0x00, 0xb2, 0x72, 0x61, 0xa7, 0x82, 0x83, 0xac, 0x2b, 0xc0, 0x2c, 0x77, 0x53, 0x66, 0x42, 0x03, 0x2f, 0xd4, 0x4c, 0x94, 0xb9, 0x96, 0x13, 0x6f, 0x53, 0x8b, 0x63, 0x52, 0xeb, 0x36, 0x58, 0xa2, 0xd6, 0xc9, 0xbd, 0x39, 0x17, 0x8d, 0x81, 0x47, 0x0e, 0xaa, 0xdb, 0xd9, 0x03, 0x1d, 0x25, 0xa8, 0xea, 0x50, 0x17, 0x72, 0x54, 0xaf, 0xa2, 0xd3, 0x8d, 0xe8, 0x51, 0xad, 0xae, 0x6a, 0x57, 0x62, 0x4b, 0x51, 0xae, 0xba, 0x8d, 0x89, 0x2c, 0xd9, 0x44, 0x9b, 0x76, 0x16, 0x7d, 0xf2, 0x18, 0x70, 0x32, 0x25, 0xd0, 0xc9, 0x42, 0xa4, 0x09, 0x97, 0xc2, 0x23, 0xd3, 0x8d, 0x2a, 0x9c, 0x4b, 0xb4, 0x1c, 0x17, 0xb1, 0x74, 0xb5, 0x9d, 0x7a, 0xc7, 0xd8, 0x23, 0xcc, 0x71, 0x4a, 0xba, 0x51, 0x8d, 0x30, 0xdb, 0x0c, 0xe8, 0xda, 0x8d, 0x01, 0x4d, 0x5b, 0xae, 0x2c, 0xb4, 0x62, 0x6a, 0x37, 0x7c, 0xf2, 0x50, 0x9b, 0x31, 0xc3, 0xc8, 0xc9, 0x43, 0x69, 0xa2, 0x72, 0x23, 0xa7, 0x08, 0x25, 0x50, 0xca, 0x85, 0x9e, 0x3c, 0x14, 0x63, 0x4d, 0x17, 0x73, 0x0a, 0xdf, 0x34, 0xd4, 0x43, 0xe8, 0xc9, 0x7d, 0xf6, 0x62, 0x77, 0x31, 0x27, 0x33, 0x29, 0x4a, 0x5c, 0xc9, 0xad, 0x54, 0xa4, 0x28, 0x35, 0x15, 0x17, 0x52, 0x90, 0xab, 0xd4, 0xcd, 0x5c, 0xc8, 0x80, 0xac, 0xea, 0x0c, 0x2b, 0x29, 0x19, 0x4a, 0x55, 0xc3, 0x2d, 0x13, 0x60, 0xb9, 0x30, 0x02, 0x74, 0x63, 0x16, 0xea, 0xc2, 0x2d, 0xdc, 0x44, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff};
const uint8_t saidwrong[] PROGMEM = {0xe0, 0x0a, 0x43, 0x65, 0xe6, 0x88, 0xd8, 0x90, 0x23, 0xc7, 0xda, 0x53, 0xc1, 0x4b, 0x0a, 0x82, 0xa6, 0xc7, 0x8c, 0x1c, 0x49, 0x49, 0x9d, 0xae, 0x30, 0x78, 0x24, 0x4b, 0x3d, 0x2f, 0xc2, 0x60, 0x2b, 0x18, 0xeb, 0x5a, 0x33, 0xc3, 0xad, 0x69, 0x80, 0xc2, 0xdb, 0x63, 0x33, 0xe0, 0x5b, 0x36, 0x02, 0x7c, 0xeb, 0xc6, 0x80, 0xa7, 0xdd, 0x4a, 0xd6, 0x90, 0x5b, 0x46, 0x84, 0x3a, 0x59, 0x90, 0xd5, 0xe5, 0x21, 0x38, 0x01, 0x41, 0x57, 0x9f, 0x2c, 0x98, 0xca, 0x51, 0x17, 0x52, 0x0a, 0xae, 0xa3, 0x83, 0x4d, 0xca, 0x92, 0xa3, 0x92, 0xb1, 0x36, 0x0b, 0x47, 0xf6, 0xce, 0x3a, 0x46, 0x4c, 0x0c, 0xd5, 0x78, 0xed, 0x18, 0x32, 0xe1, 0x0c, 0x98, 0x74, 0x3c, 0x88, 0xb2, 0xc8, 0x61, 0x93, 0x88, 0x70, 0xc7, 0x46, 0xd4, 0x03, 0x33, 0xd3, 0x6c, 0x3b, 0x91, 0x1d, 0x9c, 0x34, 0x89, 0x51, 0x72, 0x39, 0xb1, 0x3c, 0x35, 0x62, 0xcb, 0xfd, 0xc0, 0x90, 0xd4, 0x50, 0x2d, 0x77, 0x5d, 0x94, 0x46, 0x4d, 0x37, 0xc5, 0x57, 0x17, 0x38, 0x13, 0xd3, 0xb5, 0x66, 0xb8, 0x6a, 0x0c, 0x6b, 0x96, 0x93, 0x6b, 0xba, 0x30, 0x8f, 0x9a, 0x09, 0x91, 0xea, 0xa8, 0x3e, 0x6a, 0xc6, 0xa5, 0xb4, 0xb2, 0xd9, 0x98, 0x69, 0x93, 0x81, 0xee, 0x41, 0xe1, 0xb1, 0x44, 0x0e, 0xb6, 0x39, 0x47, 0xd9, 0x56, 0x05, 0x48, 0x35, 0x64, 0x9a, 0x4a, 0xe8, 0x20, 0x57, 0xb3, 0x99, 0x6b, 0x51, 0x02, 0x1f, 0xa3, 0x2a, 0x89, 0x51, 0x06, 0x42, 0xa5, 0xbb, 0x25, 0x21, 0x29, 0xe3, 0x96, 0x12, 0x61, 0x05, 0x15, 0x59, 0x58, 0xa9, 0xa7, 0x29, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff};
const uint8_t startbuttonpress[] PROGMEM = {0x00, 0x00, 0x80, 0x80, 0x6f, 0xc4, 0x10, 0xf0, 0x94, 0x3a, 0x02, 0x9e, 0x36, 0x37, 0xc5, 0x65, 0xa2, 0x6e, 0x62, 0xc7, 0x14, 0xdd, 0x6a, 0x48, 0x19, 0xa5, 0xe1, 0x45, 0x63, 0x15, 0x2d, 0xb6, 0x4f, 0xe2, 0x86, 0x97, 0x16, 0x95, 0x3c, 0x89, 0x1f, 0x5a, 0xda, 0x52, 0xe2, 0x24, 0xbe, 0x4b, 0x5b, 0x4a, 0xc9, 0x95, 0x84, 0xc2, 0x13, 0x89, 0xa5, 0x52, 0x62, 0x03, 0x76, 0x24, 0x95, 0x52, 0x19, 0xa8, 0x32, 0xa9, 0x62, 0x9b, 0xe5, 0x24, 0xa9, 0xba, 0xbb, 0x1d, 0x22, 0xf9, 0x18, 0xca, 0xea, 0x91, 0x50, 0x15, 0x4c, 0x99, 0xa8, 0x59, 0x46, 0xb1, 0x13, 0x6e, 0xa6, 0x66, 0x47, 0x00, 0x21, 0x4e, 0x38, 0x20, 0xb4, 0xb2, 0x00, 0x84, 0x36, 0x1e, 0x80, 0x90, 0x27, 0x56, 0xee, 0xc3, 0xa4, 0x69, 0x1a, 0x32, 0x15, 0x33, 0x15, 0xa2, 0x1e, 0x46, 0x90, 0xc1, 0x7a, 0xc5, 0x9a, 0x69, 0x46, 0x07, 0x6d, 0xe5, 0x65, 0xa6, 0x4c, 0x00, 0x73, 0x0f, 0xaa, 0x27, 0x4a, 0x21, 0x88, 0xb5, 0x68, 0x96, 0xa8, 0x84, 0xd0, 0xd5, 0xb2, 0x6a, 0xea, 0x14, 0x83, 0xdc, 0x83, 0x16, 0x8a, 0x55, 0x06, 0x5e, 0xb8, 0xb9, 0x32, 0x45, 0x05, 0x78, 0x1d, 0xc6, 0x66, 0xa7, 0x90, 0x45, 0xb9, 0x65, 0x98, 0x19, 0x01, 0x24, 0x1f, 0x2e, 0x80, 0x98, 0x2a, 0x5a, 0x14, 0x8a, 0xa6, 0x25, 0xc6, 0x3a, 0x69, 0xc8, 0x91, 0x5a, 0x14, 0xea, 0x64, 0x21, 0x75, 0x7a, 0x48, 0xa8, 0x93, 0x87, 0xd0, 0xe9, 0xaa, 0x41, 0x02, 0x10, 0x62, 0xd5, 0xf2, 0x7d, 0x0d, 0x17, 0x57, 0xb1, 0x23, 0xb5, 0xa1, 0x1c, 0xd5, 0x64, 0xa7, 0xc2, 0xda, 0x48, 0x10, 0x97, 0x9b, 0xbc, 0xc0, 0xc6, 0x88, 0xd5, 0x6e, 0x6b, 0x17, 0xb6, 0x70, 0x33, 0x53, 0x02, 0xb8, 0xda, 0x8d, 0x01, 0xdf, 0x9b, 0x21, 0xe0, 0x29, 0x36, 0x53, 0x4c, 0xea, 0xe5, 0x2a, 0x52, 0x14, 0x30, 0xb1, 0x67, 0xe8, 0x37, 0x15, 0x49, 0xa3, 0x30, 0x00, 0x00, 0x00, 0x00, 0xff};
const uint8_t starterror[] PROGMEM = {0x00, 0x00, 0x00, 0x85, 0x73, 0x7a, 0x52, 0xa3, 0xcc, 0x9c, 0x54, 0xfb, 0x29, 0x15, 0x0f, 0xb8, 0x32, 0x16, 0x2b, 0x44, 0xbc, 0xa4, 0x29, 0x40, 0xdf, 0x50, 0xcb, 0xd0, 0xa4, 0x07, 0xad, 0x94, 0xcd, 0x2d, 0xbb, 0x26, 0xe9, 0x2a, 0x57, 0xb7, 0x1a, 0x3a, 0xcf, 0x27, 0x44, 0x34, 0xf4, 0xc8, 0x6c, 0x5a, 0xe6, 0x4e, 0x83, 0x47, 0x75, 0xee, 0x5c, 0x3d, 0x0c, 0x1f, 0xd3, 0xda, 0xa9, 0x74, 0x13, 0x7c, 0x1c, 0x63, 0xba, 0xb2, 0x98, 0xd4, 0xf1, 0x54, 0x88, 0xaa, 0x24, 0x91, 0xcb, 0xd3, 0x49, 0xbb, 0x82, 0x4c, 0x0e, 0x4f, 0x57, 0x9e, 0x74, 0x0a, 0x31, 0xfd, 0xe1, 0xfb, 0x2c, 0x95, 0x0d, 0x21, 0xa6, 0x37, 0x3c, 0x13, 0xac, 0x3c, 0xc0, 0x4a, 0x71, 0xb1, 0xb1, 0x30, 0x63, 0xfb, 0x0c, 0x00, 0xda, 0x72, 0xd9, 0xda, 0x47, 0x2a, 0xb3, 0xd5, 0x63, 0xbb, 0x54, 0xe9, 0xaa, 0x62, 0x8e, 0xa3, 0xc3, 0x5a, 0xb8, 0x11, 0x6d, 0x0e, 0x96, 0xe7, 0xaa, 0x26, 0x24, 0xf5, 0x11, 0x78, 0x97, 0xa9, 0xe5, 0xd4, 0x1d, 0x4c, 0xea, 0xa6, 0xb6, 0x09, 0x70, 0x30, 0x7b, 0xc8, 0x80, 0x9b, 0x36, 0xb2, 0x38, 0x45, 0x01, 0xae, 0x5b, 0xdd, 0x2d, 0x1f, 0xd9, 0xeb, 0x48, 0x8e, 0xa2, 0x7c, 0xe4, 0xe0, 0xcb, 0xa8, 0x52, 0xd4, 0xc9, 0x63, 0x2a, 0xe5, 0x76, 0x21, 0x27, 0x0b, 0x21, 0x5c, 0xd3, 0x84, 0xae, 0xcc, 0x85, 0x70, 0x75, 0x11, 0xe7, 0x2a, 0xe8, 0xca, 0xc5, 0xd4, 0x9a, 0x00, 0x3a, 0xb6, 0x48, 0x45, 0x47, 0x6c, 0x9a, 0x66, 0x0a, 0x01, 0x5b, 0x22, 0x93, 0xaa, 0x61, 0x52, 0x0b, 0xb3, 0xa3, 0xf2, 0x6e, 0xd8, 0xdd, 0xc5, 0x32, 0x01, 0xa6, 0x33, 0x51, 0xc0, 0xcc, 0xa5, 0x83, 0x10, 0x36, 0x22, 0xca, 0x2c, 0x2d, 0x52, 0xf8, 0x4e, 0x0e, 0x0b, 0xb1, 0x54, 0x51, 0xdb, 0xb1, 0x33, 0xc4, 0x52, 0x74, 0x2e, 0xa3, 0x0d, 0x93, 0x47, 0x36, 0xa6, 0x4a, 0xc2, 0x43, 0x1e, 0x39, 0x70, 0xad, 0x2a, 0x31, 0xb5, 0x94, 0x80, 0x2d, 0xb6, 0x55, 0x70, 0x52, 0xa1, 0x9a, 0x1e, 0x21, 0xbb, 0x49, 0x07, 0xa9, 0x53, 0xc2, 0x62, 0x26, 0x03, 0x94, 0x4e, 0x75, 0x4f, 0x14, 0x34, 0xd0, 0x2a, 0x55, 0xbd, 0x55, 0x52, 0xd0, 0x74, 0x45, 0xcb, 0x46, 0x49, 0xe1, 0xcf, 0x04, 0xaa, 0x43, 0x26, 0x85, 0xbf, 0x50, 0xc8, 0x8e, 0x98, 0x95, 0xa2, 0xca, 0xe7, 0x0a, 0xdd, 0x11, 0x9a, 0xae, 0x9e, 0x29, 0x76, 0xc6, 0x18, 0xb6, 0x99, 0xe2, 0xda, 0x56, 0x62, 0xb8, 0xa6, 0xab, 0x7b, 0xa9, 0x85, 0xe3, 0x59, 0x5f, 0x69, 0x11, 0x22, 0x87, 0xa7, 0xf4, 0x84, 0x7b, 0x18, 0x31, 0x01, 0x28, 0xeb, 0x6e, 0x66, 0x26, 0xf8, 0x54, 0x54, 0x85, 0x59, 0xe4, 0x65, 0x05, 0x5a, 0x95, 0x66, 0x81, 0x8f, 0x9d, 0x90, 0x65, 0x99, 0x07, 0x28, 0x36, 0xb0, 0xb5, 0x2e, 0x2e, 0x27, 0x38, 0xa0, 0xf4, 0xa0, 0x9a, 0x6b, 0xe5, 0x83, 0x39, 0x43, 0xec, 0x4a, 0x10, 0x90, 0x00, 0xbb, 0x02, 0x8e, 0x37, 0x11, 0xc0, 0x8e, 0x21, 0x23, 0x74, 0xc2, 0x62, 0x3a, 0x43, 0x2e, 0x86, 0xeb, 0xae, 0x4b, 0xb5, 0x30, 0x18, 0xe2, 0x2f, 0xdb, 0xa5, 0x54, 0x62, 0x41, 0xb9, 0x30, 0x91, 0x91, 0x2c, 0x03, 0xfb, 0x54, 0xcd, 0xa2, 0xa0, 0x14, 0xeb, 0xf2, 0x4c, 0x37, 0x83, 0x80, 0xa8, 0xab, 0x42, 0xeb, 0xd9, 0x06, 0x8b, 0x86, 0x5e, 0x99, 0x4d, 0x2b, 0x9c, 0x15, 0xf0, 0xa8, 0xce, 0x9f, 0xab, 0xa7, 0xe1, 0x63, 0x5a, 0xdb, 0x95, 0x61, 0x82, 0x8f, 0x63, 0x4c, 0x57, 0x16, 0x93, 0x5a, 0x9e, 0xf2, 0x51, 0xd5, 0x28, 0x72, 0x79, 0x2a, 0x69, 0x57, 0x90, 0x85, 0xe1, 0xe9, 0xca, 0x5d, 0x81, 0x21, 0xa6, 0xbf, 0x3c, 0x15, 0xac, 0xb2, 0xd9, 0xc2, 0x72, 0x35, 0xed, 0x88, 0x4c, 0x43, 0x8d, 0xb7, 0xa0, 0x27, 0x4c, 0x42, 0x32, 0xa0, 0x00, 0x0a, 0x05, 0x4c, 0x04, 0xd2, 0x68, 0x14, 0xc6, 0xc5, 0x22, 0x62, 0xb2, 0xf0, 0x16, 0xe7, 0x8a, 0x10, 0xc9, 0xe6, 0x17, 0xd3, 0x4a, 0x4d, 0x14, 0x5b, 0x5c, 0x6a, 0x73, 0xb3, 0x50, 0x1c, 0xb9, 0x78, 0x34, 0xd4, 0x44, 0xb1, 0x79, 0x93, 0x11, 0xa5, 0xd0, 0x0c, 0x80, 0x56, 0xb2, 0x34, 0x40, 0x69, 0xb9, 0x4b, 0x32, 0x01, 0x00, 0x1d, 0x79, 0x0c, 0x1d, 0xca, 0x4d, 0xc4, 0xec, 0x31, 0xbc, 0xed, 0x48, 0x35, 0xc3, 0xc7, 0x0c, 0x6c, 0x32, 0xcd, 0x03, 0x0e, 0xdb, 0xe2, 0xae, 0x12, 0x09, 0x54, 0xba, 0x04, 0xb8, 0x3b, 0xdd, 0x12, 0x02, 0x22, 0x90, 0x74, 0x1d, 0x25, 0x53, 0x29, 0x94, 0x26, 0xa8, 0x20, 0xd6, 0xa0, 0x6b, 0xaa, 0xa6, 0x40, 0x17, 0x2d, 0x69, 0xb2, 0x4e, 0xee, 0x42, 0xa4, 0xb4, 0x8b, 0x3a, 0x99, 0xcf, 0xa1, 0xd2, 0x6e, 0xfa, 0xa4, 0xa1, 0xa9, 0xd8, 0xa8, 0x94, 0x15, 0xb9, 0x2e, 0x66, 0xc3, 0x56, 0x5a, 0xc4, 0x07, 0xbb, 0x27, 0x2b, 0x36, 0x29, 0x88, 0xa3, 0xe2, 0x65, 0x1b, 0x01, 0x87, 0xa8, 0x13, 0xe0, 0x1b, 0x33, 0x02, 0x3c, 0xe9, 0x3e, 0x92, 0xc0, 0xce, 0xc5, 0xbd, 0xe4, 0x51, 0xbd, 0xba, 0x10, 0x8d, 0x01, 0xc3, 0xd0, 0xfa, 0x1d, 0x25, 0x07, 0x24, 0x86, 0xd9, 0x77, 0xd0, 0x1a, 0xd1, 0x68, 0x16, 0x8f, 0x39, 0x32, 0xf4, 0xd1, 0xbd, 0x7b, 0x95, 0x88, 0x40, 0x47, 0xf5, 0x61, 0xdc, 0xdd, 0x0d, 0x9d, 0xc2, 0x87, 0xf2, 0x72, 0x31, 0x3d, 0x72, 0xab, 0xc3, 0xda, 0xd1, 0xaa, 0x69, 0x98, 0x2d, 0x0b, 0x65, 0xb1, 0x44, 0x0e, 0xce, 0xbc, 0x5c, 0x6c, 0xa3, 0x5c, 0x2b, 0x93, 0x4a, 0x17, 0x1d, 0x84, 0xa6, 0xc4, 0x7d, 0xc2, 0xf2, 0x4a, 0x9d, 0xf0, 0x9c, 0x48, 0x23, 0x2b, 0xb7, 0x2c, 0x72, 0xdc, 0x03, 0x3b, 0x1d, 0xf8, 0xcd, 0x76, 0x13, 0xd2, 0x0c, 0xcb, 0xbc, 0x52, 0x5d, 0xcc, 0x51, 0xad, 0xae, 0x6c, 0x0f, 0xc1, 0x47, 0x57, 0xbe, 0xcb, 0xd9, 0x4c, 0x35, 0x83, 0xc5, 0x0a, 0x36, 0x0b, 0x15, 0x34, 0x90, 0xaa, 0x55, 0xd2, 0x51, 0x54, 0x87, 0xa5, 0x7c, 0x3b, 0x56, 0x18, 0x5a, 0x9e, 0xb7, 0x1d, 0x98, 0x15, 0x68, 0x05, 0xc1, 0x74, 0x42, 0x56, 0xe0, 0x19, 0x95, 0xc4, 0xba, 0x76, 0xa8, 0x32, 0x9c, 0xd3, 0x90, 0xc9, 0xd8, 0x01, 0x5d, 0x86, 0x43, 0xc6, 0x72, 0x19, 0x6e, 0x08, 0x76, 0x19, 0x68, 0xe1, 0x1c, 0x21, 0xca, 0xe4, 0xa0, 0x78, 0x6b, 0x98, 0x25, 0x53, 0x6a, 0x4e, 0x6d, 0xad, 0x71, 0x92, 0x9f, 0xb8, 0xa4, 0xa7, 0x99, 0x56, 0x1e, 0x95, 0x9e, 0xe6, 0x26, 0x0d, 0xb5, 0x54, 0x79, 0x78, 0x29, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};

const uint8_t player1number[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x4a, 0x5c, 0xda, 0xd8, 0x62, 0xa7, 0x2c, 0x92, 0x28, 0x67, 0x8a, 0xe2, 0x9c, 0x28, 0xaa, 0xdd, 0xdc, 0x6e, 0x08, 0x85, 0x6f, 0x17, 0x4d, 0xcb, 0x27, 0xb4, 0x61, 0x42, 0xb5, 0x0d, 0x1f, 0xc6, 0x9b, 0xea, 0xd0, 0x90, 0x7a, 0x98, 0xa0, 0x62, 0x32, 0x8d, 0xca, 0x61, 0x82, 0x8a, 0x99, 0x32, 0xb0, 0x27, 0x0a, 0xca, 0x66, 0x4a, 0x89, 0x1c, 0x26, 0x18, 0x9d, 0x69, 0x16, 0x7a, 0x42, 0x17, 0x74, 0x2b, 0xc4, 0xe8, 0x8a, 0x74, 0x96, 0x09, 0xd3, 0xa0, 0x8d, 0x11, 0x4b, 0xda, 0xd4, 0x8a, 0x25, 0x96, 0x7f, 0x4c, 0x8e, 0x8a, 0xe8, 0x78, 0xf2, 0x55, 0x61, 0x32, 0x51, 0x10, 0xc8, 0x0b, 0x05, 0xa9, 0xc6, 0x45, 0x10, 0xcf, 0x18, 0x2b, 0x22, 0x0d, 0xc1, 0x2c, 0x67, 0xea, 0x0c, 0x75, 0x44, 0x97, 0x43, 0xa9, 0xd3, 0xf0, 0x11, 0x9d, 0xea, 0x94, 0x4c, 0xa1, 0x43, 0x84, 0x61, 0x52, 0xd3, 0x28, 0x97, 0x0c, 0xe4, 0x19, 0x36, 0x51, 0x1c, 0x72, 0xd0, 0xa7, 0xd1, 0xdc, 0x71, 0x28, 0x21, 0xff, 0x36, 0x33, 0xd3, 0x89, 0xcd, 0x40, 0xab, 0xd3, 0x2c, 0x25, 0x53, 0xc1, 0x9e, 0x34, 0x72, 0x1a, 0x0c, 0x90, 0xa7, 0x85, 0xcd, 0x4a, 0xd3, 0x98, 0xaa, 0xb6, 0x48, 0x53, 0x47, 0x0d, 0x32, 0xca, 0x2c, 0x0d, 0x1f, 0x35, 0x98, 0x32, 0xf1, 0x0c, 0x7c, 0xd4, 0x10, 0x4a, 0x24, 0x33, 0xf0, 0xd2, 0x4d, 0x09, 0xe1, 0x0e, 0x23, 0x41, 0x03, 0xb5, 0x82, 0xa3, 0x42, 0x1b, 0x03, 0xec, 0x28, 0xe6, 0x34, 0x25, 0x38, 0xf0, 0xcc, 0x45, 0xcd, 0x54, 0xa1, 0xa2, 0xf0, 0x74, 0xd5, 0xd8, 0xc5, 0xe7, 0x8b, 0x2b, 0x8c, 0x23, 0xa6, 0x48, 0x2e, 0x1a, 0x13, 0x0e, 0x54, 0x52, 0x3d, 0x68, 0x5d, 0x28, 0x64, 0xca, 0xcc, 0xa0, 0x35, 0xa5, 0x40, 0x29, 0x37, 0x83, 0x57, 0x84, 0x83, 0x24, 0xd9, 0x36, 0x5e, 0x55, 0x0e, 0x12, 0x0a, 0x35, 0xb9, 0x95, 0xb1, 0x74, 0xa8, 0xd4, 0xe0, 0x16, 0xa1, 0x50, 0x26, 0x53, 0x59, 0xca, 0x1d, 0x2b, 0x93, 0x06, 0x64, 0x4d, 0x67, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff};
const uint8_t player2number[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xb0, 0x4c, 0xad, 0x5b, 0xa5, 0x76, 0xa0, 0x32, 0x8b, 0x0a, 0xb5, 0xda, 0x8e, 0xc8, 0x32, 0xca, 0xd5, 0x6c, 0xad, 0x40, 0xd5, 0x0a, 0xf6, 0x10, 0x7b, 0x02, 0xeb, 0xab, 0xdc, 0x5c, 0xec, 0xa1, 0xbc, 0x8d, 0xa9, 0x30, 0xa1, 0x87, 0xb2, 0x36, 0x7a, 0x42, 0x89, 0x1d, 0xca, 0x1b, 0x9b, 0x2a, 0x15, 0x72, 0x28, 0xef, 0x65, 0xaa, 0xc4, 0xc8, 0xa1, 0x6c, 0xd2, 0xad, 0xd0, 0xc0, 0x87, 0x36, 0x45, 0xa7, 0x83, 0x03, 0xb7, 0x48, 0x34, 0xdd, 0x74, 0x0c, 0xe9, 0x32, 0x5e, 0x64, 0x5d, 0x21, 0x04, 0xc9, 0xc4, 0xd2, 0x6e, 0x43, 0x4a, 0xad, 0xea, 0x94, 0xa3, 0x4d, 0xac, 0x8c, 0x66, 0x0b, 0x25, 0xb2, 0x2c, 0x29, 0x80, 0xe5, 0x95, 0x12, 0xc3, 0x55, 0xe4, 0x96, 0x0b, 0x5a, 0x3c, 0xd5, 0x5b, 0x17, 0x1c, 0x6a, 0x88, 0x54, 0x5e, 0x6d, 0x52, 0xa8, 0x21, 0x13, 0x75, 0x35, 0xce, 0x81, 0x87, 0xca, 0x45, 0xf7, 0x88, 0x1b, 0x2a, 0x8c, 0x03, 0x3d, 0x19, 0x12, 0x28, 0xf9, 0x1d, 0x60, 0x74, 0x64, 0xa4, 0x64, 0x00, 0xfb, 0x65, 0x4c, 0x71, 0x82, 0x0e, 0xea, 0x94, 0xa0, 0xdb, 0x1d, 0x9a, 0x50, 0xd5, 0x66, 0x21, 0xf8, 0xa8, 0x41, 0x55, 0x9a, 0xa5, 0xa1, 0xa3, 0x06, 0x5b, 0x26, 0x91, 0x81, 0x8f, 0x1a, 0x62, 0x89, 0x54, 0x1a, 0x19, 0xba, 0x29, 0x21, 0xdc, 0x69, 0x24, 0xe8, 0xa0, 0x46, 0xb0, 0x75, 0x68, 0x63, 0x82, 0x1d, 0xcd, 0x9c, 0xa6, 0x98, 0x0b, 0x9e, 0x9b, 0x9a, 0x59, 0x2a, 0x79, 0x10, 0x9e, 0xae, 0x16, 0xbb, 0x04, 0x62, 0x53, 0x87, 0x72, 0xc8, 0x14, 0xa9, 0x49, 0xe3, 0x4a, 0x81, 0x52, 0x6a, 0x3a, 0xad, 0x2b, 0x05, 0xcc, 0x79, 0xca, 0xcd, 0xe0, 0x55, 0xe5, 0xc0, 0xb1, 0x08, 0x85, 0x5c, 0xdc, 0xc2, 0x58, 0xda, 0x95, 0x6a, 0x48, 0x8b, 0x50, 0x24, 0x95, 0x89, 0x2c, 0xa5, 0x8a, 0x55, 0x48, 0x0d, 0xb2, 0xa6, 0x33, 0x27, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff};
const uint8_t player3number[] PROGMEM = {0x00, 0x00, 0x00, 0x88, 0x8f, 0xc2, 0xca, 0x2d, 0x2c, 0x97, 0x26, 0x0b, 0x9b, 0x54, 0x4e, 0x42, 0x80, 0xc2, 0xa3, 0x03, 0x93, 0x44, 0x55, 0xb2, 0xc7, 0x5e, 0x81, 0x5d, 0x2e, 0x92, 0x2d, 0xe4, 0x44, 0x3a, 0xb7, 0x4b, 0xb4, 0x91, 0xc3, 0xb9, 0xd0, 0xed, 0xe6, 0x42, 0x0f, 0xef, 0x5d, 0x54, 0xa7, 0x09, 0x39, 0x42, 0x30, 0x52, 0xdd, 0x2a, 0xf8, 0x08, 0xde, 0x72, 0x57, 0xab, 0xa1, 0x25, 0x06, 0x4f, 0x93, 0x29, 0x86, 0x96, 0xe8, 0x03, 0x6d, 0x84, 0x06, 0x1e, 0x92, 0x8a, 0x3c, 0x59, 0x1c, 0x6a, 0x90, 0x3c, 0xe8, 0x44, 0x89, 0xc9, 0x42, 0xc1, 0x34, 0xa5, 0xce, 0x92, 0x95, 0x0f, 0x62, 0xa5, 0xab, 0x91, 0x41, 0x2a, 0xf7, 0x11, 0x99, 0x2e, 0x2a, 0x15, 0x51, 0x45, 0xba, 0x8a, 0x9c, 0x10, 0x31, 0x13, 0x19, 0xe9, 0x96, 0x9b, 0x8c, 0x93, 0x8d, 0xb7, 0x98, 0x1c, 0x0a, 0xb7, 0xba, 0x3e, 0x62, 0x72, 0x29, 0x42, 0x45, 0x6f, 0x88, 0xe0, 0x23, 0x07, 0x2a, 0xf1, 0x6d, 0x82, 0x97, 0x14, 0xa8, 0xe4, 0x8f, 0x13, 0x59, 0x8a, 0x27, 0x16, 0x3f, 0x26, 0x64, 0x69, 0x96, 0x54, 0x7e, 0xa9, 0xe0, 0xc2, 0x2a, 0x5c, 0x39, 0xa9, 0x86, 0x92, 0x53, 0x81, 0x64, 0x54, 0x46, 0x4a, 0x46, 0x07, 0x98, 0x1d, 0x61, 0x29, 0x18, 0xa0, 0x6e, 0x0a, 0x5a, 0x9c, 0xa0, 0x83, 0xdc, 0xc3, 0xac, 0x8e, 0x8f, 0xea, 0x64, 0xb4, 0x5b, 0x18, 0x3a, 0x6a, 0x50, 0x95, 0xea, 0x19, 0xf8, 0xa8, 0xc1, 0x95, 0x4a, 0x66, 0xe0, 0xa3, 0xfa, 0x58, 0xc2, 0x95, 0x46, 0x9a, 0x2e, 0x4a, 0x29, 0x55, 0x1a, 0x76, 0x3a, 0x18, 0x51, 0xa4, 0x65, 0x4a, 0x59, 0xe0, 0x44, 0x09, 0xa5, 0x29, 0xe1, 0x81, 0xd1, 0xa9, 0x6a, 0xb6, 0x5a, 0xa3, 0x5c, 0x85, 0x9a, 0x47, 0x4e, 0x81, 0x58, 0xd4, 0xae, 0x5c, 0xa8, 0xc4, 0x7a, 0xd2, 0xa4, 0x61, 0xc9, 0x94, 0x9a, 0x4e, 0xeb, 0x4a, 0x81, 0x52, 0x6e, 0x3b, 0xaf, 0x29, 0x07, 0xc9, 0x79, 0x2c, 0x82, 0xaa, 0x26, 0xb7, 0x08, 0x95, 0x76, 0x81, 0xaa, 0x52, 0x6a, 0x58, 0x45, 0x64, 0x24, 0x49, 0xb9, 0x51, 0x62, 0x54, 0xc1, 0x68, 0x91, 0x4a, 0x4e, 0x00, 0x00, 0x1e, 0xff};
const uint8_t player4number[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x8a, 0x4c, 0x2b, 0x48, 0x6a, 0xbb, 0x28, 0xd1, 0x2a, 0x13, 0xb1, 0x82, 0x80, 0x28, 0xab, 0x5b, 0xa8, 0x52, 0xab, 0x59, 0x89, 0x3e, 0x8c, 0xb3, 0x5d, 0xc6, 0x65, 0xe6, 0x30, 0xde, 0xd4, 0x84, 0x3b, 0xd5, 0xc3, 0x04, 0xe9, 0x53, 0x69, 0x64, 0x0e, 0x1b, 0x94, 0xcf, 0xb4, 0x82, 0x39, 0x4c, 0xd0, 0x3a, 0x53, 0x42, 0x64, 0x31, 0xde, 0xea, 0x4c, 0x91, 0xd1, 0x15, 0x9a, 0xa8, 0x9b, 0x2e, 0x41, 0x47, 0xa4, 0xaa, 0x4c, 0x98, 0x04, 0x1d, 0x31, 0x1f, 0xb2, 0xae, 0x1c, 0x64, 0x64, 0x38, 0x96, 0x67, 0xb2, 0xe8, 0x96, 0x57, 0xa1, 0xee, 0xe1, 0xa6, 0x43, 0x52, 0xb8, 0x7a, 0x64, 0xd8, 0x0e, 0x54, 0x15, 0x1e, 0x91, 0x6a, 0xc7, 0xa5, 0xc1, 0x75, 0xaa, 0xa9, 0xed, 0xc4, 0xf1, 0xd3, 0x01, 0x91, 0x13, 0x1a, 0x27, 0xc6, 0x34, 0x98, 0x2f, 0x68, 0x1c, 0x7f, 0xe1, 0x58, 0x39, 0x61, 0xf0, 0xe2, 0xa9, 0x6b, 0x5b, 0x85, 0x91, 0xca, 0x21, 0x69, 0x21, 0x05, 0x47, 0x26, 0x83, 0x4c, 0x38, 0x07, 0x19, 0xb9, 0xd4, 0x5e, 0x99, 0x22, 0xaa, 0x65, 0x0d, 0xa0, 0xd6, 0xb8, 0xad, 0xc2, 0x44, 0x60, 0xd3, 0x2e, 0xb2, 0x12, 0x5b, 0x00, 0xd7, 0x84, 0x4a, 0x0a, 0x1a, 0x50, 0x5f, 0x4e, 0x9c, 0x24, 0xa8, 0xa0, 0xf4, 0x90, 0x89, 0x93, 0xa1, 0x31, 0xbd, 0xee, 0x69, 0xa6, 0x8f, 0x6a, 0xf5, 0x98, 0x65, 0x08, 0x3d, 0xaa, 0x73, 0x65, 0x52, 0x21, 0x66, 0xa9, 0x26, 0x96, 0x52, 0x87, 0x98, 0xa6, 0xf3, 0x12, 0x4a, 0x1d, 0xa6, 0x83, 0x06, 0x7a, 0x95, 0xaa, 0xc5, 0x34, 0x26, 0x78, 0x11, 0xca, 0xea, 0xc8, 0x78, 0xc0, 0x57, 0xbb, 0xa9, 0x9c, 0x16, 0x8a, 0xa1, 0xe1, 0x21, 0xb2, 0x52, 0xa4, 0x36, 0xad, 0x89, 0x84, 0x0c, 0xa9, 0x99, 0x74, 0x64, 0x6a, 0x38, 0xe4, 0xae, 0xd3, 0xa9, 0xa9, 0xa1, 0xa0, 0xda, 0xc1, 0x6b, 0xc6, 0x81, 0x82, 0x6a, 0x86, 0xac, 0x19, 0x06, 0x76, 0x9a, 0xee, 0x3c, 0x2c, 0x6c, 0xda, 0x84, 0xb2, 0xc9, 0x20, 0x4b, 0x6d, 0x91, 0x99, 0xc8, 0x43, 0x22, 0x56, 0x08, 0x63, 0x3c, 0x95, 0x89, 0xca, 0x06, 0x00, 0x78, 0xff};
const uint8_t player5number[] PROGMEM = {0x00, 0x00, 0x00, 0x4a, 0x28, 0x82, 0x3b, 0x5d, 0x1c, 0xa7, 0x2a, 0xc9, 0xe8, 0x50, 0x49, 0x8c, 0x80, 0x22, 0xa2, 0x53, 0x68, 0x73, 0x1b, 0x6b, 0x85, 0x5a, 0x81, 0x99, 0x21, 0x92, 0x2d, 0xf4, 0xb0, 0x36, 0x4e, 0x8a, 0x95, 0x91, 0xc3, 0xb9, 0x50, 0x1d, 0xee, 0x64, 0x0f, 0x1f, 0xac, 0x55, 0xa7, 0x09, 0x39, 0x42, 0x30, 0x52, 0xdd, 0x6a, 0x78, 0x89, 0xc1, 0x52, 0x57, 0xab, 0xe1, 0x25, 0x7a, 0x4f, 0x93, 0x21, 0x86, 0x97, 0xe4, 0x22, 0x6d, 0x3a, 0x07, 0x1e, 0x8a, 0xea, 0x52, 0x1d, 0x54, 0xb2, 0x54, 0x7c, 0x48, 0x96, 0x63, 0x44, 0x06, 0x58, 0x11, 0x49, 0x80, 0x26, 0xd4, 0x10, 0x50, 0x98, 0x87, 0x21, 0x0b, 0x8b, 0x70, 0xb3, 0x38, 0x23, 0xf6, 0xb9, 0x85, 0x3d, 0x0a, 0x9e, 0x2c, 0xa4, 0x11, 0x8a, 0x28, 0x78, 0xc5, 0x23, 0x46, 0xd7, 0xaa, 0xee, 0x81, 0x8f, 0x1a, 0x7c, 0xa8, 0xa4, 0x1b, 0x39, 0x6a, 0x30, 0x11, 0x1a, 0x66, 0xf4, 0xe8, 0x5e, 0x7b, 0x46, 0xba, 0xd1, 0x62, 0x02, 0x57, 0x1d, 0x69, 0x46, 0x9c, 0x03, 0xdc, 0x55, 0x18, 0x9b, 0x49, 0x9c, 0x07, 0x35, 0xed, 0x22, 0x32, 0x71, 0x09, 0x58, 0x4e, 0xaa, 0xc5, 0xc4, 0x67, 0x20, 0xd3, 0x69, 0x92, 0x82, 0x01, 0xec, 0xb5, 0x13, 0x3b, 0x0d, 0x3a, 0xc8, 0xbd, 0xc4, 0x6a, 0x67, 0xa9, 0x5e, 0x46, 0xbb, 0x85, 0xa1, 0xa3, 0x06, 0x55, 0x69, 0x96, 0x81, 0x8f, 0x1a, 0x6c, 0xa9, 0x64, 0x05, 0x3e, 0xaa, 0x8f, 0x25, 0x5c, 0x19, 0xb8, 0xe8, 0xbc, 0x86, 0x70, 0x87, 0x69, 0xa7, 0x83, 0x1e, 0x45, 0x5a, 0x96, 0x94, 0x05, 0x76, 0x34, 0x63, 0x9a, 0x12, 0x1e, 0x28, 0x53, 0xaa, 0x66, 0xbb, 0x35, 0xd2, 0x57, 0x88, 0xbb, 0xe5, 0x14, 0x88, 0x4d, 0xed, 0xca, 0x81, 0x52, 0xac, 0x06, 0x4d, 0x28, 0x95, 0x4c, 0xa9, 0xe9, 0xb4, 0xae, 0x14, 0x28, 0xe6, 0x29, 0xb7, 0x83, 0xd7, 0x94, 0x82, 0x84, 0x42, 0x4f, 0x6e, 0x15, 0x2c, 0xe3, 0x54, 0x35, 0xb9, 0x85, 0xa9, 0x94, 0x0b, 0x54, 0x95, 0x32, 0x83, 0xca, 0x2c, 0x43, 0x49, 0xca, 0x95, 0x13, 0xa3, 0x1a, 0x45, 0x8d, 0x54, 0x72, 0x02, 0x00, 0x00, 0x00, 0xf0, 0xff};
void count(int e) {
  voice.say(pokeycounter);
  delay(2000);
  if (e == 0) {
    voice.say(zero);
  } else if (e == 1) {
    voice.say(one);
  } else if (e == 2) {
    voice.say(two);
  } else if (e == 3) {
    voice.say(three);
  } else if (e == 4) {
    voice.say(four);
  } else if (e == 5) {
    voice.say(five);
  } else if (e == 6) {
    voice.say(six);
  } else if (e == 7) {
    voice.say(seven);
  } else if (e == 8) {
    voice.say(eight);
  } else if (e == 9) {
    voice.say(nine);
  } else if (e == 10) {
    voice.say(ten);
  } else if (e == 11) {
    voice.say(eleven);
  } else if (e == 12) {
    voice.say(twelve);
  } else if (e == 13) {
    voice.say(thirteen);
  } else if (e == 14) {
    voice.say(fourteen);
  } else if (e == 15) {
    voice.say(fifteen);
  } else if (e == 16) {
    voice.say(sixteen);
  } else if (e == 17) {
    voice.say(seventeen);
  } else if (e == 18) {
    voice.say(eightteen);
  } else if (e == 19) {
    voice.say(nineteen);
  } else if (e == 20) {
    voice.say(twenty);
  } else if (e == 21) {
    voice.say(twentyone);
  } else if (e == 22) {
    voice.say(twentytwo);
  } else if (e == 23) {
    voice.say(twentythree);
  } else if (e == 24) {
    voice.say(twentyfour);
  } else if (e == 25) {
    voice.say(twentyfive);
  } else if (e == 26) {
    voice.say(twentysix);
  } else if (e == 27) {
    voice.say(twentyseven);
  } else if (e == 28) {
    voice.say(twentyeight);
  } else if (e == 29) {
    voice.say(twentynine);
  } else if (e == 30) {
    voice.say(thirty);
  } else if (e == 31) {
    voice.say(thirtyone);
  } else if (e == 32) {
    voice.say(thirtytwo);
  } else if (e == 33) {
    voice.say(thirtythree);
  } else if (e == 34) {
    voice.say(thirtyfour);
  } else if (e == 35) {
    voice.say(thirtyfive);
  } else if (e == 36) {
    voice.say(thirtysix);
  } else if (e == 37) {
    voice.say(thirtyseven);
  } else if (e == 38) {
    voice.say(thirtyeight);
  } else if (e == 39) {
    voice.say(thirtynine);
  } else if (e == 40) {
    voice.say(forty);
  } else if (e == 41) {
    voice.say(fortyone);
  } else if (e == 42) {
    voice.say(fortytwo);
  } else if (e == 43) {
    voice.say(fortythree);
  } else if (e == 44) {
    voice.say(fortyfour);
  } else if (e == 45) {
    voice.say(fortyfive);
  } else if (e == 46) {
    voice.say(fortysix);
  } else if (e == 47) {
    voice.say(fortyseven);
  } else if (e == 48) {
    voice.say(fortyeight);
  } else if (e == 49) {
    voice.say(fortynine);
  } else if (e == 50) {
    voice.say(fifty);
  } else if (e == 51) {
    voice.say(fiftyone);
  } else if (e == 52) {
    voice.say(fiftytwo);
  } else if (e == 53) {
    voice.say(fiftythree);
  } else if (e == 54) {
    voice.say(fiftyfour);
  } else if (e == 55) {
    voice.say(fiftyfive);
  }
}

void nowPlayer(int q) {
  voice.say(currentplayer);
  delay(2000);
  if (q == 0) {
    voice.say(one);
  } else if (q == 1) {
    voice.say(two);
  } else if (q == 2) {
    voice.say(three);
  } else if (q == 3) {
    voice.say(four);
  } else if (q == 4) {
    voice.say(five);
  }
}

void selectedPlayer(int q) {
  voice.say(selectedplayer);
  delay(2000);
  if (q == 0) {
    voice.say(one);
  } else if (q == 1) {
    voice.say(two);
  } else if (q == 2) {
    voice.say(three);
  } else if (q == 3) {
    voice.say(four);
  } else if (q == 4) {
    voice.say(five);
  }
}
void newNumber(int w) {
  voice.say(newnumber);
  delay(2000);
  if (w == 0) {
    voice.say(pokeypokey);
  } else if (w == 1) {
    voice.say(one);
  } else if (w == 2) {
    voice.say(return11);
  } else if (w == 3) {
    voice.say(three);
  } else if (w == 4) {
    voice.say(choice11);
  } else if (w == 5) {
    voice.say(five);
  } else if (w == 6) {
    voice.say(fullcount);
  }
}

void gameWin(int n) {
  if (n == 0) {
    voice.say(player1won);
  } else if (n == 1) {
    voice.say(player2won);
  } else if (n == 2) {
    voice.say(player3won);
  } else if (n == 3) {
    voice.say(player4won);
  } else if (n == 4) {
    voice.say(player5won);
  }
}
void gameLose(int k) {
  if (k == 0) {
    voice.say(players1gameloses);
  } else if (k == 1) {
    voice.say(players2gameloses);
  } else if (k == 2) {
    voice.say(players3gameloses);
  } else if (k == 3) {
    voice.say(players4gameloses);
  } else if (k == 4) {
    voice.say(players5gameloses);
  }
}
void selectPlayer(int h) {
  if (h == 0) {
    voice.say(player1select);
  } else if (h == 1) {
    voice.say(player2select);
  } else if (h == 2) {
    voice.say(player3select);
  } else if (h == 3) {
    voice.say(player4select);
  } else if (h == 4) {
    voice.say(player5select);
  }
}
void playerTurn(int u) {
  if (u == 0) {
    voice.say(players1turn);
  } else if (u == 1) {
    voice.say(players2turn);
  } else if (u == 2) {
    voice.say(players3turn);
  } else if (u == 3) {
    voice.say(players4turn);
  } else if (u == 4) {
    voice.say(players5turn);
  }
}
void case4(int b) {
  Serial.println("지정당한 플레이어 : ");     //o                                                                                                                     //Player to specify when number 4 is issued                                                                                                                     //숫자 4를냈을경우 현재사용자의 번호등에 대해 너무 똑같은 중복코드가 길어져서 메소드 하나더만듬      When the number 4 was issued, the repetition gate became too long, so the code line length was reduced through the method.
  fakecounter = 0;
  fakecounter = SerialNumber2 + 1;
  selectedPlayer(SerialNumber2);
  Serial.println(fakecounter);
  delay(1000);
  Serial.print("현재사용자의 번호 : ");   //O
  fakecounter = 0;
  fakecounter = b + 1;
  Serial.println(fakecounter);
  nowPlayer(b);
  Serial.print("pockycounter = ");    //O
  Serial.println(pockyCounter);
  count(pockyCounter);
  quarterCounter = 2;
  pointNumber = 1;
  arr[b][z] = random(0, 7);
  Serial.print("새 번호: ");
  Serial.println(arr[b][z]);
  p = arr[b][z];
  newNumber(p);
  delay(500);
}
void forfor(int a) {                        //a는 buttonpushcounter를 따라가는데 1~5까지(최소숫자 2를따라감)
  while (quarterCounter <= 1) {
    for ( z = 0 ; z < 4 ; z++) {          //설명 1. 배열값이 8로 바뀌어있다는 것은 22~55인 풀카운트일때  0제외한 숫자를 냈을때이며 이때 그 배열 arr[a][z] 의 값이 8로바뀐다. 이렇게 4번반복되서 arr[a][1~4]의 배열값이 모두 8로바뀌게 되고 그렇게 되면
      if (arr[a][z] == 8) {              // 트리거 카운트 2가 1이되서 그 배열 arr[a][1~4]은 사용못하게 된다.
        quarterCounter = 2;
        trigerCounter2 = 1;
        break;
      } else {
        trigerCounter2 = 0;                 //완벽
      }
    }
    if (loseCounter == pockyMul - 1 && trigerCounter2 == 0 && winnerCounter == 0) {              //설명 2.pockyMul이란 buttonpushcounter와 같은 값이들어가는 숫자이며 사용자의 숫자를 나타낸다 사용자의 숫자 ex))5일때 losecounter가 4로쌓여있는 상태라면 그 번 사용자가 이긴것이고
      fakecounter = 0;
      fakecounter = a + 1;
      Serial.print(fakecounter);                                                     // void loop문에서 pockycounter를 22~55 까지의 값까지만 돌아가게 해놨는데 이를 pockycounter의 값을 그보다 1크게만들어 while 문을 안돌아가게만든다.그리고 그 번호의 배열사용자가
      Serial.println("번 사용자님이 게임을 이기셨습니다.");                     // 게임을 이기셨습니다란 말을 듣게된다.
      gameWin(a);
      quarterCounter = 2;
      winnerCounter = 1;
      pockyCounter = (11 * pockyMul) + 1 ;                                  //완벽
      //      break;
    }
turnBack:
    if (quarterCounter == 0 && trigerCounter2 == 0) {                          //설명 3.앞서 설명 1. 에서말한 트리거 카운트 2가 0이어야만 숫자입력을 할 수 있다. 엔드 카운터 1의 경우 for문에서 숫자를 확인하는 과정에서 엔드 카운터 1 = 2 가 되서 사용자가 숫자를
      Serial.println("");                                                   //다시는 입력하지 못하게 하고 값 비교 후 void loop의 forfor이 끝나고난뒤 다시 엔드 카운터 1 = 0 으로 만들어 준후 다음 사람이 숫자입력을 할 수 있게 만든다.
      fakecounter = 0;
      fakecounter = a + 1;
      Serial.print(fakecounter);
      Serial.println("번 사용자님 키를 입력해주세요");        //추가
      playerTurn(a);
      delay(6000);
      int ret;
      uint16_t voice = 0;
      ret = myVR.recognize(buf, 50);
      if (ret > 0 ) {
        voice += buf[0];
        voice <<= 8;
        voice += buf[1];
        switch (voice) {
          case pockypocky1 :
            Serial.println(F("pockypocky1"));
            SerialNumber = 0;
            quarterCounter = 1;
            break;
          case pockypocky2 :
            Serial.println(F("pockypocky2"));
            SerialNumber = 0;
            quarterCounter = 1;
            break;
          case pockypocky3 :
            Serial.println(F("pockypocky3"));
            SerialNumber = 0;
            quarterCounter = 1;
            break;
          case one1:
            Serial.println(F("one1"));
            SerialNumber = 1;
            quarterCounter = 1;
            break;
          case one2:
            Serial.println(F("one2"));
            SerialNumber = 1;
            quarterCounter = 1;
            break;
          case return1:
            Serial.println(F("return1"));
            SerialNumber = 2;
            quarterCounter = 1;
            break;
          case return2:
            Serial.println(F("return2"));
            SerialNumber = 2;
            quarterCounter = 1;
            break;
          case three1:
            Serial.println(F("three1"));
            SerialNumber = 3;
            quarterCounter = 1;
            break;
          case three2:
            Serial.println(F("three2"));
            SerialNumber = 3;
            quarterCounter = 1;
            break;
          case three3:
            Serial.println(F("three3"));
            SerialNumber = 3;
            quarterCounter = 1;
            break;
          case three4:
            Serial.println(F("three4"));
            SerialNumber = 3;
            quarterCounter = 1;
            break;
          case choice1:
            Serial.println(F("choice1"));
            SerialNumber = 4;
            quarterCounter = 1;
            break;
          case choice2:
            Serial.println(F("choice2"));
            SerialNumber = 4;
            quarterCounter = 1;
            break;
          case choice3:
            Serial.println(F("choice2"));
            SerialNumber = 4;
            quarterCounter = 1;
            break;
          case five2:
            Serial.println(F("five2"));
            SerialNumber = 5;
            quarterCounter = 1;
            break;
          case five3:
            Serial.println(F("five3"));
            SerialNumber = 5;
            quarterCounter = 1;
            break;
          case full2:
            Serial.println(F("full2"));
            SerialNumber = 6;
            quarterCounter = 1;
            break;
          case full3:
            Serial.println(F("full3"));
            SerialNumber = 6;
            quarterCounter = 1;
            break;
        }
      }
      /** wait action command for 4 seconds */
      if (sta == 1) {
        if (millis() - start_time > 4000) {
          sta = 0;
          Serial.println(F("Waiting action command timeout."));
        }
      }
    }
    for ( z = 0 ; z < 4 ; z++) {
      if (quarterCounter == 1 && trigerCounter2 == 0) {
        if (modeButtonCounter1 == 1) {
          if (SerialNumber == 0) {
            Serial.println("pockypocky를 말한게 맞습니까?");
            voice.say(correctpokeypokey);
          } else if (SerialNumber == 1) {
            Serial.println("숫자 1를 말한게 맞습니까?");
            voice.say(correctnumberone);
          }
          else if (SerialNumber == 2) {
            Serial.println("return를 말한게 맞습니까?");
            voice.say(correctreturn);
          }
          else if (SerialNumber == 3) {
            Serial.println("숫자 3를 말한게 맞습니까?");
            voice.say(correctnumberthree);
          }
          else if (SerialNumber == 4) {
            Serial.println("choice를 말한게 맞습니까?");
            voice.say(correctchoice);
          }
          else if (SerialNumber == 5) {
            Serial.println("숫자 5를 말한게 맞습니까?");
            voice.say(correctnumberfive);
          } else if (SerialNumber == 6) {
            Serial.println("Full counte를 말한게 맞습니까?");
            voice.say(correctfullcount);
          }
          delay(6000);
          int ret2;
          uint16_t voice2 = 0;
          ret2 = myVR.recognize(buf, 50);
          if (ret2 > 0) {
            voice2 += buf[0];
            voice2 <<= 8;
            voice2 += buf[1];
            switch (voice2) {
              case yes1:
                Serial.println("yes1");
                goto dlWhr;
                break;
              case yes2:
                Serial.println("yes2");
                goto dlWhr ;
                break;
              case no1:
                quarterCounter = 0;
                Serial.println("no1");
                goto turnBack;
                break;
              case no2:
                quarterCounter = 0;
                Serial.println("no2");
                goto turnBack;
                break;
            }
          }
          if (sta == 1) {
            if (millis() - start_time > 4000) {
              sta = 0;
              Serial.println(F("Waiting action command timeout."));
            }
          }
        }
        dlWhr:
        if (SerialNumber == arr[a][z]) {
          switch (SerialNumber) {
            case 0 :                                        //숫자 0을 냈을경우            If the number 0 is given,
              pockyCounter = 0;                             //숫자카운트 0 으로 초기화시켜줌     Initializing POOKYCOUNTER
              delay(1000);
              Serial.print("현재사용자의 번호 : ");           //숫자 0 같은경우 '포키포키' 라는 고유명사로 대체되어야하며 이것은 내면 질일이 없기 때문에 내고 새숫자를 그냥 다시 입력받는다.
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              break;
            case 1 :                                         //숫자 1을 냈을경우           If the number 1 is given,
              if (pockyCounter == 11 * pockyMul ) {
                Serial.print("현재사용자의 번호 : ");          // 만약 전 사용자가 풀 카운트(22~55)를 만든 상태에서 현 사용자에게 넘어왔을때 어떤 숫자든 그 배열 값은 = 8 이 되고 for 반복을 4번해서 모든 arr[a][0~3]의 값을 8로만듬    If a player before his turn makes a limit number (22-55) of POOKYCOUNTER, the player now loses the game if he gives a number 1.
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);
                Serial.println("game lose") ;
                gameLose(a);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
              pockyCounter ++;                              // 숫자 카운트 1을 추가시켜줌  Pockycounter +1
              delay(1000);
              Serial.print("현재사용자의 번호 : ");
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              continue;
            case 2 :                                            //숫자 2을 냈을경우    If the number 2 is given,
              if (pockyCounter == 11 * pockyMul ) {
                Serial.print("현재사용자의 번호 : ");
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);                       // 만약 전 사용자가 풀 카운트(22~55)를 만든 상태에서 현 사용자에게 넘어왔을때 어떤 숫자든 그 배열 값은 = 8 이 되고 for 반복을 4번해서 모든 arr[a][0~3]의 값을 8로만듬   If a player before his turn makes a limit number (22-55) of POOKYCOUNTER, the player now loses the game if he gives a number 2.
                Serial.println("game lose") ;
                gameLose(a);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
              if (buttonPushCounter >= 3 ) {
                reflectNumber = reflectNumber * -1;           // 설명 4.사용자가 3사람일 일경우경우 reflectNumber 가 1 or -1 을 반복해서 나옴 reflecetNumber는 초기값 1로 설정되어있고 1 일시 정상순서 -1일시 역전순서를 따라감    If there are more than three players, reverse the order using the reflection numbers.
                Serial.println(reflectNumber);
                cState = a ;                                  //cState 에다가 현재 2번을 낸 사용자의 번호가 들어가고 이를 밑에 void loop문에서 cState의 상태와 reflectNumber의 상태에 따라 각각 다른 분기를 주도록 설정해놓음      A variable called cState contains the current user's number and generates a branch of order reversal through the user's number.
                delay(1000);
              }
              Serial.print("현재사용자의 번호 : ");
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              break;
            case 3 :                                           //숫자 3을 냈을경우   If the number 3 is given,
              if (pockyCounter == 11 * pockyMul || pockyCounter >= (11 * pockyMul) - 2 || pockyCounter >= (11 * pockyMul) - 1) {    //숫자 ex20,21 31,32 42,43 54,53 의경우 에서 3을 낼경우 풀카운트(22~55)로 만들어버리고 그 숫자를 낸 플레이어   In case of pocky counter 20,21 31,32 42,43 54,53 the player who pays the card loses the game.
                Serial.print("현재사용자의 번호 : ");                                                                                 //숫자를 전부 8로바꿔버리고 게임을 지게만듬
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);
                Serial.println("game lose") ;
                gameLose(a);
                pockyCounter = 11 * pockyMul;
                Serial.print("pockycounter = ");
                Serial.println(pockyCounter);
                count(pockyCounter);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
              pockyCounter = pockyCounter + 3;                          //카운트 3추가     Pockycounter +3
              delay(1000);
              Serial.print("현재사용자의 번호 : ");
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              break;
            case 4 :                                    //숫자 4를 냈을경우    If the number 4 is given,
              if (pockyCounter == 11 * pockyMul ) {
                Serial.print("현재사용자의 번호 : ");
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);
                Serial.println("game lose") ;
                gameLose(a);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
turnBack2:
              if (pointNumber == 0) {
                Serial.println("");                                     //키보드 입력 == 나중에 음성입력으로 대체되어야함.      Currently, keyboard input will be replaced by voice input later.
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.print(fakecounter);
                Serial.println("번 사용자님 플레이어를 정해주세요");         //키보드 입력을받고나서 그에따라 cState를 그사람의 숫자에 맞는 void loop문의 cState 상태로 대입시킨다.
                selectPlayer(a);
                delay(5000);
                int ret3;
                uint16_t voice3 = 0;
                ret3 = myVR.recognize(buf, 50);
                if (ret3 > 0) {
                  voice3 += buf[0];
                  voice3 <<= 8;
                  voice3 += buf[1];
                  switch (voice3) {
                    case one1:
                      Serial.println(F("one1"));
                      SerialNumber2 = 0;
                      break;
                    case one2:
                      Serial.println(F("one2"));
                      SerialNumber2 = 0;
                      break;
                    case two1:
                      Serial.println(F("two1"));
                      SerialNumber2 = 1;
                      break;
                    case three1:
                      Serial.println(F("three1"));
                      SerialNumber2 = 2;
                      break;
                    case three2:
                      Serial.println(F("three2"));
                      SerialNumber2 = 2;
                      break;
                    case three3:
                      Serial.println(F("three3"));
                      SerialNumber2 = 2;
                      break;
                    case three4:
                      Serial.println(F("three4"));
                      SerialNumber2 = 2;
                      break;
                    case four1:
                      Serial.println(F("four1"));
                      SerialNumber2 = 3;
                      break;
                    case five2:
                      Serial.println(F("five2"));
                      SerialNumber2 = 4;
                      break;
                    case five3:
                      Serial.println(F("five3"));
                      SerialNumber2 = 4;
                      break;
                  }
                }
                /** wait action command for 4 seconds */
                if (sta == 1) {
                  if (millis() - start_time > 4000) {
                    sta = 0;
                    Serial.println(F("Waiting action command timeout."));
                  }
                }
              }
              if (modeButtonCounter1 == 1) {
                if (SerialNumber2 == 0) {
                  Serial.println("플레이어 1를 말한게 맞습니까?");
                  voice.say(saidthatplayer1);
                } else if (SerialNumber2 == 1) {
                  Serial.println("플레이어 2를 말한게 맞습니까?");
                  voice.say(saidthatplayer1);
                }
                else if (SerialNumber2 == 2) {
                  Serial.println("플레이어 3를 말한게 맞습니까?");
                  voice.say(saidthatplayer1);
                }
                else if (SerialNumber2 == 3) {
                  Serial.println("플레이어 4를 말한게 맞습니까?");
                  voice.say(saidthatplayer1);
                }
                else if (SerialNumber2 == 4) {
                  Serial.println("플레이어 5를 말한게 맞습니까?");
                  voice.say(saidthatplayer1);
                }
                delay(3000);
                int ret4;
                uint16_t voice4 = 0;
                ret4 = myVR.recognize(buf, 50);
                if (ret4 > 0) {
                  voice4 += buf[0];
                  voice4 <<= 8;
                  voice4 += buf[1];
                  switch (voice4) {
                    case yes1:
                      Serial.println("yes1");
                      goto rightOption2;
                      break;
                    case yes2:
                      Serial.println("yes2");
                      goto rightOption2;
                      break;
                    case no1:
                      quarterCounter = 0;
                      Serial.println("no1");
                      goto turnBack;
                      break;
                    case no2:
                      quarterCounter = 0;
                      Serial.println("no2");
                      goto turnBack;
                      break;
                  }
                }
                if (sta == 1) {
                  if (millis() - start_time > 4000) {
                    sta = 0;
                    Serial.println(F("Waiting action command timeout."));
                  }
                }
              }
rightOption2 :
              if (modeButtonCounter1 == 1 && buttonPushCounter == 2 && SerialNumber2 >= 2) {
                Serial.println("잘못 말씀하셨습니다.");
                voice.say(saidwrong);
                goto turnBack2;
              } else if (modeButtonCounter1 == 1 && buttonPushCounter == 3 && SerialNumber2 >= 3) {
                Serial.println("잘못 말씀하셨습니다.");
                voice.say(saidwrong);
                goto turnBack2;
              } else if (modeButtonCounter1 == 1 && buttonPushCounter == 3 && SerialNumber2 >= 4) {
                Serial.println("잘못 말씀하셨습니다.");
                voice.say(saidwrong);
                goto turnBack2;
              }
              if (buttonPushCounter == 2) { // 이건 2사람일경우엔 사실 4번 2번의 기능이 필요없지만 형식상으로 카드를 내고 새로운 숫자를 낼때 사용   If you give a number 4 to two people, you can choose yourself.
                switch (SerialNumber2) {
                  case 0:
                    case4(a);
                    break;
                  case 1 :
                    case4(a);
                    break;
                }

              } else if (buttonPushCounter >= 3 ) {                            //3사람일때    3player
                if (reflectNumber == 1) {                               //정상순서    in the normal order
                  if (buttonPushCounter == 3) {                         //버튼 푸시카운터가 3사람일때 즉 플레이어 3명일때
                    switch (SerialNumber2) {
                      case 0:
                        cState = 2;                                     //0번 플레이어부터 시작할 수 있게만든 cState = 2;    Makes it possible to start with player 0.
                        case4(a);
                        break;
                      case 1:                                           //1번 플레이어부터 시작할 수 있게만든 cState = 0;    Makes it possible to start with player 1.
                        cState = 0;
                        case4(a);
                        break;
                      case 2:                                           //2번 플레이어부터 시작할 수 있게만든 cState = 1;    Makes it possible to start with player 2.
                        cState = 1;
                        case4(a);
                        break;
                    }
                  } else if (buttonPushCounter == 4) {                   //4사람일때     4player
                    switch (SerialNumber2) {
                      case 0:
                        cState = 3;
                        case4(a);
                        break;
                      case 1:
                        cState = 0;
                        case4(a);
                        break;
                      case 2:
                        cState = 1;
                        case4(a);
                        break;
                      case 3:
                        cState = 2;
                        case4(a);
                        break;
                    }
                  }
                  else if (buttonPushCounter == 5) {                      //5사람일때   5player
                    switch (SerialNumber2) {
                      case 0:
                        cState = 4;
                        case4(a);
                        break;
                      case 1:
                        cState = 0;
                        case4(a);
                        break;
                      case 2:
                        cState = 1;
                        case4(a);
                        break;
                      case 3:
                        cState = 2;
                        case4(a);
                        break;
                      case 4:
                        cState = 3;
                        case4(a);
                        break;
                    }
                  }
                }
                else if (reflectNumber == -1) {                      //반사순서일때       If the order is reversed
                  if (buttonPushCounter == 3) {                     // 3사람일때         3player
                    switch (SerialNumber2) {
                      case 0:
                        cState = 1;
                        case4(a);
                        break;
                      case 1:
                        cState = 2;
                        case4(a);
                        break;
                      case 2:
                        cState = 0;
                        case4(a);
                        break;
                    }
                  } else if (buttonPushCounter == 4) {              //4사람일때           4player
                    switch (SerialNumber2) {
                      case 0:
                        cState = 1;
                        case4(a);
                        break;
                      case 1:
                        cState = 2;
                        case4(a);
                        break;
                      case 2:
                        cState = 3;
                        case4(a);
                        break;
                      case 3:
                        cState = 0;
                        case4(a);
                        break;
                    }
                  }

                  else if (buttonPushCounter == 5) {                //5사람일때           5player
                    switch (SerialNumber2) {
                      case 0:
                        cState = 1;
                        case4(a);
                        break;
                      case 1:
                        cState = 2;
                        case4(a);
                        break;
                      case 2:
                        cState = 3;
                        case4(a);
                        break;
                      case 3:
                        cState = 4;
                        case4(a);
                        break;
                      case 4:
                        cState = 0;
                        case4(a);
                        break;
                    }
                  }
                }
              }
              break;
            case 5 :
              if (pockyCounter == 11 * pockyMul || pockyCounter >= (11 * pockyMul) - 4 || pockyCounter >= (11 * pockyMul) - 3 || pockyCounter >= (11 * pockyMul) - 2 || pockyCounter >= (11 * pockyMul) - 1 ) {
                Serial.print("현재사용자의 번호 : ");                   // 3번카드를 냈을때랑 동일함 ex 18,19,20,21 에서는 5를 더하면 22를 넘어버리고 그사람 겜지고 그사람이 가진숫자 싹다 8로바뀌어버림    In case of maximum pocky counter -4 , the game is lost when the number 5 is issued.
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);
                Serial.println("game lose") ;
                gameLose(a);
                pockyCounter = 11 * pockyMul;
                Serial.print("pockycounter = ");
                Serial.println(pockyCounter);
                count(pockyCounter);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
              pockyCounter = pockyCounter + 5;                  //카운트 5추가   pockycounter +5
              delay(1000);
              Serial.print("현재사용자의 번호 : ");
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              break;
            case 6 :
              if (pockyCounter == 11 * pockyMul ) {
                Serial.print("현재사용자의 번호 : ");
                fakecounter = 0;
                fakecounter = a + 1;
                Serial.println(fakecounter);
                Serial.println("game lose") ;
                gameLose(a);
                for ( z = 0 ; z < 4 ; z++) {
                  arr[a][z] = 8 ;
                }
                quarterCounter = 2 ;
                loseCounter ++ ;
                break ;
              }
              pockyCounter = 11 * pockyMul;                       //무조건 풀카운트 만들어줌 ㅇㅅㅇ     onlt maximum conuter change
              delay(1000);
              Serial.print("현재사용자의 번호 : ");
              fakecounter = 0;
              fakecounter = a + 1;
              Serial.println(fakecounter);
              nowPlayer(a);
              Serial.print("pockycounter = ");
              Serial.println(pockyCounter);
              count(pockyCounter);
              quarterCounter = 2;
              arr[a][z] = random(0, 7);
              Serial.print("새 번호: ");
              Serial.println(arr[a][z]);
              p = arr[a][z];
              newNumber(p);
              delay(500);
              break;
          }
        }
        else if (arr[a][z] == 8) {
          break;
        }
        else {
          trigerCounter1 ++;
          delay(500);
          continue ;
        }

      }

    } if (trigerCounter1 == 4 ) {                         //if   if (SerialNumber == arr[a][z]) 일떄 분기가 총 3개인데 하나는 겜돌아가게만들고 ==8일시 걍 저 게임문자체가안돌아가고 그 밖의 자기가 가진숫자랑 자기가 말한 숫자랑 일치하는게 없을경우 tirgerCounter1을 플러스시키고        If you give out something other than the number you have, the number of Triggercounter1 increases by 1 and the number of Triggercounter1 ==4 becomes the wrong card and the player must return the card.
      trigerCounter1 = 0;                                 //그게 총 4개쌓이면 그 사용자가 잘못입력했다는 것을 가리키며 사용자가 잘못입력했다는 말이 나오면서 다시 루프문이 돌아가기시작한다.
      quarterCounter = 0;
      fakecounter = 0;
      fakecounter = a + 1;
      Serial.print(fakecounter);
      Serial.println("번 사용자가 잘못 입력 했습니다.  ");
      voice.say(saidwrong);
      delay(2000);
    }
  }
}


void setup() {
  delay(200);
  myVR.begin(9600);
  Serial.begin(115200);
  Serial.println(F("Elechouse SimpleVR Module <Control LED> sample."));
  randomSeed(analogRead(0));
  pinMode(playerSwitch1, INPUT_PULLUP);  pinMode(playerSwitch2, INPUT_PULLUP); pinMode(playerSwitch3, INPUT_PULLUP); pinMode(playerSwitch4, INPUT_PULLUP); pinMode(playerSwitch5, INPUT_PULLUP); pinMode(startSwitch, INPUT_PULLUP);
  pinMode(modeSwitch1, INPUT_PULLUP); pinMode(modeSwitch2, INPUT_PULLUP); pinMode(voiceStartSwitch, INPUT_PULLUP);

  //랜덤함수도 그냥 프로그램 일정한 패턴이 존재해서 가변저항 같은거 섞어서 아두이노랑 핀으로 연결하고 그 핀번호를 통해 랜덤값을 새롭게 정해지게 할 수 있음 그 함수가 저거


  if (myVR.checkVersion(buf) > 0) {
    Serial.println(F("Found SimpleVR"));
    Serial.print(F("SW VER:"));
    Serial.print(buf[0], DEC);
    Serial.print('.'); Serial.print(buf[1], DEC);
    Serial.print('.'); Serial.println(buf[2], DEC);
    Serial.print(F("HW VER:"));
    Serial.print(buf[3], DEC);
    Serial.print('.'); Serial.println(buf[4], DEC);
  } else {
    Serial.println(F("Can't find SimpleVR, please restart Arduino after checking the connection."));
    while (1);
  }

  if (myVR.setGroup(1) < 0) {
    Serial.println(F("Communication error, please restart Arduino after checking the connection."));
    while (1);
  }

  if (myVR.setEnable(true) < 0) {
    Serial.println(F("Communication error, please restart Arduino after checking the connection."));
    while (1);
  }

  if (myVR.checkSystemSettings(buf) < 0) {
    Serial.println(F("Communication error, please restart Arduino after checking the connection."));
    while (1);
  } else {
    if (buf[0]) {
      Serial.println(F("SimpleVR is enabled."));
    } else {
      Serial.println(F("SimpleVR is disabled."));
    }
    Serial.print(F("Group "));
    Serial.print(buf[1], DEC); Serial.println(F(" is selected."));
    if (buf[2] != 0xFF) {
      Serial.print(F("Threshold value is ")); Serial.println(buf[2], DEC);
      Serial.println("Please wait for 5 seconds. Then you could play.");
      Serial.println();
    }
  }
  sta = 0;
  start_time = millis();


}
void loop() {

  buttonState1 = digitalRead(playerSwitch1); buttonState2 = digitalRead(playerSwitch2); buttonState3 = digitalRead(playerSwitch3); buttonState4 = digitalRead(playerSwitch4); buttonState5 = digitalRead(playerSwitch5);
  modeState1 = digitalRead(modeSwitch1); modeState2 = digitalRead(modeSwitch2); voiceStartState = digitalRead(voiceStartSwitch);
  // 1. 버튼의 상태를 읽어온다. // 2. 버튼의 상태가 이전과 비교하여 달라졌는지 알아본다.

  // 3. 상태가 달라졌으면 이곳으로 들어온다.// 4. 현재 버튼값이 <하이>인지 확인한다.
  if (buttonState1 != lastButtonState1 || buttonState2 != lastButtonState2 || buttonState3 != lastButtonState3 || buttonState4 != lastButtonState4 || buttonState5 != lastButtonState5 || modeState1 != lastModeState1 || modeState2 != lastModeState2) {              //
    if (lastButtonState1 == 0 && lastButtonState2 == 0 && lastButtonState3 == 0 && lastButtonState4 == 0 && lastButtonState5 == 0 && buttonPushCounter == 0) {                                        // 6. <하이>에서 <로> 로 변화한 경우에는 달리 할일이 없다.
      Serial.println("아직 시작하기전 입니다. == before game start..");

    }
    if (modeState1 == LOW && modeButtonCounter1 == 0 && modeButtonCounter2 == 0) {
      modeButtonCounter1 ++ ;
      modeButtonCounter2 = 0;
      Serial.println("쉬운모드입니다.");
      voice.say(easymode);
    }
    if (modeState2 == LOW && modeButtonCounter2 == 0 && modeButtonCounter1 == 0) {
      modeButtonCounter2 ++ ;
      modeButtonCounter1 = 0;
      Serial.println("어려운모드입니다.");
      voice.say(hardmode);
    }
    if (buttonState1 == LOW && buttonStateCounter1 == 0) {
      buttonStateCounter1 ++ ;
      offButtonCounter = 1;
      Serial.println("1번 참가자 참가함 = 1 player join");
      voice.say(player1join);
      if (buttonState1 == LOW)  {      // 5. <하이>라면, <로>에서 변화한 것이므로 횟수값을 증가시킨다.
        buttonPushCounter++;
        pockyMul ++;
        Serial.print("1 player button on     ");
        Serial.print("number of button pushes:  ");
        Serial.println(buttonPushCounter);
      }
    }

    if (buttonState2 == LOW && buttonStateCounter2 == 0) {
      buttonStateCounter2 ++ ;
      Serial.println("2번 참가자 참가함 = 1 player join");
      voice.say(player2join);
      if ( buttonState2 == LOW )  {
        buttonPushCounter++;
        pockyMul ++;
        Serial.print("2 player button on     ");
        Serial.print("number of button pushes:  ");
        Serial.println(buttonPushCounter);
      }
    }
    if (buttonState3 == LOW && buttonStateCounter3 == 0) {
      buttonStateCounter3 ++ ;
      Serial.println("3번 참가자 참가함 = 3 player join");
      voice.say(player3join);
      if (buttonState3 == LOW )  {
        buttonPushCounter++;
        pockyMul ++;
        Serial.print("3 player button on     ");
        Serial.print("number of button pushes:  ");
        Serial.println(buttonPushCounter);
      }
    }
    if (buttonState4 == LOW && buttonStateCounter4 == 0 ) {
      buttonStateCounter4 ++ ;
      Serial.println("4번 참가자 참가함 = 4 player join ");
      voice.say(player4join);
      if ( buttonState4 == LOW )  {
        buttonPushCounter++;
        pockyMul ++;
        Serial.print("4 player button on     ");
        Serial.print("number of button pushes:  ");
        Serial.println(buttonPushCounter);
      }
    }
    if (buttonState5 == LOW && buttonStateCounter5 == 0) {
      buttonStateCounter5 ++ ;
      Serial.println("5번 참가자 참가함 = 5 player join");
      voice.say(player5join);
      if ( buttonState5 == LOW)  {
        buttonPushCounter++;
        pockyMul ++;
        Serial.print("5 player button on     ");
        digitalWrite(13, HIGH);
        Serial.print("number of button pushes:  ");
        Serial.println(buttonPushCounter);
      }
    }

    // Delay a little bit to avoid bouncing7
    delay(50);
  }
  lastButtonState1 = buttonState1;   lastButtonState2 = buttonState2; lastButtonState3 = buttonState3; lastButtonState4 = buttonState4; lastButtonState5 = buttonState5; // 7. 다음 번 확인을 위해, 현재 버튼값을 저장해둔다.
  startButtonState = digitalRead(startSwitch);
  if (startButtonState == LOW) {
    if ((modeButtonCounter1 == 1 || modeButtonCounter2 == 1) && buttonPushCounter >= 2) {
      startButtonPushCounter = 1;
      Serial.println(startButtonPushCounter);
      delay(1000);
    } else {
      Serial.println("플레이어가 2명이상 참가하지 않거나 모드 선택을 하지않으셨습니다");
      voice.say(starterror);
      delay(3000);
    }
  }

  if (startButtonPushCounter >= 1) {
    if (buttonPushCounter >= 2 && startButtonState == LOW   ) {
      Serial.println("스타트 버튼을 눌렀습니다.= push the start button");
      voice.say(startbuttonpress);
      for (i = 0; i < buttonPushCounter ; i++) {
        Serial.println("");
        Serial.println(i);
        if(i==0){
          voice.say(player1number);
        }else if(i==1){voice.say(player2number);}
        else if(i==2){voice.say(player3number);}
        else if(i==3){voice.say(player4number);}
        else if(i==4){voice.say(player5number);}
        delay(2000);
        for (z = 0; z < 4; z++) {
          arr[i][z] = random(0, 7);
          int qwqw = arr[i][z];
          if(qwqw== 0){
            voice.say(pokeypokey); 
          }else if(qwqw==1){
           voice.say(one); 
          }else if(qwqw==2){
           voice.say(return11); 
          }else if(qwqw==3){
           voice.say(three); 
          }else if(qwqw==4){
            voice.say(choice11);
          }else if(qwqw==5){
            voice.say(five);
          }else if(qwqw==6){
            voice.say(fullcount);
          }
          Serial.print(arr[i][z]);
          Serial.print(" ");
          delay(500);
        }
      }
      pockyCounter = 0;
      if (buttonPushCounter == 2) {                                       //각각의 버튼푸쉬카운터마다 시작하는 위치를 정해준다. 안그러면 무조건 cState == 0 인 곳으로 들어가버리니까 무조건 필요한 문임.
        cState = 0;
      } else if (buttonPushCounter == 3) {
        cState = 2;
      } else if (buttonPushCounter == 4) {
        cState = 3;
      } else if (buttonPushCounter == 5) {
        cState = 4;
      }

      while (winnerCounter == 0) {
        while (pockyCounter <= pockyMul * 11 && reflectNumber == 1 ) {
reflectx :                                                 //정상 순서일때
          if (buttonPushCounter == 2) {                                          // 2사람일때 돌아가는 문
            for ( c = 0; c < buttonPushCounter ; c++) {                         //모르겠다 걍알아서해석하세요
              forfor(c);
              delay(2000);
              quarterCounter = 0;
              trigerCounter1 = 0;
              if (pointNumber == 1 && SerialNumber2 == 0 ) {
                pointNumber = 0;
                goto reflectx;
              } else if (pointNumber == 1 && SerialNumber2 == 1) {
                pointNumber = 0;
                c = 0;
                continue;
              }
              if (pointNumber = 0 && c == 1) {
                c = 0;
                break;
              }
            }
          }
          if (buttonPushCounter == 3) {                    //3사람일때
            switch (cState) {
              case 0 :                                  //정상순서---순서역전일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 2 ; c++) {
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }

                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } if (c == 2) {
                      c = -1;                       //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }

              case 1:                               //정상순서---순서역전일때 숫자 2을 낸사람이 1번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 2 ; c++) {
                  if (c == 0) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } if (c == 2) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 2:                               //정상순서---순서역전일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for ( c = 0; c < buttonPushCounter ; c++) {
                  forfor(c);
                  delay(2000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == -1) {
                    cState = c;
                    goto reflect;                     //반사지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflectx;
                  }
                  if (c == 2) {
                    c = -1 ;                        //순환을 위해 필요하다...
                    continue;
                  }
                }
            }
          }
          if (buttonPushCounter == 4) {               //4사람일때
            switch (cState) {
              case 0 :                                //정상순서---순서역전일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } continue;
                  } else if (c == 3) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      break;
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    if (c == 3) {
                      c = -1;                       //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 1:                               //정상순서---순서역전일때 숫자 2을 낸사람이 1번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                 //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } if (c == 3) {
                      c = -1;                       //순환을 위해 필요하다...
                      continue;
                    }
                  }

                }

              case 2:                                //정상순서---순서역전일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } if (c == 3) {
                      c = -1;                       //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 3:                                  //정상순서---순서역전일때 숫자 2을 낸사람이 3번 플레이어일때 이쪽으로 들어온다
                for ( c = 0; c < buttonPushCounter ; c++) {
                  forfor(c);
                  delay(2000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == -1) {
                    cState = c;
                    goto reflect;                     //반사지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflectx;
                  }
                  if (c == 3) {
                    c = -1 ;                         //순환을 위해 필요하다...
                    continue;
                  }
                }
            }
          }
          if (buttonPushCounter == 5) {                   //5사람일때
            switch (cState) {
              case 0 :                                //정상순서---순서역전일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    if (c == 4) {
                      c = -1 ;                         //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 1:                                   //정상순서---순서역전일때 숫자 2을 낸사람이 1번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    } if (c == 4) {
                      c = -1 ;                         //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 2:                                   //정상순서---순서역전일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    if (c == 4) {
                      c = -1 ;                         //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 3:                                 //정상순서---순서역전일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == -1) {
                      cState = c;
                      goto reflect;                     //반사지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflectx;
                    }
                    if (c == 4) {
                      c = -1 ;                         //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 4:                                       //정상순서---순서역전일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for ( c = 0; c < buttonPushCounter ; c++) {
                  forfor(c);
                  delay(2000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == -1) {
                    cState = c;
                    goto reflect;                     //반사지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflectx;
                  }
                  if (c == 4) {
                    c = -1 ;
                    continue;
                  }
                }
            }
          }
        }

        while (pockyCounter <= pockyMul * 11 && reflectNumber == -1 ) {
reflect:                                                                           //반사순서로 감
          if (buttonPushCounter == 3) {                                           //순서역전일때 3인
            switch (cState) {
              case 0 :                                      //역전순서---정상순서일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c = 2 ; c >= 0 ; c--) {
                  forfor(c);
                  delay(4000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == 1) {
                    cState = c;
                    goto reflectx ;                 //정상지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflect;
                  }
                  if (c == 0) {
                    c = 3;                          //순환을 위해 필요하다...
                    continue;
                  }
                }

              case 1:                                     //역전순서---정상순서일때 숫자 2을 낸사람이 1번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 2 ; c++) {
                  if (c == 0) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 2) {
                      c = -1;                             //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 2:                                    //역전순서---정상순서일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 2 ; c++) {
                  Serial.println("이문 실행됨?3");
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 2) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              default:
                c = c - 1;                        //이거필요한가? 아직잘모르겠 ㅋㅅㅋㅅㅋㅋ
                continue;
            }
          }
          if (buttonPushCounter == 4) {           //순서역전일때 4인
            switch (cState) {
              case 0 :                            //역전순서---정상순서일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c = 3 ; c >= 0 ; c--) {
                  forfor(c);
                  delay(2000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == 1) {
                    cState = c;
                    goto reflectx ;                 //정상지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflect;
                  }
                  if (c == 0) {
                    c = 4;                      //순환을 위해 필요하다...
                  }
                  continue;
                }
              case 1:
                for (c =  0; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    if (c == 3) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }

                }
              case 2:                                //역전순서---정상순서일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 3) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 3:                               //역전순서---정상순서일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 3 ; c++) {
                  if (c == 0) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 3) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                default:
                  c = c - 1;
                  continue;
                }
            }
          }
          if (buttonPushCounter == 5) {                 //순서역전일때 5인   ★★
            switch (cState) {
              case 0 :                                    //역전순서---정상순서일때 숫자 2을 낸사람이 0번 플레이어일때 이쪽으로 들어온다
                for (c = 4 ; c >= 0 ; c--) {
                  forfor(c);
                  delay(2000);
                  quarterCounter = 0;
                  trigerCounter1 = 0;
                  if (reflectNumber == 1) {
                    cState = c;
                    goto reflectx ;                 //정상지점으로감
                  }
                  if (pointNumber == 1) {
                    pointNumber = 0;
                    goto reflect;
                  }
                  if (c == 0) {
                    c = 5;                          //순환을 위해 필요하다...
                    continue;
                  }
                }
              case 1:                               //역전순서---정상순서일때 숫자 2을 낸사람이 1번 플레이어일때 이쪽으로 들어온다
                for (c =  0; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    if (c == 4) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 2:                                 //역전순서---정상순서일때 숫자 2을 낸사람이 2번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      break;
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 4) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 3:                                  //역전순서---정상순서일때 숫자 2을 낸사람이 3번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 4) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              case 4:                                  //역전순서---정상순서일때 숫자 2을 낸사람이 4번 플레이어일때 이쪽으로 들어온다
                for (c = 0 ; c <= 4 ; c++) {
                  if (c == 0) {
                    forfor(3);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 1) {
                    forfor(2);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 2) {
                    forfor(1);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 3) {
                    forfor(0);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    }
                    continue;
                  } else if (c == 4) {
                    forfor(4);
                    delay(2000);
                    quarterCounter = 0;
                    trigerCounter1 = 0;
                    if (reflectNumber == 1) {
                      cState = c;
                      goto reflectx ;                 //정상지점으로감
                    }
                    if (pointNumber == 1) {
                      pointNumber = 0;
                      goto reflect;
                    } if (c == 4) {
                      c = -1;                           //순환을 위해 필요하다...
                      continue;
                    }
                  }
                }
              default:
                c = c - 1;
                continue;
            }
          }
        }
      }
    }
  }
}
